//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UserServiceReference
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SP_UserMarket_GetMarketForAllowedBetting_Result", Namespace="http://schemas.datacontract.org/2004/07/bfnexchange.Services.DBModel")]
    public partial class SP_UserMarket_GetMarketForAllowedBetting_Result : object
    {
        
        private bool BettingAllowedField;
        
        private string EventIDField;
        
        private System.Nullable<System.DateTime> EventOpenDateField;
        
        private string EventTypeNameField;
        
        private string MarketField;
        
        private string MarketCatalogueIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BettingAllowed
        {
            get
            {
                return this.BettingAllowedField;
            }
            set
            {
                this.BettingAllowedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EventID
        {
            get
            {
                return this.EventIDField;
            }
            set
            {
                this.EventIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> EventOpenDate
        {
            get
            {
                return this.EventOpenDateField;
            }
            set
            {
                this.EventOpenDateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EventTypeName
        {
            get
            {
                return this.EventTypeNameField;
            }
            set
            {
                this.EventTypeNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Market
        {
            get
            {
                return this.MarketField;
            }
            set
            {
                this.MarketField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MarketCatalogueID
        {
            get
            {
                return this.MarketCatalogueIDField;
            }
            set
            {
                this.MarketCatalogueIDField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SP_UserMarket_GetEventDetailsbyMarketID_Result", Namespace="http://schemas.datacontract.org/2004/07/bfnexchange.Services.DBModel")]
    public partial class SP_UserMarket_GetEventDetailsbyMarketID_Result : object
    {
        
        private string EventIDField;
        
        private string EventNameField;
        
        private System.Nullable<System.DateTime> EventOpenDateField;
        
        private string MarketCatalogueIDField;
        
        private string MarketCatalogueNameField;
        
        private string associateeventIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EventID
        {
            get
            {
                return this.EventIDField;
            }
            set
            {
                this.EventIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EventName
        {
            get
            {
                return this.EventNameField;
            }
            set
            {
                this.EventNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> EventOpenDate
        {
            get
            {
                return this.EventOpenDateField;
            }
            set
            {
                this.EventOpenDateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MarketCatalogueID
        {
            get
            {
                return this.MarketCatalogueIDField;
            }
            set
            {
                this.MarketCatalogueIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MarketCatalogueName
        {
            get
            {
                return this.MarketCatalogueNameField;
            }
            set
            {
                this.MarketCatalogueNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string associateeventID
        {
            get
            {
                return this.associateeventIDField;
            }
            set
            {
                this.associateeventIDField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MarketBook", Namespace="http://schemas.datacontract.org/2004/07/ExternalAPI.TO")]
    public partial class MarketBook : object
    {
        
        private int BetDelayField;
        
        private bool BettingAllowedField;
        
        private bool BettingAllowedOverAllField;
        
        private string CricketAPIMatchKeyField;
        
        private string CricketMatchKeyField;
        
        private System.Collections.Generic.List<UserServiceReference.DebitCredit> DebitCreditField;
        
        private string EventIDField;
        
        private string FavoriteBackField;
        
        private string FavoriteBackSizeField;
        
        private string FavoriteIDField;
        
        private string FavoriteLayField;
        
        private string FavoriteLaySizeField;
        
        private string FavoriteSelectionNameField;
        
        private System.Collections.Generic.List<UserServiceReference.SP_UserMarket_GetDistinctKJMarketsbyEventID_Result> FigureMarketsField;
        
        private string GetMatchUpdatesFromField;
        
        private bool IsBspReconciledField;
        
        private bool IsCompleteField;
        
        private bool IsCrossMatchingField;
        
        private bool IsInplayField;
        
        private bool IsMarketDataDelayedField;
        
        private bool IsRunnersVoidableField;
        
        private System.Collections.Generic.List<UserServiceReference.SP_UserMarket_GetDistinctKJMarketsbyEventID_Result> KJMarketsField;
        
        private System.Nullable<System.DateTime> LastMatchTimeField;
        
        private System.Collections.Generic.List<UserServiceReference.LinevMarkets> LineVMarketsField;
        
        private System.Collections.Generic.List<UserServiceReference.LinevMarketsIN> LineVMarketsINField;
        
        private string MainSportsnameField;
        
        private string MarketBookNameField;
        
        private string MarketIdField;
        
        private string MarketStatusstrField;
        
        private int NumberOfActiveRunnersField;
        
        private int NumberOfRunnersField;
        
        private int NumberOfWinnersField;
        
        private string OpenDateField;
        
        private System.Nullable<System.DateTime> OrignalOpenDateField;
        
        private decimal PoundRateField;
        
        private System.Collections.Generic.List<UserServiceReference.Runner> RunnersField;
        
        private System.Collections.Generic.List<UserServiceReference.SP_UserMarket_GetDistinctKJMarketsbyEventID_Result> SFigMarketsField;
        
        private string SheetNameField;
        
        private UserServiceReference.MarketStatus StatusField;
        
        private double TotalAvailableField;
        
        private double TotalMatchedField;
        
        private string TotalOversField;
        
        private string UserBetsAdminField;
        
        private string UserBetsAgentField;
        
        private string UserBetsEndUserField;
        
        private long VersionField;
        
        private bool isOpenExternallyField;
        
        private bool isWinTheTossMarketField;
        
        private System.Collections.Generic.List<string> lstMultipleSelectionforBetsField;
        
        private int marketsopenedField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BetDelay
        {
            get
            {
                return this.BetDelayField;
            }
            set
            {
                this.BetDelayField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BettingAllowed
        {
            get
            {
                return this.BettingAllowedField;
            }
            set
            {
                this.BettingAllowedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BettingAllowedOverAll
        {
            get
            {
                return this.BettingAllowedOverAllField;
            }
            set
            {
                this.BettingAllowedOverAllField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CricketAPIMatchKey
        {
            get
            {
                return this.CricketAPIMatchKeyField;
            }
            set
            {
                this.CricketAPIMatchKeyField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CricketMatchKey
        {
            get
            {
                return this.CricketMatchKeyField;
            }
            set
            {
                this.CricketMatchKeyField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<UserServiceReference.DebitCredit> DebitCredit
        {
            get
            {
                return this.DebitCreditField;
            }
            set
            {
                this.DebitCreditField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EventID
        {
            get
            {
                return this.EventIDField;
            }
            set
            {
                this.EventIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FavoriteBack
        {
            get
            {
                return this.FavoriteBackField;
            }
            set
            {
                this.FavoriteBackField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FavoriteBackSize
        {
            get
            {
                return this.FavoriteBackSizeField;
            }
            set
            {
                this.FavoriteBackSizeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FavoriteID
        {
            get
            {
                return this.FavoriteIDField;
            }
            set
            {
                this.FavoriteIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FavoriteLay
        {
            get
            {
                return this.FavoriteLayField;
            }
            set
            {
                this.FavoriteLayField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FavoriteLaySize
        {
            get
            {
                return this.FavoriteLaySizeField;
            }
            set
            {
                this.FavoriteLaySizeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FavoriteSelectionName
        {
            get
            {
                return this.FavoriteSelectionNameField;
            }
            set
            {
                this.FavoriteSelectionNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<UserServiceReference.SP_UserMarket_GetDistinctKJMarketsbyEventID_Result> FigureMarkets
        {
            get
            {
                return this.FigureMarketsField;
            }
            set
            {
                this.FigureMarketsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GetMatchUpdatesFrom
        {
            get
            {
                return this.GetMatchUpdatesFromField;
            }
            set
            {
                this.GetMatchUpdatesFromField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsBspReconciled
        {
            get
            {
                return this.IsBspReconciledField;
            }
            set
            {
                this.IsBspReconciledField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsComplete
        {
            get
            {
                return this.IsCompleteField;
            }
            set
            {
                this.IsCompleteField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsCrossMatching
        {
            get
            {
                return this.IsCrossMatchingField;
            }
            set
            {
                this.IsCrossMatchingField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsInplay
        {
            get
            {
                return this.IsInplayField;
            }
            set
            {
                this.IsInplayField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsMarketDataDelayed
        {
            get
            {
                return this.IsMarketDataDelayedField;
            }
            set
            {
                this.IsMarketDataDelayedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRunnersVoidable
        {
            get
            {
                return this.IsRunnersVoidableField;
            }
            set
            {
                this.IsRunnersVoidableField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<UserServiceReference.SP_UserMarket_GetDistinctKJMarketsbyEventID_Result> KJMarkets
        {
            get
            {
                return this.KJMarketsField;
            }
            set
            {
                this.KJMarketsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> LastMatchTime
        {
            get
            {
                return this.LastMatchTimeField;
            }
            set
            {
                this.LastMatchTimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<UserServiceReference.LinevMarkets> LineVMarkets
        {
            get
            {
                return this.LineVMarketsField;
            }
            set
            {
                this.LineVMarketsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<UserServiceReference.LinevMarketsIN> LineVMarketsIN
        {
            get
            {
                return this.LineVMarketsINField;
            }
            set
            {
                this.LineVMarketsINField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MainSportsname
        {
            get
            {
                return this.MainSportsnameField;
            }
            set
            {
                this.MainSportsnameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MarketBookName
        {
            get
            {
                return this.MarketBookNameField;
            }
            set
            {
                this.MarketBookNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MarketId
        {
            get
            {
                return this.MarketIdField;
            }
            set
            {
                this.MarketIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MarketStatusstr
        {
            get
            {
                return this.MarketStatusstrField;
            }
            set
            {
                this.MarketStatusstrField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumberOfActiveRunners
        {
            get
            {
                return this.NumberOfActiveRunnersField;
            }
            set
            {
                this.NumberOfActiveRunnersField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumberOfRunners
        {
            get
            {
                return this.NumberOfRunnersField;
            }
            set
            {
                this.NumberOfRunnersField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumberOfWinners
        {
            get
            {
                return this.NumberOfWinnersField;
            }
            set
            {
                this.NumberOfWinnersField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OpenDate
        {
            get
            {
                return this.OpenDateField;
            }
            set
            {
                this.OpenDateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> OrignalOpenDate
        {
            get
            {
                return this.OrignalOpenDateField;
            }
            set
            {
                this.OrignalOpenDateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal PoundRate
        {
            get
            {
                return this.PoundRateField;
            }
            set
            {
                this.PoundRateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<UserServiceReference.Runner> Runners
        {
            get
            {
                return this.RunnersField;
            }
            set
            {
                this.RunnersField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<UserServiceReference.SP_UserMarket_GetDistinctKJMarketsbyEventID_Result> SFigMarkets
        {
            get
            {
                return this.SFigMarketsField;
            }
            set
            {
                this.SFigMarketsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SheetName
        {
            get
            {
                return this.SheetNameField;
            }
            set
            {
                this.SheetNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public UserServiceReference.MarketStatus Status
        {
            get
            {
                return this.StatusField;
            }
            set
            {
                this.StatusField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TotalAvailable
        {
            get
            {
                return this.TotalAvailableField;
            }
            set
            {
                this.TotalAvailableField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TotalMatched
        {
            get
            {
                return this.TotalMatchedField;
            }
            set
            {
                this.TotalMatchedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TotalOvers
        {
            get
            {
                return this.TotalOversField;
            }
            set
            {
                this.TotalOversField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserBetsAdmin
        {
            get
            {
                return this.UserBetsAdminField;
            }
            set
            {
                this.UserBetsAdminField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserBetsAgent
        {
            get
            {
                return this.UserBetsAgentField;
            }
            set
            {
                this.UserBetsAgentField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserBetsEndUser
        {
            get
            {
                return this.UserBetsEndUserField;
            }
            set
            {
                this.UserBetsEndUserField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Version
        {
            get
            {
                return this.VersionField;
            }
            set
            {
                this.VersionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isOpenExternally
        {
            get
            {
                return this.isOpenExternallyField;
            }
            set
            {
                this.isOpenExternallyField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isWinTheTossMarket
        {
            get
            {
                return this.isWinTheTossMarketField;
            }
            set
            {
                this.isWinTheTossMarketField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<string> lstMultipleSelectionforBets
        {
            get
            {
                return this.lstMultipleSelectionforBetsField;
            }
            set
            {
                this.lstMultipleSelectionforBetsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int marketsopened
        {
            get
            {
                return this.marketsopenedField;
            }
            set
            {
                this.marketsopenedField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DebitCredit", Namespace="http://schemas.datacontract.org/2004/07/ExternalAPI.TO")]
    public partial class DebitCredit : object
    {
        
        private decimal CreditField;
        
        private decimal DebitField;
        
        private string SelectionIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Credit
        {
            get
            {
                return this.CreditField;
            }
            set
            {
                this.CreditField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Debit
        {
            get
            {
                return this.DebitField;
            }
            set
            {
                this.DebitField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SelectionID
        {
            get
            {
                return this.SelectionIDField;
            }
            set
            {
                this.SelectionIDField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SP_UserMarket_GetDistinctKJMarketsbyEventID_Result", Namespace="http://schemas.datacontract.org/2004/07/ExternalAPI.TO")]
    public partial class SP_UserMarket_GetDistinctKJMarketsbyEventID_Result : object
    {
        
        private bool BettingAllowedk__BackingFieldField;
        
        private string CompetitionIDk__BackingFieldField;
        
        private string CompetitionNamek__BackingFieldField;
        
        private string EventIDk__BackingFieldField;
        
        private string EventNamek__BackingFieldField;
        
        private string MarketCatalogueIDk__BackingFieldField;
        
        private string MarketCatalogueNamek__BackingFieldField;
        
        private bool isOpenedbyUserk__BackingFieldField;
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<BettingAllowed>k__BackingField", IsRequired=true)]
        public bool BettingAllowedk__BackingField
        {
            get
            {
                return this.BettingAllowedk__BackingFieldField;
            }
            set
            {
                this.BettingAllowedk__BackingFieldField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<CompetitionID>k__BackingField", IsRequired=true)]
        public string CompetitionIDk__BackingField
        {
            get
            {
                return this.CompetitionIDk__BackingFieldField;
            }
            set
            {
                this.CompetitionIDk__BackingFieldField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<CompetitionName>k__BackingField", IsRequired=true)]
        public string CompetitionNamek__BackingField
        {
            get
            {
                return this.CompetitionNamek__BackingFieldField;
            }
            set
            {
                this.CompetitionNamek__BackingFieldField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<EventID>k__BackingField", IsRequired=true)]
        public string EventIDk__BackingField
        {
            get
            {
                return this.EventIDk__BackingFieldField;
            }
            set
            {
                this.EventIDk__BackingFieldField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<EventName>k__BackingField", IsRequired=true)]
        public string EventNamek__BackingField
        {
            get
            {
                return this.EventNamek__BackingFieldField;
            }
            set
            {
                this.EventNamek__BackingFieldField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<MarketCatalogueID>k__BackingField", IsRequired=true)]
        public string MarketCatalogueIDk__BackingField
        {
            get
            {
                return this.MarketCatalogueIDk__BackingFieldField;
            }
            set
            {
                this.MarketCatalogueIDk__BackingFieldField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<MarketCatalogueName>k__BackingField", IsRequired=true)]
        public string MarketCatalogueNamek__BackingField
        {
            get
            {
                return this.MarketCatalogueNamek__BackingFieldField;
            }
            set
            {
                this.MarketCatalogueNamek__BackingFieldField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<isOpenedbyUser>k__BackingField", IsRequired=true)]
        public bool isOpenedbyUserk__BackingField
        {
            get
            {
                return this.isOpenedbyUserk__BackingFieldField;
            }
            set
            {
                this.isOpenedbyUserk__BackingFieldField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinevMarkets", Namespace="http://schemas.datacontract.org/2004/07/ExternalAPI.TO")]
    public partial class LinevMarkets : object
    {
        
        private string AssociateeventIDk__BackingFieldField;
        
        private bool BettingAllowedk__BackingFieldField;
        
        private string CompetitionIDk__BackingFieldField;
        
        private string CompetitionNamek__BackingFieldField;
        
        private string EventIDk__BackingFieldField;
        
        private string EventNamek__BackingFieldField;
        
        private string MarketCatalogueIDk__BackingFieldField;
        
        private string MarketCatalogueNamek__BackingFieldField;
        
        private string SelectionIDk__BackingFieldField;
        
        private string SelectionNamek__BackingFieldField;
        
        private bool isOpenedbyUserk__BackingFieldField;
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<AssociateeventID>k__BackingField", IsRequired=true)]
        public string AssociateeventIDk__BackingField
        {
            get
            {
                return this.AssociateeventIDk__BackingFieldField;
            }
            set
            {
                this.AssociateeventIDk__BackingFieldField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<BettingAllowed>k__BackingField", IsRequired=true)]
        public bool BettingAllowedk__BackingField
        {
            get
            {
                return this.BettingAllowedk__BackingFieldField;
            }
            set
            {
                this.BettingAllowedk__BackingFieldField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<CompetitionID>k__BackingField", IsRequired=true)]
        public string CompetitionIDk__BackingField
        {
            get
            {
                return this.CompetitionIDk__BackingFieldField;
            }
            set
            {
                this.CompetitionIDk__BackingFieldField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<CompetitionName>k__BackingField", IsRequired=true)]
        public string CompetitionNamek__BackingField
        {
            get
            {
                return this.CompetitionNamek__BackingFieldField;
            }
            set
            {
                this.CompetitionNamek__BackingFieldField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<EventID>k__BackingField", IsRequired=true)]
        public string EventIDk__BackingField
        {
            get
            {
                return this.EventIDk__BackingFieldField;
            }
            set
            {
                this.EventIDk__BackingFieldField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<EventName>k__BackingField", IsRequired=true)]
        public string EventNamek__BackingField
        {
            get
            {
                return this.EventNamek__BackingFieldField;
            }
            set
            {
                this.EventNamek__BackingFieldField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<MarketCatalogueID>k__BackingField", IsRequired=true)]
        public string MarketCatalogueIDk__BackingField
        {
            get
            {
                return this.MarketCatalogueIDk__BackingFieldField;
            }
            set
            {
                this.MarketCatalogueIDk__BackingFieldField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<MarketCatalogueName>k__BackingField", IsRequired=true)]
        public string MarketCatalogueNamek__BackingField
        {
            get
            {
                return this.MarketCatalogueNamek__BackingFieldField;
            }
            set
            {
                this.MarketCatalogueNamek__BackingFieldField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<SelectionID>k__BackingField", IsRequired=true)]
        public string SelectionIDk__BackingField
        {
            get
            {
                return this.SelectionIDk__BackingFieldField;
            }
            set
            {
                this.SelectionIDk__BackingFieldField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<SelectionName>k__BackingField", IsRequired=true)]
        public string SelectionNamek__BackingField
        {
            get
            {
                return this.SelectionNamek__BackingFieldField;
            }
            set
            {
                this.SelectionNamek__BackingFieldField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<isOpenedbyUser>k__BackingField", IsRequired=true)]
        public bool isOpenedbyUserk__BackingField
        {
            get
            {
                return this.isOpenedbyUserk__BackingFieldField;
            }
            set
            {
                this.isOpenedbyUserk__BackingFieldField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LinevMarketsIN", Namespace="http://schemas.datacontract.org/2004/07/ExternalAPI.TO")]
    public partial class LinevMarketsIN : object
    {
        
        private string MarketBookIDk__BackingFieldField;
        
        private string SelectionIDk__BackingFieldField;
        
        private string SelectionNamek__BackingFieldField;
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<MarketBookID>k__BackingField", IsRequired=true)]
        public string MarketBookIDk__BackingField
        {
            get
            {
                return this.MarketBookIDk__BackingFieldField;
            }
            set
            {
                this.MarketBookIDk__BackingFieldField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<SelectionID>k__BackingField", IsRequired=true)]
        public string SelectionIDk__BackingField
        {
            get
            {
                return this.SelectionIDk__BackingFieldField;
            }
            set
            {
                this.SelectionIDk__BackingFieldField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<SelectionName>k__BackingField", IsRequired=true)]
        public string SelectionNamek__BackingField
        {
            get
            {
                return this.SelectionNamek__BackingFieldField;
            }
            set
            {
                this.SelectionNamek__BackingFieldField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Runner", Namespace="http://schemas.datacontract.org/2004/07/ExternalAPI.TO")]
    public partial class Runner : object
    {
        
        private System.Nullable<double> AdjustmentFactorField;
        
        private string AverageField;
        
        private bool BettingAllowedField;
        
        private string ClothnumberField;
        
        private UserServiceReference.ExchangePrices ExchangePricesField;
        
        private System.Nullable<double> HandicapField;
        
        private string JockeyNameField;
        
        private System.Nullable<double> LastPriceTradedField;
        
        private long LossField;
        
        private string MarketBookIDField;
        
        private string MarketStatusStrField;
        
        private System.Collections.Generic.List<UserServiceReference.Match> MatchesField;
        
        private System.Collections.Generic.List<UserServiceReference.Order> OrdersField;
        
        private long ProfitandLossField;
        
        private System.Nullable<System.DateTime> RemovalDateField;
        
        private string RunnerNameField;
        
        private string SelectionIdField;
        
        private string StallDrawField;
        
        private UserServiceReference.StartingPrices StartingPricesField;
        
        private UserServiceReference.RunnerStatus StatusField;
        
        private string StatusStrField;
        
        private double TotalMatchedField;
        
        private string TotalMatchedStrField;
        
        private string WearingDescField;
        
        private string WearingURLField;
        
        private bool isShowField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> AdjustmentFactor
        {
            get
            {
                return this.AdjustmentFactorField;
            }
            set
            {
                this.AdjustmentFactorField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Average
        {
            get
            {
                return this.AverageField;
            }
            set
            {
                this.AverageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BettingAllowed
        {
            get
            {
                return this.BettingAllowedField;
            }
            set
            {
                this.BettingAllowedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Clothnumber
        {
            get
            {
                return this.ClothnumberField;
            }
            set
            {
                this.ClothnumberField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public UserServiceReference.ExchangePrices ExchangePrices
        {
            get
            {
                return this.ExchangePricesField;
            }
            set
            {
                this.ExchangePricesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> Handicap
        {
            get
            {
                return this.HandicapField;
            }
            set
            {
                this.HandicapField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JockeyName
        {
            get
            {
                return this.JockeyNameField;
            }
            set
            {
                this.JockeyNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> LastPriceTraded
        {
            get
            {
                return this.LastPriceTradedField;
            }
            set
            {
                this.LastPriceTradedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Loss
        {
            get
            {
                return this.LossField;
            }
            set
            {
                this.LossField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MarketBookID
        {
            get
            {
                return this.MarketBookIDField;
            }
            set
            {
                this.MarketBookIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MarketStatusStr
        {
            get
            {
                return this.MarketStatusStrField;
            }
            set
            {
                this.MarketStatusStrField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<UserServiceReference.Match> Matches
        {
            get
            {
                return this.MatchesField;
            }
            set
            {
                this.MatchesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<UserServiceReference.Order> Orders
        {
            get
            {
                return this.OrdersField;
            }
            set
            {
                this.OrdersField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ProfitandLoss
        {
            get
            {
                return this.ProfitandLossField;
            }
            set
            {
                this.ProfitandLossField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> RemovalDate
        {
            get
            {
                return this.RemovalDateField;
            }
            set
            {
                this.RemovalDateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RunnerName
        {
            get
            {
                return this.RunnerNameField;
            }
            set
            {
                this.RunnerNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SelectionId
        {
            get
            {
                return this.SelectionIdField;
            }
            set
            {
                this.SelectionIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StallDraw
        {
            get
            {
                return this.StallDrawField;
            }
            set
            {
                this.StallDrawField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public UserServiceReference.StartingPrices StartingPrices
        {
            get
            {
                return this.StartingPricesField;
            }
            set
            {
                this.StartingPricesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public UserServiceReference.RunnerStatus Status
        {
            get
            {
                return this.StatusField;
            }
            set
            {
                this.StatusField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StatusStr
        {
            get
            {
                return this.StatusStrField;
            }
            set
            {
                this.StatusStrField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TotalMatched
        {
            get
            {
                return this.TotalMatchedField;
            }
            set
            {
                this.TotalMatchedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TotalMatchedStr
        {
            get
            {
                return this.TotalMatchedStrField;
            }
            set
            {
                this.TotalMatchedStrField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WearingDesc
        {
            get
            {
                return this.WearingDescField;
            }
            set
            {
                this.WearingDescField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WearingURL
        {
            get
            {
                return this.WearingURLField;
            }
            set
            {
                this.WearingURLField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isShow
        {
            get
            {
                return this.isShowField;
            }
            set
            {
                this.isShowField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MarketStatus", Namespace="http://schemas.datacontract.org/2004/07/ExternalAPI.TO")]
    public enum MarketStatus : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        INACTIVE = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OPEN = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SUSPENDED = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CLOSED = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExchangePrices", Namespace="http://schemas.datacontract.org/2004/07/ExternalAPI.TO")]
    public partial class ExchangePrices : object
    {
        
        private System.Collections.Generic.List<UserServiceReference.PriceSize> AvailableToBackField;
        
        private System.Collections.Generic.List<UserServiceReference.PriceSize> AvailableToLayField;
        
        private System.Collections.Generic.List<UserServiceReference.PriceSize> TradedVolumeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<UserServiceReference.PriceSize> AvailableToBack
        {
            get
            {
                return this.AvailableToBackField;
            }
            set
            {
                this.AvailableToBackField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<UserServiceReference.PriceSize> AvailableToLay
        {
            get
            {
                return this.AvailableToLayField;
            }
            set
            {
                this.AvailableToLayField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<UserServiceReference.PriceSize> TradedVolume
        {
            get
            {
                return this.TradedVolumeField;
            }
            set
            {
                this.TradedVolumeField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StartingPrices", Namespace="http://schemas.datacontract.org/2004/07/ExternalAPI.TO")]
    public partial class StartingPrices : object
    {
        
        private double ActualSPField;
        
        private System.Collections.Generic.List<UserServiceReference.PriceSize> BackStakeTakenField;
        
        private double FarPriceField;
        
        private System.Collections.Generic.List<UserServiceReference.PriceSize> LayLiabilityTakenField;
        
        private double NearPriceField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ActualSP
        {
            get
            {
                return this.ActualSPField;
            }
            set
            {
                this.ActualSPField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<UserServiceReference.PriceSize> BackStakeTaken
        {
            get
            {
                return this.BackStakeTakenField;
            }
            set
            {
                this.BackStakeTakenField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double FarPrice
        {
            get
            {
                return this.FarPriceField;
            }
            set
            {
                this.FarPriceField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<UserServiceReference.PriceSize> LayLiabilityTaken
        {
            get
            {
                return this.LayLiabilityTakenField;
            }
            set
            {
                this.LayLiabilityTakenField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double NearPrice
        {
            get
            {
                return this.NearPriceField;
            }
            set
            {
                this.NearPriceField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Match", Namespace="http://schemas.datacontract.org/2004/07/ExternalAPI.TO")]
    public partial class Match : object
    {
        
        private string BetIdField;
        
        private System.DateTime MatchDateField;
        
        private double PriceField;
        
        private UserServiceReference.Side SideField;
        
        private double SizeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BetId
        {
            get
            {
                return this.BetIdField;
            }
            set
            {
                this.BetIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime MatchDate
        {
            get
            {
                return this.MatchDateField;
            }
            set
            {
                this.MatchDateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Price
        {
            get
            {
                return this.PriceField;
            }
            set
            {
                this.PriceField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public UserServiceReference.Side Side
        {
            get
            {
                return this.SideField;
            }
            set
            {
                this.SideField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Size
        {
            get
            {
                return this.SizeField;
            }
            set
            {
                this.SizeField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Order", Namespace="http://schemas.datacontract.org/2004/07/ExternalAPI.TO")]
    public partial class Order : object
    {
        
        private System.Nullable<double> AvgPriceMatchedField;
        
        private string BetIdField;
        
        private System.Nullable<double> BspLiabilityField;
        
        private UserServiceReference.OrderType OrderTypeField;
        
        private UserServiceReference.PersistenceType PersistenceTypeField;
        
        private System.Nullable<System.DateTime> PlacedDateField;
        
        private double PriceField;
        
        private UserServiceReference.Side SideField;
        
        private double SizeField;
        
        private System.Nullable<double> SizeCancelledField;
        
        private System.Nullable<double> SizeLapsedField;
        
        private System.Nullable<double> SizeMatchedField;
        
        private System.Nullable<double> SizeRemainingField;
        
        private System.Nullable<double> SizeVoidedField;
        
        private UserServiceReference.OrderStatus StatusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> AvgPriceMatched
        {
            get
            {
                return this.AvgPriceMatchedField;
            }
            set
            {
                this.AvgPriceMatchedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BetId
        {
            get
            {
                return this.BetIdField;
            }
            set
            {
                this.BetIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> BspLiability
        {
            get
            {
                return this.BspLiabilityField;
            }
            set
            {
                this.BspLiabilityField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public UserServiceReference.OrderType OrderType
        {
            get
            {
                return this.OrderTypeField;
            }
            set
            {
                this.OrderTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public UserServiceReference.PersistenceType PersistenceType
        {
            get
            {
                return this.PersistenceTypeField;
            }
            set
            {
                this.PersistenceTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> PlacedDate
        {
            get
            {
                return this.PlacedDateField;
            }
            set
            {
                this.PlacedDateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Price
        {
            get
            {
                return this.PriceField;
            }
            set
            {
                this.PriceField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public UserServiceReference.Side Side
        {
            get
            {
                return this.SideField;
            }
            set
            {
                this.SideField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Size
        {
            get
            {
                return this.SizeField;
            }
            set
            {
                this.SizeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> SizeCancelled
        {
            get
            {
                return this.SizeCancelledField;
            }
            set
            {
                this.SizeCancelledField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> SizeLapsed
        {
            get
            {
                return this.SizeLapsedField;
            }
            set
            {
                this.SizeLapsedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> SizeMatched
        {
            get
            {
                return this.SizeMatchedField;
            }
            set
            {
                this.SizeMatchedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> SizeRemaining
        {
            get
            {
                return this.SizeRemainingField;
            }
            set
            {
                this.SizeRemainingField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> SizeVoided
        {
            get
            {
                return this.SizeVoidedField;
            }
            set
            {
                this.SizeVoidedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public UserServiceReference.OrderStatus Status
        {
            get
            {
                return this.StatusField;
            }
            set
            {
                this.StatusField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RunnerStatus", Namespace="http://schemas.datacontract.org/2004/07/ExternalAPI.TO")]
    public enum RunnerStatus : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ACTIVE = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WINNER = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LOSER = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        REMOVED_VACANT = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        REMOVED = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PriceSize", Namespace="http://schemas.datacontract.org/2004/07/ExternalAPI.TO")]
    public partial class PriceSize : object
    {
        
        private double OrignalSizeField;
        
        private double PriceField;
        
        private double SizeField;
        
        private string SizeStrField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double OrignalSize
        {
            get
            {
                return this.OrignalSizeField;
            }
            set
            {
                this.OrignalSizeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Price
        {
            get
            {
                return this.PriceField;
            }
            set
            {
                this.PriceField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Size
        {
            get
            {
                return this.SizeField;
            }
            set
            {
                this.SizeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SizeStr
        {
            get
            {
                return this.SizeStrField;
            }
            set
            {
                this.SizeStrField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Side", Namespace="http://schemas.datacontract.org/2004/07/ExternalAPI.TO")]
    public enum Side : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BACK = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LAY = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OrderType", Namespace="http://schemas.datacontract.org/2004/07/ExternalAPI.TO")]
    public enum OrderType : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LIMIT = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LIMIT_ON_CLOSE = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MARKET_ON_CLOSE = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PersistenceType", Namespace="http://schemas.datacontract.org/2004/07/ExternalAPI.TO")]
    public enum PersistenceType : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LAPSE = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PERSIST = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MARKET_ON_CLOSE = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OrderStatus", Namespace="http://schemas.datacontract.org/2004/07/ExternalAPI.TO")]
    public enum OrderStatus : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EXECUTION_COMPLETE = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EXECUTABLE = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SP_Users_GetTransferAdminAmount_Result", Namespace="http://schemas.datacontract.org/2004/07/bfnexchange.Services.DBModel")]
    public partial class SP_Users_GetTransferAdminAmount_Result : object
    {
        
        private System.Nullable<bool> TransferAdminAmountField;
        
        private System.Nullable<bool> TransferAdminAmountGreyHoundField;
        
        private System.Nullable<bool> TransferAdminAmountHorseField;
        
        private System.Nullable<bool> TransferAdminAmountSoccerField;
        
        private System.Nullable<bool> TransferAdminAmountTennisField;
        
        private System.Nullable<int> TransferAgentIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> TransferAdminAmount
        {
            get
            {
                return this.TransferAdminAmountField;
            }
            set
            {
                this.TransferAdminAmountField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> TransferAdminAmountGreyHound
        {
            get
            {
                return this.TransferAdminAmountGreyHoundField;
            }
            set
            {
                this.TransferAdminAmountGreyHoundField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> TransferAdminAmountHorse
        {
            get
            {
                return this.TransferAdminAmountHorseField;
            }
            set
            {
                this.TransferAdminAmountHorseField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> TransferAdminAmountSoccer
        {
            get
            {
                return this.TransferAdminAmountSoccerField;
            }
            set
            {
                this.TransferAdminAmountSoccerField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> TransferAdminAmountTennis
        {
            get
            {
                return this.TransferAdminAmountTennisField;
            }
            set
            {
                this.TransferAdminAmountTennisField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> TransferAgentID
        {
            get
            {
                return this.TransferAgentIDField;
            }
            set
            {
                this.TransferAgentIDField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SP_Referrers_GetReferrerRateandReferrerIDbyUserID_Result", Namespace="http://schemas.datacontract.org/2004/07/bfnexchange.Services.DBModel")]
    public partial class SP_Referrers_GetReferrerRateandReferrerIDbyUserID_Result : object
    {
        
        private System.Nullable<int> ReferrerIDField;
        
        private System.Nullable<int> ReferrerRateField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ReferrerID
        {
            get
            {
                return this.ReferrerIDField;
            }
            set
            {
                this.ReferrerIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ReferrerRate
        {
            get
            {
                return this.ReferrerRateField;
            }
            set
            {
                this.ReferrerRateField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="APIResponse", Namespace="http://schemas.datacontract.org/2004/07/bfnexchange.Services")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<int>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<string>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<long>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<UserServiceReference.SP_UserMarket_GetMarketForAllowedBetting_Result>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(UserServiceReference.SP_UserMarket_GetMarketForAllowedBetting_Result))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(UserServiceReference.SP_UserMarket_GetEventDetailsbyMarketID_Result))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(UserServiceReference.SP_Users_GetTransferAdminAmount_Result))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<UserServiceReference.SP_Referrers_GetReferrerRateandReferrerIDbyUserID_Result>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(UserServiceReference.SP_Referrers_GetReferrerRateandReferrerIDbyUserID_Result))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(UserServiceReference.SP_UserMarket_GetToWinTheTossbyEventID_Result))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(UserServiceReference.SP_UserMarket_GetToTiedMarketbyEventID_Result))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<UserServiceReference.SP_UserMarket_GetSoccergoalbyEventID_Result>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(UserServiceReference.SP_UserMarket_GetSoccergoalbyEventID_Result))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(UserServiceReference.SP_Users_GetMaxOddBackandLay_Result))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<UserServiceReference.SP_MarketCatalogueSelections_Get_Result>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(UserServiceReference.SP_MarketCatalogueSelections_Get_Result))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(UserServiceReference.SP_Users_GetCommissionAccountIDandBookAccountID_Result))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(UserServiceReference.SP_Users_GetReferrerRateandReferrerIDbyUserID_Result))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<UserServiceReference.MarketBook>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(UserServiceReference.MarketBook))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<UserServiceReference.DebitCredit>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(UserServiceReference.DebitCredit))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<UserServiceReference.SP_UserMarket_GetDistinctKJMarketsbyEventID_Result>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(UserServiceReference.SP_UserMarket_GetDistinctKJMarketsbyEventID_Result))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<UserServiceReference.LinevMarkets>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(UserServiceReference.LinevMarkets))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<UserServiceReference.LinevMarketsIN>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(UserServiceReference.LinevMarketsIN))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<UserServiceReference.Runner>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(UserServiceReference.Runner))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(UserServiceReference.ExchangePrices))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<UserServiceReference.PriceSize>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(UserServiceReference.PriceSize))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<UserServiceReference.Match>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(UserServiceReference.Match))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(UserServiceReference.Side))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<UserServiceReference.Order>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(UserServiceReference.Order))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(UserServiceReference.OrderType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(UserServiceReference.PersistenceType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(UserServiceReference.OrderStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(UserServiceReference.StartingPrices))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(UserServiceReference.RunnerStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(UserServiceReference.MarketStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<UserServiceReference.MarketBookForindianFancy>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(UserServiceReference.MarketBookForindianFancy))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.List<UserServiceReference.RunnerForIndianFancy>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(UserServiceReference.RunnerForIndianFancy))]
    public partial class APIResponse : object
    {
        
        private object EtagField;
        
        private string cache_keyField;
        
        private object dataField;
        
        private string matchkeyField;
        
        private bool statusField;
        
        private int status_codeField;
        
        private string versionField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object Etag
        {
            get
            {
                return this.EtagField;
            }
            set
            {
                this.EtagField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string cache_key
        {
            get
            {
                return this.cache_keyField;
            }
            set
            {
                this.cache_keyField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object data
        {
            get
            {
                return this.dataField;
            }
            set
            {
                this.dataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string matchkey
        {
            get
            {
                return this.matchkeyField;
            }
            set
            {
                this.matchkeyField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool status
        {
            get
            {
                return this.statusField;
            }
            set
            {
                this.statusField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int status_code
        {
            get
            {
                return this.status_codeField;
            }
            set
            {
                this.status_codeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string version
        {
            get
            {
                return this.versionField;
            }
            set
            {
                this.versionField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SP_UserMarket_GetToWinTheTossbyEventID_Result", Namespace="http://schemas.datacontract.org/2004/07/bfnexchange.Services.DBModel")]
    public partial class SP_UserMarket_GetToWinTheTossbyEventID_Result : object
    {
        
        private string MarketCatalogueIDField;
        
        private string MarketCatalogueNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MarketCatalogueID
        {
            get
            {
                return this.MarketCatalogueIDField;
            }
            set
            {
                this.MarketCatalogueIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MarketCatalogueName
        {
            get
            {
                return this.MarketCatalogueNameField;
            }
            set
            {
                this.MarketCatalogueNameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SP_UserMarket_GetToTiedMarketbyEventID_Result", Namespace="http://schemas.datacontract.org/2004/07/bfnexchange.Services.DBModel")]
    public partial class SP_UserMarket_GetToTiedMarketbyEventID_Result : object
    {
        
        private string MarketCatalogueIDField;
        
        private string MarketCatalogueNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MarketCatalogueID
        {
            get
            {
                return this.MarketCatalogueIDField;
            }
            set
            {
                this.MarketCatalogueIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MarketCatalogueName
        {
            get
            {
                return this.MarketCatalogueNameField;
            }
            set
            {
                this.MarketCatalogueNameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SP_UserMarket_GetSoccergoalbyEventID_Result", Namespace="http://schemas.datacontract.org/2004/07/bfnexchange.Services.DBModel")]
    public partial class SP_UserMarket_GetSoccergoalbyEventID_Result : object
    {
        
        private string MarketCatalogueIDField;
        
        private string MarketCatalogueNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MarketCatalogueID
        {
            get
            {
                return this.MarketCatalogueIDField;
            }
            set
            {
                this.MarketCatalogueIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MarketCatalogueName
        {
            get
            {
                return this.MarketCatalogueNameField;
            }
            set
            {
                this.MarketCatalogueNameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SP_Users_GetMaxOddBackandLay_Result", Namespace="http://schemas.datacontract.org/2004/07/bfnexchange.Services.DBModel")]
    public partial class SP_Users_GetMaxOddBackandLay_Result : object
    {
        
        private System.Nullable<bool> CheckforMaxOddBackField;
        
        private System.Nullable<bool> CheckforMaxOddLayField;
        
        private System.Nullable<decimal> MaxOddBackField;
        
        private System.Nullable<decimal> MaxOddLayField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> CheckforMaxOddBack
        {
            get
            {
                return this.CheckforMaxOddBackField;
            }
            set
            {
                this.CheckforMaxOddBackField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> CheckforMaxOddLay
        {
            get
            {
                return this.CheckforMaxOddLayField;
            }
            set
            {
                this.CheckforMaxOddLayField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> MaxOddBack
        {
            get
            {
                return this.MaxOddBackField;
            }
            set
            {
                this.MaxOddBackField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> MaxOddLay
        {
            get
            {
                return this.MaxOddLayField;
            }
            set
            {
                this.MaxOddLayField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SP_MarketCatalogueSelections_Get_Result", Namespace="http://schemas.datacontract.org/2004/07/bfnexchange.Services.DBModel")]
    public partial class SP_MarketCatalogueSelections_Get_Result : object
    {
        
        private string ClothNumberField;
        
        private string JockeyNameField;
        
        private string SelectionIDField;
        
        private string SelectionNameField;
        
        private string StallDrawField;
        
        private string WearingField;
        
        private string WearingDescField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClothNumber
        {
            get
            {
                return this.ClothNumberField;
            }
            set
            {
                this.ClothNumberField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JockeyName
        {
            get
            {
                return this.JockeyNameField;
            }
            set
            {
                this.JockeyNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SelectionID
        {
            get
            {
                return this.SelectionIDField;
            }
            set
            {
                this.SelectionIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SelectionName
        {
            get
            {
                return this.SelectionNameField;
            }
            set
            {
                this.SelectionNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StallDraw
        {
            get
            {
                return this.StallDrawField;
            }
            set
            {
                this.StallDrawField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Wearing
        {
            get
            {
                return this.WearingField;
            }
            set
            {
                this.WearingField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WearingDesc
        {
            get
            {
                return this.WearingDescField;
            }
            set
            {
                this.WearingDescField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SP_Users_GetCommissionAccountIDandBookAccountID_Result", Namespace="http://schemas.datacontract.org/2004/07/bfnexchange.Services.DBModel")]
    public partial class SP_Users_GetCommissionAccountIDandBookAccountID_Result : object
    {
        
        private System.Nullable<int> BookAccountIDField;
        
        private System.Nullable<int> CommisionAccountIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> BookAccountID
        {
            get
            {
                return this.BookAccountIDField;
            }
            set
            {
                this.BookAccountIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CommisionAccountID
        {
            get
            {
                return this.CommisionAccountIDField;
            }
            set
            {
                this.CommisionAccountIDField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SP_Users_GetReferrerRateandReferrerIDbyUserID_Result", Namespace="http://schemas.datacontract.org/2004/07/bfnexchange.Services.DBModel")]
    public partial class SP_Users_GetReferrerRateandReferrerIDbyUserID_Result : object
    {
        
        private int ReferrerIDField;
        
        private int ReferrerRateField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReferrerID
        {
            get
            {
                return this.ReferrerIDField;
            }
            set
            {
                this.ReferrerIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReferrerRate
        {
            get
            {
                return this.ReferrerRateField;
            }
            set
            {
                this.ReferrerRateField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MarketBookForindianFancy", Namespace="http://schemas.datacontract.org/2004/07/ExternalAPI.TO")]
    public partial class MarketBookForindianFancy : object
    {
        
        private int BetDelayField;
        
        private bool BettingAllowedField;
        
        private bool BettingAllowedOverAllField;
        
        private string CricketAPIMatchKeyField;
        
        private string CricketMatchKeyField;
        
        private System.Collections.Generic.List<UserServiceReference.DebitCredit> DebitCreditField;
        
        private string EventIDField;
        
        private string FavoriteBackField;
        
        private string FavoriteBackSizeField;
        
        private string FavoriteIDField;
        
        private string FavoriteLayField;
        
        private string FavoriteLaySizeField;
        
        private string FavoriteSelectionNameField;
        
        private string GetMatchUpdatesFromField;
        
        private bool IsBspReconciledField;
        
        private bool IsCompleteField;
        
        private bool IsCrossMatchingField;
        
        private bool IsInplayField;
        
        private bool IsMarketDataDelayedField;
        
        private bool IsRunnersVoidableField;
        
        private System.Nullable<System.DateTime> LastMatchTimeField;
        
        private System.Collections.Generic.List<UserServiceReference.LinevMarkets> LineVMarketsField;
        
        private string MainSportsnameField;
        
        private string MarketBookNameField;
        
        private string MarketIdField;
        
        private string MarketStatusstrField;
        
        private int NumberOfActiveRunnersField;
        
        private int NumberOfRunnersField;
        
        private int NumberOfWinnersField;
        
        private string OpenDateField;
        
        private System.Nullable<System.DateTime> OrignalOpenDateField;
        
        private decimal PoundRateField;
        
        private System.Collections.Generic.List<UserServiceReference.RunnerForIndianFancy> RunnersForindianFancyField;
        
        private string SheetNameField;
        
        private UserServiceReference.MarketStatus StatusField;
        
        private double TotalAvailableField;
        
        private double TotalMatchedField;
        
        private string TotalOversField;
        
        private string UserBetsAdminField;
        
        private string UserBetsAgentField;
        
        private string UserBetsEndUserField;
        
        private long VersionField;
        
        private bool isOpenExternallyField;
        
        private bool isWinTheTossMarketField;
        
        private System.Collections.Generic.List<string> lstMultipleSelectionforBetsField;
        
        private int marketsopenedField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BetDelay
        {
            get
            {
                return this.BetDelayField;
            }
            set
            {
                this.BetDelayField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BettingAllowed
        {
            get
            {
                return this.BettingAllowedField;
            }
            set
            {
                this.BettingAllowedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BettingAllowedOverAll
        {
            get
            {
                return this.BettingAllowedOverAllField;
            }
            set
            {
                this.BettingAllowedOverAllField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CricketAPIMatchKey
        {
            get
            {
                return this.CricketAPIMatchKeyField;
            }
            set
            {
                this.CricketAPIMatchKeyField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CricketMatchKey
        {
            get
            {
                return this.CricketMatchKeyField;
            }
            set
            {
                this.CricketMatchKeyField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<UserServiceReference.DebitCredit> DebitCredit
        {
            get
            {
                return this.DebitCreditField;
            }
            set
            {
                this.DebitCreditField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EventID
        {
            get
            {
                return this.EventIDField;
            }
            set
            {
                this.EventIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FavoriteBack
        {
            get
            {
                return this.FavoriteBackField;
            }
            set
            {
                this.FavoriteBackField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FavoriteBackSize
        {
            get
            {
                return this.FavoriteBackSizeField;
            }
            set
            {
                this.FavoriteBackSizeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FavoriteID
        {
            get
            {
                return this.FavoriteIDField;
            }
            set
            {
                this.FavoriteIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FavoriteLay
        {
            get
            {
                return this.FavoriteLayField;
            }
            set
            {
                this.FavoriteLayField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FavoriteLaySize
        {
            get
            {
                return this.FavoriteLaySizeField;
            }
            set
            {
                this.FavoriteLaySizeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FavoriteSelectionName
        {
            get
            {
                return this.FavoriteSelectionNameField;
            }
            set
            {
                this.FavoriteSelectionNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GetMatchUpdatesFrom
        {
            get
            {
                return this.GetMatchUpdatesFromField;
            }
            set
            {
                this.GetMatchUpdatesFromField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsBspReconciled
        {
            get
            {
                return this.IsBspReconciledField;
            }
            set
            {
                this.IsBspReconciledField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsComplete
        {
            get
            {
                return this.IsCompleteField;
            }
            set
            {
                this.IsCompleteField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsCrossMatching
        {
            get
            {
                return this.IsCrossMatchingField;
            }
            set
            {
                this.IsCrossMatchingField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsInplay
        {
            get
            {
                return this.IsInplayField;
            }
            set
            {
                this.IsInplayField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsMarketDataDelayed
        {
            get
            {
                return this.IsMarketDataDelayedField;
            }
            set
            {
                this.IsMarketDataDelayedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRunnersVoidable
        {
            get
            {
                return this.IsRunnersVoidableField;
            }
            set
            {
                this.IsRunnersVoidableField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> LastMatchTime
        {
            get
            {
                return this.LastMatchTimeField;
            }
            set
            {
                this.LastMatchTimeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<UserServiceReference.LinevMarkets> LineVMarkets
        {
            get
            {
                return this.LineVMarketsField;
            }
            set
            {
                this.LineVMarketsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MainSportsname
        {
            get
            {
                return this.MainSportsnameField;
            }
            set
            {
                this.MainSportsnameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MarketBookName
        {
            get
            {
                return this.MarketBookNameField;
            }
            set
            {
                this.MarketBookNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MarketId
        {
            get
            {
                return this.MarketIdField;
            }
            set
            {
                this.MarketIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MarketStatusstr
        {
            get
            {
                return this.MarketStatusstrField;
            }
            set
            {
                this.MarketStatusstrField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumberOfActiveRunners
        {
            get
            {
                return this.NumberOfActiveRunnersField;
            }
            set
            {
                this.NumberOfActiveRunnersField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumberOfRunners
        {
            get
            {
                return this.NumberOfRunnersField;
            }
            set
            {
                this.NumberOfRunnersField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumberOfWinners
        {
            get
            {
                return this.NumberOfWinnersField;
            }
            set
            {
                this.NumberOfWinnersField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OpenDate
        {
            get
            {
                return this.OpenDateField;
            }
            set
            {
                this.OpenDateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> OrignalOpenDate
        {
            get
            {
                return this.OrignalOpenDateField;
            }
            set
            {
                this.OrignalOpenDateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal PoundRate
        {
            get
            {
                return this.PoundRateField;
            }
            set
            {
                this.PoundRateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<UserServiceReference.RunnerForIndianFancy> RunnersForindianFancy
        {
            get
            {
                return this.RunnersForindianFancyField;
            }
            set
            {
                this.RunnersForindianFancyField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SheetName
        {
            get
            {
                return this.SheetNameField;
            }
            set
            {
                this.SheetNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public UserServiceReference.MarketStatus Status
        {
            get
            {
                return this.StatusField;
            }
            set
            {
                this.StatusField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TotalAvailable
        {
            get
            {
                return this.TotalAvailableField;
            }
            set
            {
                this.TotalAvailableField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TotalMatched
        {
            get
            {
                return this.TotalMatchedField;
            }
            set
            {
                this.TotalMatchedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TotalOvers
        {
            get
            {
                return this.TotalOversField;
            }
            set
            {
                this.TotalOversField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserBetsAdmin
        {
            get
            {
                return this.UserBetsAdminField;
            }
            set
            {
                this.UserBetsAdminField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserBetsAgent
        {
            get
            {
                return this.UserBetsAgentField;
            }
            set
            {
                this.UserBetsAgentField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserBetsEndUser
        {
            get
            {
                return this.UserBetsEndUserField;
            }
            set
            {
                this.UserBetsEndUserField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Version
        {
            get
            {
                return this.VersionField;
            }
            set
            {
                this.VersionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isOpenExternally
        {
            get
            {
                return this.isOpenExternallyField;
            }
            set
            {
                this.isOpenExternallyField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isWinTheTossMarket
        {
            get
            {
                return this.isWinTheTossMarketField;
            }
            set
            {
                this.isWinTheTossMarketField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<string> lstMultipleSelectionforBets
        {
            get
            {
                return this.lstMultipleSelectionforBetsField;
            }
            set
            {
                this.lstMultipleSelectionforBetsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int marketsopened
        {
            get
            {
                return this.marketsopenedField;
            }
            set
            {
                this.marketsopenedField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RunnerForIndianFancy", Namespace="http://schemas.datacontract.org/2004/07/ExternalAPI.TO")]
    public partial class RunnerForIndianFancy : object
    {
        
        private System.Nullable<double> AdjustmentFactorField;
        
        private string AverageField;
        
        private string BackSizeField;
        
        private string BackpriceField;
        
        private bool BettingAllowedField;
        
        private string ClothnumberField;
        
        private UserServiceReference.ExchangePrices ExchangePricesField;
        
        private System.Nullable<double> HandicapField;
        
        private string JockeyNameField;
        
        private System.Nullable<double> LastPriceTradedField;
        
        private string LaySizeField;
        
        private string LaypriceField;
        
        private double LossField;
        
        private string MarketBookIDField;
        
        private string MarketStatusStrField;
        
        private System.Collections.Generic.List<UserServiceReference.Match> MatchesField;
        
        private System.Collections.Generic.List<UserServiceReference.Order> OrdersField;
        
        private double ProfitandLossField;
        
        private System.Nullable<System.DateTime> RemovalDateField;
        
        private string RunnerNameField;
        
        private string SelectionIdField;
        
        private string StallDrawField;
        
        private UserServiceReference.StartingPrices StartingPricesField;
        
        private UserServiceReference.RunnerStatus StatusField;
        
        private string StatusStrField;
        
        private double TotalMatchedField;
        
        private string TotalMatchedStrField;
        
        private string WearingDescField;
        
        private string WearingURLField;
        
        private bool isShowField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> AdjustmentFactor
        {
            get
            {
                return this.AdjustmentFactorField;
            }
            set
            {
                this.AdjustmentFactorField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Average
        {
            get
            {
                return this.AverageField;
            }
            set
            {
                this.AverageField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BackSize
        {
            get
            {
                return this.BackSizeField;
            }
            set
            {
                this.BackSizeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Backprice
        {
            get
            {
                return this.BackpriceField;
            }
            set
            {
                this.BackpriceField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BettingAllowed
        {
            get
            {
                return this.BettingAllowedField;
            }
            set
            {
                this.BettingAllowedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Clothnumber
        {
            get
            {
                return this.ClothnumberField;
            }
            set
            {
                this.ClothnumberField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public UserServiceReference.ExchangePrices ExchangePrices
        {
            get
            {
                return this.ExchangePricesField;
            }
            set
            {
                this.ExchangePricesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> Handicap
        {
            get
            {
                return this.HandicapField;
            }
            set
            {
                this.HandicapField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JockeyName
        {
            get
            {
                return this.JockeyNameField;
            }
            set
            {
                this.JockeyNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> LastPriceTraded
        {
            get
            {
                return this.LastPriceTradedField;
            }
            set
            {
                this.LastPriceTradedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LaySize
        {
            get
            {
                return this.LaySizeField;
            }
            set
            {
                this.LaySizeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Layprice
        {
            get
            {
                return this.LaypriceField;
            }
            set
            {
                this.LaypriceField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Loss
        {
            get
            {
                return this.LossField;
            }
            set
            {
                this.LossField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MarketBookID
        {
            get
            {
                return this.MarketBookIDField;
            }
            set
            {
                this.MarketBookIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MarketStatusStr
        {
            get
            {
                return this.MarketStatusStrField;
            }
            set
            {
                this.MarketStatusStrField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<UserServiceReference.Match> Matches
        {
            get
            {
                return this.MatchesField;
            }
            set
            {
                this.MatchesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<UserServiceReference.Order> Orders
        {
            get
            {
                return this.OrdersField;
            }
            set
            {
                this.OrdersField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ProfitandLoss
        {
            get
            {
                return this.ProfitandLossField;
            }
            set
            {
                this.ProfitandLossField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> RemovalDate
        {
            get
            {
                return this.RemovalDateField;
            }
            set
            {
                this.RemovalDateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RunnerName
        {
            get
            {
                return this.RunnerNameField;
            }
            set
            {
                this.RunnerNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SelectionId
        {
            get
            {
                return this.SelectionIdField;
            }
            set
            {
                this.SelectionIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StallDraw
        {
            get
            {
                return this.StallDrawField;
            }
            set
            {
                this.StallDrawField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public UserServiceReference.StartingPrices StartingPrices
        {
            get
            {
                return this.StartingPricesField;
            }
            set
            {
                this.StartingPricesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public UserServiceReference.RunnerStatus Status
        {
            get
            {
                return this.StatusField;
            }
            set
            {
                this.StatusField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StatusStr
        {
            get
            {
                return this.StatusStrField;
            }
            set
            {
                this.StatusStrField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TotalMatched
        {
            get
            {
                return this.TotalMatchedField;
            }
            set
            {
                this.TotalMatchedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TotalMatchedStr
        {
            get
            {
                return this.TotalMatchedStrField;
            }
            set
            {
                this.TotalMatchedStrField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WearingDesc
        {
            get
            {
                return this.WearingDescField;
            }
            set
            {
                this.WearingDescField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WearingURL
        {
            get
            {
                return this.WearingURLField;
            }
            set
            {
                this.WearingURLField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isShow
        {
            get
            {
                return this.isShowField;
            }
            set
            {
                this.isShowField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UserServiceReference.IUserServices")]
    public interface IUserServices
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateRefererRateandIDbyUserID", ReplyAction="http://tempuri.org/IUserServices/UpdateRefererRateandIDbyUserIDResponse")]
        void UpdateRefererRateandIDbyUserID(int UserID, int ReffereID, int ReferrerRate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateRefererRateandIDbyUserID", ReplyAction="http://tempuri.org/IUserServices/UpdateRefererRateandIDbyUserIDResponse")]
        System.Threading.Tasks.Task UpdateRefererRateandIDbyUserIDAsync(int UserID, int ReffereID, int ReferrerRate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateUsersAllBlock", ReplyAction="http://tempuri.org/IUserServices/UpdateUsersAllBlockResponse")]
        void UpdateUsersAllBlock();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateUsersAllBlock", ReplyAction="http://tempuri.org/IUserServices/UpdateUsersAllBlockResponse")]
        System.Threading.Tasks.Task UpdateUsersAllBlockAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateUsersAllLoggedOut", ReplyAction="http://tempuri.org/IUserServices/UpdateUsersAllLoggedOutResponse")]
        void UpdateUsersAllLoggedOut();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateUsersAllLoggedOut", ReplyAction="http://tempuri.org/IUserServices/UpdateUsersAllLoggedOutResponse")]
        System.Threading.Tasks.Task UpdateUsersAllLoggedOutAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateMaxOddBackandLay", ReplyAction="http://tempuri.org/IUserServices/UpdateMaxOddBackandLayResponse")]
        void UpdateMaxOddBackandLay(int UserID, decimal MaxOddBack, bool CheckForMaxOddBack, decimal MaxOddLay, bool CheckForMaxOddLay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateMaxOddBackandLay", ReplyAction="http://tempuri.org/IUserServices/UpdateMaxOddBackandLayResponse")]
        System.Threading.Tasks.Task UpdateMaxOddBackandLayAsync(int UserID, decimal MaxOddBack, bool CheckForMaxOddBack, decimal MaxOddLay, bool CheckForMaxOddLay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetIntervalandBetPlaceTimings", ReplyAction="http://tempuri.org/IUserServices/GetIntervalandBetPlaceTimingsResponse")]
        string GetIntervalandBetPlaceTimings(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetIntervalandBetPlaceTimings", ReplyAction="http://tempuri.org/IUserServices/GetIntervalandBetPlaceTimingsResponse")]
        System.Threading.Tasks.Task<string> GetIntervalandBetPlaceTimingsAsync(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateIntervalandBetPlaceTimings", ReplyAction="http://tempuri.org/IUserServices/UpdateIntervalandBetPlaceTimingsResponse")]
        void UpdateIntervalandBetPlaceTimings(
                    int HorseRaceTimerInterval, 
                    int HorseRaceBetPlaceWait, 
                    int GrayHoundTimerInterval, 
                    int GrayHoundBetPlaceWait, 
                    int CricketMatchOddsTimerInterval, 
                    int CricketMatchOddsBetPlaceWait, 
                    int CompletedMatchTimerInterval, 
                    int CompletedMatchBetPlaceWait, 
                    int TiedMatchTimerInterval, 
                    int TiedMatchBetPlaceWait, 
                    int InningsRunsTimerInterval, 
                    int InningsRunsBetPlaceWait, 
                    int WinnerTimerInterval, 
                    int WinnerBetPlaceWait, 
                    int TennisTimerInterval, 
                    int TennisBetPlaceWait, 
                    int SoccerTimerInterval, 
                    int SoccerBetPlaceWait, 
                    decimal PoundRate, 
                    int userID, 
                    int FancyTimerInterval, 
                    int FancyBetPlaceWait, 
                    int RaceMinutesBeforeStart, 
                    int CancelBetTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateIntervalandBetPlaceTimings", ReplyAction="http://tempuri.org/IUserServices/UpdateIntervalandBetPlaceTimingsResponse")]
        System.Threading.Tasks.Task UpdateIntervalandBetPlaceTimingsAsync(
                    int HorseRaceTimerInterval, 
                    int HorseRaceBetPlaceWait, 
                    int GrayHoundTimerInterval, 
                    int GrayHoundBetPlaceWait, 
                    int CricketMatchOddsTimerInterval, 
                    int CricketMatchOddsBetPlaceWait, 
                    int CompletedMatchTimerInterval, 
                    int CompletedMatchBetPlaceWait, 
                    int TiedMatchTimerInterval, 
                    int TiedMatchBetPlaceWait, 
                    int InningsRunsTimerInterval, 
                    int InningsRunsBetPlaceWait, 
                    int WinnerTimerInterval, 
                    int WinnerBetPlaceWait, 
                    int TennisTimerInterval, 
                    int TennisBetPlaceWait, 
                    int SoccerTimerInterval, 
                    int SoccerBetPlaceWait, 
                    decimal PoundRate, 
                    int userID, 
                    int FancyTimerInterval, 
                    int FancyBetPlaceWait, 
                    int RaceMinutesBeforeStart, 
                    int CancelBetTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetHawalaAccountIDbyUserID", ReplyAction="http://tempuri.org/IUserServices/GetHawalaAccountIDbyUserIDResponse")]
        int GetHawalaAccountIDbyUserID(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetHawalaAccountIDbyUserID", ReplyAction="http://tempuri.org/IUserServices/GetHawalaAccountIDbyUserIDResponse")]
        System.Threading.Tasks.Task<int> GetHawalaAccountIDbyUserIDAsync(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetCreatedbyID", ReplyAction="http://tempuri.org/IUserServices/GetCreatedbyIDResponse")]
        int GetCreatedbyID(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetCreatedbyID", ReplyAction="http://tempuri.org/IUserServices/GetCreatedbyIDResponse")]
        System.Threading.Tasks.Task<int> GetCreatedbyIDAsync(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateHawalaIDbyUserID", ReplyAction="http://tempuri.org/IUserServices/UpdateHawalaIDbyUserIDResponse")]
        void UpdateHawalaIDbyUserID(int userID, int ParentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateHawalaIDbyUserID", ReplyAction="http://tempuri.org/IUserServices/UpdateHawalaIDbyUserIDResponse")]
        System.Threading.Tasks.Task UpdateHawalaIDbyUserIDAsync(int userID, int ParentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetMarketsforBettingAllowed", ReplyAction="http://tempuri.org/IUserServices/GetMarketsforBettingAllowedResponse")]
        string GetMarketsforBettingAllowed(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetMarketsforBettingAllowed", ReplyAction="http://tempuri.org/IUserServices/GetMarketsforBettingAllowedResponse")]
        System.Threading.Tasks.Task<string> GetMarketsforBettingAllowedAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateMarketAllowedBetting", ReplyAction="http://tempuri.org/IUserServices/UpdateMarketAllowedBettingResponse")]
        void UpdateMarketAllowedBetting(int UserId, string MarketbookId, bool AllowedBetting);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateMarketAllowedBetting", ReplyAction="http://tempuri.org/IUserServices/UpdateMarketAllowedBettingResponse")]
        System.Threading.Tasks.Task UpdateMarketAllowedBettingAsync(int UserId, string MarketbookId, bool AllowedBetting);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateMarketAllowedBettingForAllAgents", ReplyAction="http://tempuri.org/IUserServices/UpdateMarketAllowedBettingForAllAgentsResponse")]
        void UpdateMarketAllowedBettingForAllAgents(System.Collections.Generic.List<int> UserIds, System.Collections.Generic.List<UserServiceReference.SP_UserMarket_GetMarketForAllowedBetting_Result> lstMarkets);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateMarketAllowedBettingForAllAgents", ReplyAction="http://tempuri.org/IUserServices/UpdateMarketAllowedBettingForAllAgentsResponse")]
        System.Threading.Tasks.Task UpdateMarketAllowedBettingForAllAgentsAsync(System.Collections.Generic.List<int> UserIds, System.Collections.Generic.List<UserServiceReference.SP_UserMarket_GetMarketForAllowedBetting_Result> lstMarkets);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetBetSlipKeys", ReplyAction="http://tempuri.org/IUserServices/GetBetSlipKeysResponse")]
        string GetBetSlipKeys(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetBetSlipKeys", ReplyAction="http://tempuri.org/IUserServices/GetBetSlipKeysResponse")]
        System.Threading.Tasks.Task<string> GetBetSlipKeysAsync(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateBetSlipKeys", ReplyAction="http://tempuri.org/IUserServices/UpdateBetSlipKeysResponse")]
        void UpdateBetSlipKeys(
                    int UserID, 
                    string SimpleBtn1, 
                    string SimpleBtn2, 
                    string SimpleBtn3, 
                    string SimpleBtn4, 
                    string SimpleBtn5, 
                    string SimpleBtn6, 
                    string SimpleBtn7, 
                    string SimpleBtn8, 
                    string SimpleBtn9, 
                    string SimpleBtn10, 
                    string SimpleBtn11, 
                    string SimpleBtn12, 
                    string MutipleBtn1, 
                    string MutipleBtn2, 
                    string MutipleBtn3, 
                    string MutipleBtn4, 
                    string MutipleBtn5, 
                    string MutipleBtn6, 
                    string MutipleBtn7, 
                    string MutipleBtn8, 
                    string MutipleBtn9, 
                    string MutipleBtn10, 
                    string MutipleBtn11, 
                    string MutipleBtn12);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateBetSlipKeys", ReplyAction="http://tempuri.org/IUserServices/UpdateBetSlipKeysResponse")]
        System.Threading.Tasks.Task UpdateBetSlipKeysAsync(
                    int UserID, 
                    string SimpleBtn1, 
                    string SimpleBtn2, 
                    string SimpleBtn3, 
                    string SimpleBtn4, 
                    string SimpleBtn5, 
                    string SimpleBtn6, 
                    string SimpleBtn7, 
                    string SimpleBtn8, 
                    string SimpleBtn9, 
                    string SimpleBtn10, 
                    string SimpleBtn11, 
                    string SimpleBtn12, 
                    string MutipleBtn1, 
                    string MutipleBtn2, 
                    string MutipleBtn3, 
                    string MutipleBtn4, 
                    string MutipleBtn5, 
                    string MutipleBtn6, 
                    string MutipleBtn7, 
                    string MutipleBtn8, 
                    string MutipleBtn9, 
                    string MutipleBtn10, 
                    string MutipleBtn11, 
                    string MutipleBtn12);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateBettingAllowed", ReplyAction="http://tempuri.org/IUserServices/UpdateBettingAllowedResponse")]
        void UpdateBettingAllowed(string EventID, string BettingAllowed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateBettingAllowed", ReplyAction="http://tempuri.org/IUserServices/UpdateBettingAllowedResponse")]
        System.Threading.Tasks.Task UpdateBettingAllowedAsync(string EventID, string BettingAllowed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetPoundRatebyUserID", ReplyAction="http://tempuri.org/IUserServices/GetPoundRatebyUserIDResponse")]
        decimal GetPoundRatebyUserID(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetPoundRatebyUserID", ReplyAction="http://tempuri.org/IUserServices/GetPoundRatebyUserIDResponse")]
        System.Threading.Tasks.Task<decimal> GetPoundRatebyUserIDAsync(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetMarqueeText", ReplyAction="http://tempuri.org/IUserServices/GetMarqueeTextResponse")]
        string GetMarqueeText();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetMarqueeText", ReplyAction="http://tempuri.org/IUserServices/GetMarqueeTextResponse")]
        System.Threading.Tasks.Task<string> GetMarqueeTextAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateMarqueeText", ReplyAction="http://tempuri.org/IUserServices/UpdateMarqueeTextResponse")]
        void UpdateMarqueeText(string marqueetext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateMarqueeText", ReplyAction="http://tempuri.org/IUserServices/UpdateMarqueeTextResponse")]
        System.Threading.Tasks.Task UpdateMarqueeTextAsync(string marqueetext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/SendBalanceSheettoEmail", ReplyAction="http://tempuri.org/IUserServices/SendBalanceSheettoEmailResponse")]
        void SendBalanceSheettoEmail(string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/SendBalanceSheettoEmail", ReplyAction="http://tempuri.org/IUserServices/SendBalanceSheettoEmailResponse")]
        System.Threading.Tasks.Task SendBalanceSheettoEmailAsync(string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/SendBalanceSheettoEmailAutomatic", ReplyAction="http://tempuri.org/IUserServices/SendBalanceSheettoEmailAutomaticResponse")]
        void SendBalanceSheettoEmailAutomatic(string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/SendBalanceSheettoEmailAutomatic", ReplyAction="http://tempuri.org/IUserServices/SendBalanceSheettoEmailAutomaticResponse")]
        System.Threading.Tasks.Task SendBalanceSheettoEmailAutomaticAsync(string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetShowTV", ReplyAction="http://tempuri.org/IUserServices/GetShowTVResponse")]
        bool GetShowTV(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetShowTV", ReplyAction="http://tempuri.org/IUserServices/GetShowTVResponse")]
        System.Threading.Tasks.Task<bool> GetShowTVAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateShowTV", ReplyAction="http://tempuri.org/IUserServices/UpdateShowTVResponse")]
        void UpdateShowTV(int userID, bool ShowTV);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateShowTV", ReplyAction="http://tempuri.org/IUserServices/UpdateShowTVResponse")]
        System.Threading.Tasks.Task UpdateShowTVAsync(int userID, bool ShowTV);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetEventDetailsbyMarketBook", ReplyAction="http://tempuri.org/IUserServices/GetEventDetailsbyMarketBookResponse")]
        UserServiceReference.SP_UserMarket_GetEventDetailsbyMarketID_Result GetEventDetailsbyMarketBook(string MarketbookID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetEventDetailsbyMarketBook", ReplyAction="http://tempuri.org/IUserServices/GetEventDetailsbyMarketBookResponse")]
        System.Threading.Tasks.Task<UserServiceReference.SP_UserMarket_GetEventDetailsbyMarketID_Result> GetEventDetailsbyMarketBookAsync(string MarketbookID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetLinevMarketsbyEventID", ReplyAction="http://tempuri.org/IUserServices/GetLinevMarketsbyEventIDResponse")]
        string GetLinevMarketsbyEventID(string EventID, System.DateTime EventOpenDate, int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetLinevMarketsbyEventID", ReplyAction="http://tempuri.org/IUserServices/GetLinevMarketsbyEventIDResponse")]
        System.Threading.Tasks.Task<string> GetLinevMarketsbyEventIDAsync(string EventID, System.DateTime EventOpenDate, int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/KJMarketsbyEventID", ReplyAction="http://tempuri.org/IUserServices/KJMarketsbyEventIDResponse")]
        string KJMarketsbyEventID(string EventID, int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/KJMarketsbyEventID", ReplyAction="http://tempuri.org/IUserServices/KJMarketsbyEventIDResponse")]
        System.Threading.Tasks.Task<string> KJMarketsbyEventIDAsync(string EventID, int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetLinevMarketsbyEventIDIN", ReplyAction="http://tempuri.org/IUserServices/GetLinevMarketsbyEventIDINResponse")]
        string GetLinevMarketsbyEventIDIN(string EventID, System.DateTime EventOpenDate, int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetLinevMarketsbyEventIDIN", ReplyAction="http://tempuri.org/IUserServices/GetLinevMarketsbyEventIDINResponse")]
        System.Threading.Tasks.Task<string> GetLinevMarketsbyEventIDINAsync(string EventID, System.DateTime EventOpenDate, int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetMarketIDbyEventID", ReplyAction="http://tempuri.org/IUserServices/GetMarketIDbyEventIDResponse")]
        string GetMarketIDbyEventID(string EventID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetMarketIDbyEventID", ReplyAction="http://tempuri.org/IUserServices/GetMarketIDbyEventIDResponse")]
        System.Threading.Tasks.Task<string> GetMarketIDbyEventIDAsync(string EventID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetKalijut", ReplyAction="http://tempuri.org/IUserServices/GetKalijutResponse")]
        string GetKalijut();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetKalijut", ReplyAction="http://tempuri.org/IUserServices/GetKalijutResponse")]
        System.Threading.Tasks.Task<string> GetKalijutAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetFigureOdds", ReplyAction="http://tempuri.org/IUserServices/GetFigureOddsResponse")]
        string GetFigureOdds();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetFigureOdds", ReplyAction="http://tempuri.org/IUserServices/GetFigureOddsResponse")]
        System.Threading.Tasks.Task<string> GetFigureOddsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetScoresbyEventIDandDate", ReplyAction="http://tempuri.org/IUserServices/GetScoresbyEventIDandDateResponse")]
        string GetScoresbyEventIDandDate(string EventId, System.DateTime EventOpenDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetScoresbyEventIDandDate", ReplyAction="http://tempuri.org/IUserServices/GetScoresbyEventIDandDateResponse")]
        System.Threading.Tasks.Task<string> GetScoresbyEventIDandDateAsync(string EventId, System.DateTime EventOpenDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetMarketRules", ReplyAction="http://tempuri.org/IUserServices/GetMarketRulesResponse")]
        string GetMarketRules();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetMarketRules", ReplyAction="http://tempuri.org/IUserServices/GetMarketRulesResponse")]
        System.Threading.Tasks.Task<string> GetMarketRulesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetLineandMatchOddsforAssociation", ReplyAction="http://tempuri.org/IUserServices/GetLineandMatchOddsforAssociationResponse")]
        string GetLineandMatchOddsforAssociation();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetLineandMatchOddsforAssociation", ReplyAction="http://tempuri.org/IUserServices/GetLineandMatchOddsforAssociationResponse")]
        System.Threading.Tasks.Task<string> GetLineandMatchOddsforAssociationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateAssociateEventID", ReplyAction="http://tempuri.org/IUserServices/UpdateAssociateEventIDResponse")]
        void UpdateAssociateEventID(string associateventID, string EventID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateAssociateEventID", ReplyAction="http://tempuri.org/IUserServices/UpdateAssociateEventIDResponse")]
        System.Threading.Tasks.Task UpdateAssociateEventIDAsync(string associateventID, string EventID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetLiveTVChanels", ReplyAction="http://tempuri.org/IUserServices/GetLiveTVChanelsResponse")]
        string GetLiveTVChanels(string Passkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetLiveTVChanels", ReplyAction="http://tempuri.org/IUserServices/GetLiveTVChanelsResponse")]
        System.Threading.Tasks.Task<string> GetLiveTVChanelsAsync(string Passkey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetScorebyEventIDandInnings", ReplyAction="http://tempuri.org/IUserServices/GetScorebyEventIDandInningsResponse")]
        string GetScorebyEventIDandInnings(string EventID, System.DateTime EventOpenDate, int Innings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetScorebyEventIDandInnings", ReplyAction="http://tempuri.org/IUserServices/GetScorebyEventIDandInningsResponse")]
        System.Threading.Tasks.Task<string> GetScorebyEventIDandInningsAsync(string EventID, System.DateTime EventOpenDate, int Innings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetScorebyEventIDandInningsandOvers", ReplyAction="http://tempuri.org/IUserServices/GetScorebyEventIDandInningsandOversResponse")]
        string GetScorebyEventIDandInningsandOvers(string EventID, System.DateTime EventOpenDate, int Innings, int Overs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetScorebyEventIDandInningsandOvers", ReplyAction="http://tempuri.org/IUserServices/GetScorebyEventIDandInningsandOversResponse")]
        System.Threading.Tasks.Task<string> GetScorebyEventIDandInningsandOversAsync(string EventID, System.DateTime EventOpenDate, int Innings, int Overs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/AddScoreToBallbyBallsummary", ReplyAction="http://tempuri.org/IUserServices/AddScoreToBallbyBallsummaryResponse")]
        void AddScoreToBallbyBallsummary(string EventID, string MarketCatalogueID, double over, int score, int innings, System.DateTime EventOpenDate, int wickets, string teamname, string matchstatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/AddScoreToBallbyBallsummary", ReplyAction="http://tempuri.org/IUserServices/AddScoreToBallbyBallsummaryResponse")]
        System.Threading.Tasks.Task AddScoreToBallbyBallsummaryAsync(string EventID, string MarketCatalogueID, double over, int score, int innings, System.DateTime EventOpenDate, int wickets, string teamname, string matchstatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/CheckforMatchCompletedFancy", ReplyAction="http://tempuri.org/IUserServices/CheckforMatchCompletedFancyResponse")]
        void CheckforMatchCompletedFancy(string MarketBookID, int ScoreforThisOver);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/CheckforMatchCompletedFancy", ReplyAction="http://tempuri.org/IUserServices/CheckforMatchCompletedFancyResponse")]
        System.Threading.Tasks.Task CheckforMatchCompletedFancyAsync(string MarketBookID, int ScoreforThisOver);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/CheckforMatchCompletedFancyIN", ReplyAction="http://tempuri.org/IUserServices/CheckforMatchCompletedFancyINResponse")]
        void CheckforMatchCompletedFancyIN(string MarketBookID, string Marketname, int ScoreforThisOver);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/CheckforMatchCompletedFancyIN", ReplyAction="http://tempuri.org/IUserServices/CheckforMatchCompletedFancyINResponse")]
        System.Threading.Tasks.Task CheckforMatchCompletedFancyINAsync(string MarketBookID, string Marketname, int ScoreforThisOver);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/CheckforMatchCompletedFancyKJ", ReplyAction="http://tempuri.org/IUserServices/CheckforMatchCompletedFancyKJResponse")]
        void CheckforMatchCompletedFancyKJ(string MarketBookID, int selectionID, int ScoreforThisOver);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/CheckforMatchCompletedFancyKJ", ReplyAction="http://tempuri.org/IUserServices/CheckforMatchCompletedFancyKJResponse")]
        System.Threading.Tasks.Task CheckforMatchCompletedFancyKJAsync(string MarketBookID, int selectionID, int ScoreforThisOver);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/CheckforMatchCompletedSmallFig", ReplyAction="http://tempuri.org/IUserServices/CheckforMatchCompletedSmallFigResponse")]
        void CheckforMatchCompletedSmallFig(string MarketBookID, int selectionID, int ScoreforThisOver);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/CheckforMatchCompletedSmallFig", ReplyAction="http://tempuri.org/IUserServices/CheckforMatchCompletedSmallFigResponse")]
        System.Threading.Tasks.Task CheckforMatchCompletedSmallFigAsync(string MarketBookID, int selectionID, int ScoreforThisOver);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/CheckforMatchCompletedFancyFig", ReplyAction="http://tempuri.org/IUserServices/CheckforMatchCompletedFancyFigResponse")]
        void CheckforMatchCompletedFancyFig(string MarketBookID, int selectionID, int ScoreforThisOver);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/CheckforMatchCompletedFancyFig", ReplyAction="http://tempuri.org/IUserServices/CheckforMatchCompletedFancyFigResponse")]
        System.Threading.Tasks.Task CheckforMatchCompletedFancyFigAsync(string MarketBookID, int selectionID, int ScoreforThisOver);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/InsertUserAccountsFancy", ReplyAction="http://tempuri.org/IUserServices/InsertUserAccountsFancyResponse")]
        bool InsertUserAccountsFancy(System.Collections.Generic.List<UserServiceReference.MarketBook> marketbookstatus, int userID, string Password, int ScoreforThisOver);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/InsertUserAccountsFancy", ReplyAction="http://tempuri.org/IUserServices/InsertUserAccountsFancyResponse")]
        System.Threading.Tasks.Task<bool> InsertUserAccountsFancyAsync(System.Collections.Generic.List<UserServiceReference.MarketBook> marketbookstatus, int userID, string Password, int ScoreforThisOver);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetIsComAllowbyUserID", ReplyAction="http://tempuri.org/IUserServices/GetIsComAllowbyUserIDResponse")]
        bool GetIsComAllowbyUserID(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetIsComAllowbyUserID", ReplyAction="http://tempuri.org/IUserServices/GetIsComAllowbyUserIDResponse")]
        System.Threading.Tasks.Task<bool> GetIsComAllowbyUserIDAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateMarketStatusbyMarketBookID", ReplyAction="http://tempuri.org/IUserServices/UpdateMarketStatusbyMarketBookIDResponse")]
        void UpdateMarketStatusbyMarketBookID(string MarketBookID, string MarketStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateMarketStatusbyMarketBookID", ReplyAction="http://tempuri.org/IUserServices/UpdateMarketStatusbyMarketBookIDResponse")]
        System.Threading.Tasks.Task UpdateMarketStatusbyMarketBookIDAsync(string MarketBookID, string MarketStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetFancyResultPostSetting", ReplyAction="http://tempuri.org/IUserServices/GetFancyResultPostSettingResponse")]
        bool GetFancyResultPostSetting();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetFancyResultPostSetting", ReplyAction="http://tempuri.org/IUserServices/GetFancyResultPostSettingResponse")]
        System.Threading.Tasks.Task<bool> GetFancyResultPostSettingAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateFancyResultPostSetting", ReplyAction="http://tempuri.org/IUserServices/UpdateFancyResultPostSettingResponse")]
        void UpdateFancyResultPostSetting(bool fancyresultpost);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateFancyResultPostSetting", ReplyAction="http://tempuri.org/IUserServices/UpdateFancyResultPostSettingResponse")]
        System.Threading.Tasks.Task UpdateFancyResultPostSettingAsync(bool fancyresultpost);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetCommissionRatebyUserIDFancy", ReplyAction="http://tempuri.org/IUserServices/GetCommissionRatebyUserIDFancyResponse")]
        int GetCommissionRatebyUserIDFancy(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetCommissionRatebyUserIDFancy", ReplyAction="http://tempuri.org/IUserServices/GetCommissionRatebyUserIDFancyResponse")]
        System.Threading.Tasks.Task<int> GetCommissionRatebyUserIDFancyAsync(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateCommissionRatebyUserID", ReplyAction="http://tempuri.org/IUserServices/UpdateCommissionRatebyUserIDResponse")]
        void UpdateCommissionRatebyUserID(int UserID, int CommisionrateFancy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateCommissionRatebyUserID", ReplyAction="http://tempuri.org/IUserServices/UpdateCommissionRatebyUserIDResponse")]
        System.Threading.Tasks.Task UpdateCommissionRatebyUserIDAsync(int UserID, int CommisionrateFancy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateCricketAPIMatchKey", ReplyAction="http://tempuri.org/IUserServices/UpdateCricketAPIMatchKeyResponse")]
        void UpdateCricketAPIMatchKey(string EventID, string CricketAPIMatchKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateCricketAPIMatchKey", ReplyAction="http://tempuri.org/IUserServices/UpdateCricketAPIMatchKeyResponse")]
        System.Threading.Tasks.Task UpdateCricketAPIMatchKeyAsync(string EventID, string CricketAPIMatchKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetFancyResultsFrom", ReplyAction="http://tempuri.org/IUserServices/GetFancyResultsFromResponse")]
        string GetFancyResultsFrom();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetFancyResultsFrom", ReplyAction="http://tempuri.org/IUserServices/GetFancyResultsFromResponse")]
        System.Threading.Tasks.Task<string> GetFancyResultsFromAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateGetFancyResultsFrom", ReplyAction="http://tempuri.org/IUserServices/UpdateGetFancyResultsFromResponse")]
        void UpdateGetFancyResultsFrom(string ResultsFrom);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateGetFancyResultsFrom", ReplyAction="http://tempuri.org/IUserServices/UpdateGetFancyResultsFromResponse")]
        System.Threading.Tasks.Task UpdateGetFancyResultsFromAsync(string ResultsFrom);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetRecentMatchesFromCricketAPI", ReplyAction="http://tempuri.org/IUserServices/GetRecentMatchesFromCricketAPIResponse")]
        string GetRecentMatchesFromCricketAPI();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetRecentMatchesFromCricketAPI", ReplyAction="http://tempuri.org/IUserServices/GetRecentMatchesFromCricketAPIResponse")]
        System.Threading.Tasks.Task<string> GetRecentMatchesFromCricketAPIAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateGetDataFromForLoggingData", ReplyAction="http://tempuri.org/IUserServices/UpdateGetDataFromForLoggingDataResponse")]
        void UpdateGetDataFromForLoggingData(string EventID, string GetDataFrom);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateGetDataFromForLoggingData", ReplyAction="http://tempuri.org/IUserServices/UpdateGetDataFromForLoggingDataResponse")]
        System.Threading.Tasks.Task UpdateGetDataFromForLoggingDataAsync(string EventID, string GetDataFrom);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAccountsDatabyEventNameuserIDandDateRange", ReplyAction="http://tempuri.org/IUserServices/GetAccountsDatabyEventNameuserIDandDateRangeResp" +
            "onse")]
        string GetAccountsDatabyEventNameuserIDandDateRange(int UserID, string From, string To, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAccountsDatabyEventNameuserIDandDateRange", ReplyAction="http://tempuri.org/IUserServices/GetAccountsDatabyEventNameuserIDandDateRangeResp" +
            "onse")]
        System.Threading.Tasks.Task<string> GetAccountsDatabyEventNameuserIDandDateRangeAsync(int UserID, string From, string To, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAccountsDatabyEventNameuserIDandDateRangeFanc" +
            "ywithMArketName", ReplyAction="http://tempuri.org/IUserServices/GetAccountsDatabyEventNameuserIDandDateRangeFanc" +
            "ywithMArketNameResponse")]
        string GetAccountsDatabyEventNameuserIDandDateRangeFancywithMArketName(int UserID, string From, string To, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAccountsDatabyEventNameuserIDandDateRangeFanc" +
            "ywithMArketName", ReplyAction="http://tempuri.org/IUserServices/GetAccountsDatabyEventNameuserIDandDateRangeFanc" +
            "ywithMArketNameResponse")]
        System.Threading.Tasks.Task<string> GetAccountsDatabyEventNameuserIDandDateRangeFancywithMArketNameAsync(int UserID, string From, string To, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateTransferAdminAmount", ReplyAction="http://tempuri.org/IUserServices/UpdateTransferAdminAmountResponse")]
        void UpdateTransferAdminAmount(int UserID, bool TransferAdminAmount, int TransferAgentID, bool TransferAdminAmountSoccer, bool TransferAdminAmountTennis, bool TransferAdminAmountHorse, bool TransferAdminAmountGreyHound);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateTransferAdminAmount", ReplyAction="http://tempuri.org/IUserServices/UpdateTransferAdminAmountResponse")]
        System.Threading.Tasks.Task UpdateTransferAdminAmountAsync(int UserID, bool TransferAdminAmount, int TransferAgentID, bool TransferAdminAmountSoccer, bool TransferAdminAmountTennis, bool TransferAdminAmountHorse, bool TransferAdminAmountGreyHound);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetTransferAdminAmount", ReplyAction="http://tempuri.org/IUserServices/GetTransferAdminAmountResponse")]
        UserServiceReference.SP_Users_GetTransferAdminAmount_Result GetTransferAdminAmount(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetTransferAdminAmount", ReplyAction="http://tempuri.org/IUserServices/GetTransferAdminAmountResponse")]
        System.Threading.Tasks.Task<UserServiceReference.SP_Users_GetTransferAdminAmount_Result> GetTransferAdminAmountAsync(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAllPendingAmountsbyDate", ReplyAction="http://tempuri.org/IUserServices/GetAllPendingAmountsbyDateResponse")]
        string GetAllPendingAmountsbyDate(System.DateTime DueDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAllPendingAmountsbyDate", ReplyAction="http://tempuri.org/IUserServices/GetAllPendingAmountsbyDateResponse")]
        System.Threading.Tasks.Task<string> GetAllPendingAmountsbyDateAsync(System.DateTime DueDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/AddAmountReceviables", ReplyAction="http://tempuri.org/IUserServices/AddAmountReceviablesResponse")]
        void AddAmountReceviables(int UserId, decimal Amount, System.DateTime DueDate, string Status, decimal AmountReceived);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/AddAmountReceviables", ReplyAction="http://tempuri.org/IUserServices/AddAmountReceviablesResponse")]
        System.Threading.Tasks.Task AddAmountReceviablesAsync(int UserId, decimal Amount, System.DateTime DueDate, string Status, decimal AmountReceived);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateAmountReceviables", ReplyAction="http://tempuri.org/IUserServices/UpdateAmountReceviablesResponse")]
        void UpdateAmountReceviables(int ID, decimal Amount, System.DateTime DueDate, string Status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateAmountReceviables", ReplyAction="http://tempuri.org/IUserServices/UpdateAmountReceviablesResponse")]
        System.Threading.Tasks.Task UpdateAmountReceviablesAsync(int ID, decimal Amount, System.DateTime DueDate, string Status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetBettingAllowedbyMarketIDandUserID", ReplyAction="http://tempuri.org/IUserServices/GetBettingAllowedbyMarketIDandUserIDResponse")]
        bool GetBettingAllowedbyMarketIDandUserID(int UserId, string MarketBookID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetBettingAllowedbyMarketIDandUserID", ReplyAction="http://tempuri.org/IUserServices/GetBettingAllowedbyMarketIDandUserIDResponse")]
        System.Threading.Tasks.Task<bool> GetBettingAllowedbyMarketIDandUserIDAsync(int UserId, string MarketBookID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetBettingAllowedbyMarketIDandUserIDInplay", ReplyAction="http://tempuri.org/IUserServices/GetBettingAllowedbyMarketIDandUserIDInplayRespon" +
            "se")]
        bool GetBettingAllowedbyMarketIDandUserIDInplay(int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetBettingAllowedbyMarketIDandUserIDInplay", ReplyAction="http://tempuri.org/IUserServices/GetBettingAllowedbyMarketIDandUserIDInplayRespon" +
            "se")]
        System.Threading.Tasks.Task<bool> GetBettingAllowedbyMarketIDandUserIDInplayAsync(int UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/AddReferrerUsers", ReplyAction="http://tempuri.org/IUserServices/AddReferrerUsersResponse")]
        void AddReferrerUsers(int UserID, int ReferrerID, int ReferrerRate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/AddReferrerUsers", ReplyAction="http://tempuri.org/IUserServices/AddReferrerUsersResponse")]
        System.Threading.Tasks.Task AddReferrerUsersAsync(int UserID, int ReferrerID, int ReferrerRate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/DeletReffererUSers", ReplyAction="http://tempuri.org/IUserServices/DeletReffererUSersResponse")]
        void DeletReffererUSers(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/DeletReffererUSers", ReplyAction="http://tempuri.org/IUserServices/DeletReffererUSersResponse")]
        System.Threading.Tasks.Task DeletReffererUSersAsync(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetReferrerRatesbyUserID", ReplyAction="http://tempuri.org/IUserServices/GetReferrerRatesbyUserIDResponse")]
        System.Collections.Generic.List<UserServiceReference.SP_Referrers_GetReferrerRateandReferrerIDbyUserID_Result> GetReferrerRatesbyUserID(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetReferrerRatesbyUserID", ReplyAction="http://tempuri.org/IUserServices/GetReferrerRatesbyUserIDResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<UserServiceReference.SP_Referrers_GetReferrerRateandReferrerIDbyUserID_Result>> GetReferrerRatesbyUserIDAsync(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/InsertUserBetNew", ReplyAction="http://tempuri.org/IUserServices/InsertUserBetNewResponse")]
        void InsertUserBetNew(
                    decimal userodd, 
                    string SelectionID, 
                    string Selectionname, 
                    string BetType, 
                    string nupdownAmount, 
                    string betslipamountlabel, 
                    decimal MaxOddBack, 
                    decimal MaxOddLay, 
                    bool CheckforMaxOddBack, 
                    bool CheckforMaxOddLay, 
                    int Clickedlocation, 
                    int UserID, 
                    string Betslipsize, 
                    string Password, 
                    string marketbookId, 
                    string Marketbookname, 
                    bool GetData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/InsertUserBetNew", ReplyAction="http://tempuri.org/IUserServices/InsertUserBetNewResponse")]
        System.Threading.Tasks.Task InsertUserBetNewAsync(
                    decimal userodd, 
                    string SelectionID, 
                    string Selectionname, 
                    string BetType, 
                    string nupdownAmount, 
                    string betslipamountlabel, 
                    decimal MaxOddBack, 
                    decimal MaxOddLay, 
                    bool CheckforMaxOddBack, 
                    bool CheckforMaxOddLay, 
                    int Clickedlocation, 
                    int UserID, 
                    string Betslipsize, 
                    string Password, 
                    string marketbookId, 
                    string Marketbookname, 
                    bool GetData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetDistinctMarketsFromBets", ReplyAction="http://tempuri.org/IUserServices/GetDistinctMarketsFromBetsResponse")]
        string GetDistinctMarketsFromBets(string From, string To);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetDistinctMarketsFromBets", ReplyAction="http://tempuri.org/IUserServices/GetDistinctMarketsFromBetsResponse")]
        System.Threading.Tasks.Task<string> GetDistinctMarketsFromBetsAsync(string From, string To);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetDistinctMarketsFromAccounts", ReplyAction="http://tempuri.org/IUserServices/GetDistinctMarketsFromAccountsResponse")]
        string GetDistinctMarketsFromAccounts(string From, string To);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetDistinctMarketsFromAccounts", ReplyAction="http://tempuri.org/IUserServices/GetDistinctMarketsFromAccountsResponse")]
        System.Threading.Tasks.Task<string> GetDistinctMarketsFromAccountsAsync(string From, string To);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UnPostUserAccountsbyUserIDandMarketID", ReplyAction="http://tempuri.org/IUserServices/UnPostUserAccountsbyUserIDandMarketIDResponse")]
        bool UnPostUserAccountsbyUserIDandMarketID(string MarketBookId, int UserID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UnPostUserAccountsbyUserIDandMarketID", ReplyAction="http://tempuri.org/IUserServices/UnPostUserAccountsbyUserIDandMarketIDResponse")]
        System.Threading.Tasks.Task<bool> UnPostUserAccountsbyUserIDandMarketIDAsync(string MarketBookId, int UserID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateUserBetsStatusbyMarketIDandUserID", ReplyAction="http://tempuri.org/IUserServices/UpdateUserBetsStatusbyMarketIDandUserIDResponse")]
        bool UpdateUserBetsStatusbyMarketIDandUserID(string MarketBookId, int UserID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateUserBetsStatusbyMarketIDandUserID", ReplyAction="http://tempuri.org/IUserServices/UpdateUserBetsStatusbyMarketIDandUserIDResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserBetsStatusbyMarketIDandUserIDAsync(string MarketBookId, int UserID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateTotalOversbyMarket", ReplyAction="http://tempuri.org/IUserServices/UpdateTotalOversbyMarketResponse")]
        void UpdateTotalOversbyMarket(string EventID, string TotalOvers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateTotalOversbyMarket", ReplyAction="http://tempuri.org/IUserServices/UpdateTotalOversbyMarketResponse")]
        System.Threading.Tasks.Task UpdateTotalOversbyMarketAsync(string EventID, string TotalOvers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/SetBlockedStatusofUserBMS", ReplyAction="http://tempuri.org/IUserServices/SetBlockedStatusofUserBMSResponse")]
        string SetBlockedStatusofUserBMS(int UserID, bool isBlocked, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/SetBlockedStatusofUserBMS", ReplyAction="http://tempuri.org/IUserServices/SetBlockedStatusofUserBMSResponse")]
        System.Threading.Tasks.Task<string> SetBlockedStatusofUserBMSAsync(int UserID, bool isBlocked, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetMatchScoreCard", ReplyAction="http://tempuri.org/IUserServices/GetMatchScoreCardResponse")]
        UserServiceReference.APIResponse GetMatchScoreCard(string strMatchKey, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetMatchScoreCard", ReplyAction="http://tempuri.org/IUserServices/GetMatchScoreCardResponse")]
        System.Threading.Tasks.Task<UserServiceReference.APIResponse> GetMatchScoreCardAsync(string strMatchKey, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetCricketMatchKey", ReplyAction="http://tempuri.org/IUserServices/GetCricketMatchKeyResponse")]
        string GetCricketMatchKey(string MarketCatalogueID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetCricketMatchKey", ReplyAction="http://tempuri.org/IUserServices/GetCricketMatchKeyResponse")]
        System.Threading.Tasks.Task<string> GetCricketMatchKeyAsync(string MarketCatalogueID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateMarketsForView", ReplyAction="http://tempuri.org/IUserServices/UpdateMarketsForViewResponse")]
        void UpdateMarketsForView(int userID, bool isAllowedGrayHound, bool isAllowedHorse, bool isTennisAllowed, bool isSoccerAllowed, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateMarketsForView", ReplyAction="http://tempuri.org/IUserServices/UpdateMarketsForViewResponse")]
        System.Threading.Tasks.Task UpdateMarketsForViewAsync(int userID, bool isAllowedGrayHound, bool isAllowedHorse, bool isTennisAllowed, bool isSoccerAllowed, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateAllMarketClosedbyUserID", ReplyAction="http://tempuri.org/IUserServices/UpdateAllMarketClosedbyUserIDResponse")]
        void UpdateAllMarketClosedbyUserID(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateAllMarketClosedbyUserID", ReplyAction="http://tempuri.org/IUserServices/UpdateAllMarketClosedbyUserIDResponse")]
        System.Threading.Tasks.Task UpdateAllMarketClosedbyUserIDAsync(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetURLsData", ReplyAction="http://tempuri.org/IUserServices/GetURLsDataResponse")]
        string GetURLsData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetURLsData", ReplyAction="http://tempuri.org/IUserServices/GetURLsDataResponse")]
        System.Threading.Tasks.Task<string> GetURLsDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetTransferAgnetCommision", ReplyAction="http://tempuri.org/IUserServices/GetTransferAgnetCommisionResponse")]
        bool GetTransferAgnetCommision(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetTransferAgnetCommision", ReplyAction="http://tempuri.org/IUserServices/GetTransferAgnetCommisionResponse")]
        System.Threading.Tasks.Task<bool> GetTransferAgnetCommisionAsync(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateTransferAgnetCommision", ReplyAction="http://tempuri.org/IUserServices/UpdateTransferAgnetCommisionResponse")]
        void UpdateTransferAgnetCommision(int UserID, bool TranserAgentCommision);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateTransferAgnetCommision", ReplyAction="http://tempuri.org/IUserServices/UpdateTransferAgnetCommisionResponse")]
        System.Threading.Tasks.Task UpdateTransferAgnetCommisionAsync(int UserID, bool TranserAgentCommision);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateFancySyncONorOFF", ReplyAction="http://tempuri.org/IUserServices/UpdateFancySyncONorOFFResponse")]
        void UpdateFancySyncONorOFF(int UserId, string EventID, bool isopenenedbyuser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateFancySyncONorOFF", ReplyAction="http://tempuri.org/IUserServices/UpdateFancySyncONorOFFResponse")]
        System.Threading.Tasks.Task UpdateFancySyncONorOFFAsync(int UserId, string EventID, bool isopenenedbyuser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetMaxBalanceTransferLimit", ReplyAction="http://tempuri.org/IUserServices/GetMaxBalanceTransferLimitResponse")]
        int GetMaxBalanceTransferLimit(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetMaxBalanceTransferLimit", ReplyAction="http://tempuri.org/IUserServices/GetMaxBalanceTransferLimitResponse")]
        System.Threading.Tasks.Task<int> GetMaxBalanceTransferLimitAsync(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateMaxBalanceTransferLimit", ReplyAction="http://tempuri.org/IUserServices/UpdateMaxBalanceTransferLimitResponse")]
        void UpdateMaxBalanceTransferLimit(int UserID, int MaxBalanceTransferLimit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateMaxBalanceTransferLimit", ReplyAction="http://tempuri.org/IUserServices/UpdateMaxBalanceTransferLimitResponse")]
        System.Threading.Tasks.Task UpdateMaxBalanceTransferLimitAsync(int UserID, int MaxBalanceTransferLimit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetMaxAgentRate", ReplyAction="http://tempuri.org/IUserServices/GetMaxAgentRateResponse")]
        int GetMaxAgentRate(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetMaxAgentRate", ReplyAction="http://tempuri.org/IUserServices/GetMaxAgentRateResponse")]
        System.Threading.Tasks.Task<int> GetMaxAgentRateAsync(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAhmadRate", ReplyAction="http://tempuri.org/IUserServices/GetAhmadRateResponse")]
        int GetAhmadRate(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAhmadRate", ReplyAction="http://tempuri.org/IUserServices/GetAhmadRateResponse")]
        System.Threading.Tasks.Task<int> GetAhmadRateAsync(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateMaxAgentRate", ReplyAction="http://tempuri.org/IUserServices/UpdateMaxAgentRateResponse")]
        void UpdateMaxAgentRate(int UserID, int MaxAgentRate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateMaxAgentRate", ReplyAction="http://tempuri.org/IUserServices/UpdateMaxAgentRateResponse")]
        System.Threading.Tasks.Task UpdateMaxAgentRateAsync(int UserID, int MaxAgentRate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateAhmadRate", ReplyAction="http://tempuri.org/IUserServices/UpdateAhmadRateResponse")]
        void UpdateAhmadRate(int UserID, int AhmadRate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateAhmadRate", ReplyAction="http://tempuri.org/IUserServices/UpdateAhmadRateResponse")]
        System.Threading.Tasks.Task UpdateAhmadRateAsync(int UserID, int AhmadRate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateSuperRate", ReplyAction="http://tempuri.org/IUserServices/UpdateSuperRateResponse")]
        void UpdateSuperRate(int UserID, int SuperRate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateSuperRate", ReplyAction="http://tempuri.org/IUserServices/UpdateSuperRateResponse")]
        System.Threading.Tasks.Task UpdateSuperRateAsync(int UserID, int SuperRate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateFancySyncONorOFFbyMarketID", ReplyAction="http://tempuri.org/IUserServices/UpdateFancySyncONorOFFbyMarketIDResponse")]
        void UpdateFancySyncONorOFFbyMarketID(int UserId, string MarektID, bool isopenenedbyuser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateFancySyncONorOFFbyMarketID", ReplyAction="http://tempuri.org/IUserServices/UpdateFancySyncONorOFFbyMarketIDResponse")]
        System.Threading.Tasks.Task UpdateFancySyncONorOFFbyMarketIDAsync(int UserId, string MarektID, bool isopenenedbyuser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateKJSyncONorOFFbyMarketID", ReplyAction="http://tempuri.org/IUserServices/UpdateKJSyncONorOFFbyMarketIDResponse")]
        void UpdateKJSyncONorOFFbyMarketID(int UserId, string MarektID, bool isopenenedbyuser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateKJSyncONorOFFbyMarketID", ReplyAction="http://tempuri.org/IUserServices/UpdateKJSyncONorOFFbyMarketIDResponse")]
        System.Threading.Tasks.Task UpdateKJSyncONorOFFbyMarketIDAsync(int UserId, string MarektID, bool isopenenedbyuser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetTotalAgentCommissionbyAgentID", ReplyAction="http://tempuri.org/IUserServices/GetTotalAgentCommissionbyAgentIDResponse")]
        decimal GetTotalAgentCommissionbyAgentID(int UserId, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetTotalAgentCommissionbyAgentID", ReplyAction="http://tempuri.org/IUserServices/GetTotalAgentCommissionbyAgentIDResponse")]
        System.Threading.Tasks.Task<decimal> GetTotalAgentCommissionbyAgentIDAsync(int UserId, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetToWintheTossbyeventId", ReplyAction="http://tempuri.org/IUserServices/GetToWintheTossbyeventIdResponse")]
        UserServiceReference.SP_UserMarket_GetToWinTheTossbyEventID_Result GetToWintheTossbyeventId(int UserId, string EventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetToWintheTossbyeventId", ReplyAction="http://tempuri.org/IUserServices/GetToWintheTossbyeventIdResponse")]
        System.Threading.Tasks.Task<UserServiceReference.SP_UserMarket_GetToWinTheTossbyEventID_Result> GetToWintheTossbyeventIdAsync(int UserId, string EventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetToTiedMarketbyEventID", ReplyAction="http://tempuri.org/IUserServices/GetToTiedMarketbyEventIDResponse")]
        UserServiceReference.SP_UserMarket_GetToTiedMarketbyEventID_Result GetToTiedMarketbyEventID(int UserId, string EventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetToTiedMarketbyEventID", ReplyAction="http://tempuri.org/IUserServices/GetToTiedMarketbyEventIDResponse")]
        System.Threading.Tasks.Task<UserServiceReference.SP_UserMarket_GetToTiedMarketbyEventID_Result> GetToTiedMarketbyEventIDAsync(int UserId, string EventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetSoccergoalbyeventId", ReplyAction="http://tempuri.org/IUserServices/GetSoccergoalbyeventIdResponse")]
        System.Collections.Generic.List<UserServiceReference.SP_UserMarket_GetSoccergoalbyEventID_Result> GetSoccergoalbyeventId(int UserId, string EventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetSoccergoalbyeventId", ReplyAction="http://tempuri.org/IUserServices/GetSoccergoalbyeventIdResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<UserServiceReference.SP_UserMarket_GetSoccergoalbyEventID_Result>> GetSoccergoalbyeventIdAsync(int UserId, string EventId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/SetMarketOpenedbyuserinAPP", ReplyAction="http://tempuri.org/IUserServices/SetMarketOpenedbyuserinAPPResponse")]
        void SetMarketOpenedbyuserinAPP();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/SetMarketOpenedbyuserinAPP", ReplyAction="http://tempuri.org/IUserServices/SetMarketOpenedbyuserinAPPResponse")]
        System.Threading.Tasks.Task SetMarketOpenedbyuserinAPPAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetUserbyUsernameandPassword", ReplyAction="http://tempuri.org/IUserServices/GetUserbyUsernameandPasswordResponse")]
        string GetUserbyUsernameandPassword(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetUserbyUsernameandPassword", ReplyAction="http://tempuri.org/IUserServices/GetUserbyUsernameandPasswordResponse")]
        System.Threading.Tasks.Task<string> GetUserbyUsernameandPasswordAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetUserbyUsernameandPasswordNew", ReplyAction="http://tempuri.org/IUserServices/GetUserbyUsernameandPasswordNewResponse")]
        string GetUserbyUsernameandPasswordNew(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetUserbyUsernameandPasswordNew", ReplyAction="http://tempuri.org/IUserServices/GetUserbyUsernameandPasswordNewResponse")]
        System.Threading.Tasks.Task<string> GetUserbyUsernameandPasswordNewAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateCurrentLoggedInIDbyUserID", ReplyAction="http://tempuri.org/IUserServices/UpdateCurrentLoggedInIDbyUserIDResponse")]
        void UpdateCurrentLoggedInIDbyUserID(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateCurrentLoggedInIDbyUserID", ReplyAction="http://tempuri.org/IUserServices/UpdateCurrentLoggedInIDbyUserIDResponse")]
        System.Threading.Tasks.Task UpdateCurrentLoggedInIDbyUserIDAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/AddUserActivity", ReplyAction="http://tempuri.org/IUserServices/AddUserActivityResponse")]
        void AddUserActivity(string Activityname, System.DateTime ActivityTime, string IPAddress, string Location, string Deviceinfo, int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/AddUserActivity", ReplyAction="http://tempuri.org/IUserServices/AddUserActivityResponse")]
        System.Threading.Tasks.Task AddUserActivityAsync(string Activityname, System.DateTime ActivityTime, string IPAddress, string Location, string Deviceinfo, int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAccessRightsbyUserType", ReplyAction="http://tempuri.org/IUserServices/GetAccessRightsbyUserTypeResponse")]
        string GetAccessRightsbyUserType(int UserTypeID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAccessRightsbyUserType", ReplyAction="http://tempuri.org/IUserServices/GetAccessRightsbyUserTypeResponse")]
        System.Threading.Tasks.Task<string> GetAccessRightsbyUserTypeAsync(int UserTypeID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/AddUser", ReplyAction="http://tempuri.org/IUserServices/AddUserResponse")]
        string AddUser(
                    string Name, 
                    string Phonenumber, 
                    string EmailAddress, 
                    string username, 
                    string Password, 
                    string Location, 
                    decimal Accountbalance, 
                    int usertypeID, 
                    int createdByID, 
                    string RatePercent, 
                    decimal BetLowerLimit, 
                    decimal BetUpperLimit, 
                    bool CheckConditionsforPlacingBet, 
                    decimal BetLowerLimitHorsePlace, 
                    decimal BetUpperLimitHorsePlace, 
                    decimal BetLowerLimitGrayHoundWin, 
                    decimal BetUpperLimitGrayHoundWin, 
                    decimal BetLowerLimitGrayHoundPlace, 
                    decimal BetUpperLimitGrayHoundPlace, 
                    decimal BetLowerLimitMatchOdds, 
                    decimal BetUpperLimitMatchOdds, 
                    decimal BetLowerLimitInningsRunns, 
                    decimal BetUpperLimitInningsRunns, 
                    decimal BetLowerLimitCompletedMatch, 
                    decimal BetUpperLimitCompletedMatch, 
                    decimal BetLowerLimitMatchOddsSoccer, 
                    decimal BetUpperLimitMatchOddsSoccer, 
                    decimal BetLowerLimitMatchOddsTennis, 
                    decimal BetUpperLimitMatchOddsTennis, 
                    decimal BetUpperLimitTiedMatch, 
                    decimal BetLowerLimitTiedMatch, 
                    decimal BetUpperLimitWinner, 
                    decimal BetLowerLimitWinner, 
                    string Passwordforvalidate, 
                    decimal BetUpperLimitFancy, 
                    decimal BetLowerLimitFancy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/AddUser", ReplyAction="http://tempuri.org/IUserServices/AddUserResponse")]
        System.Threading.Tasks.Task<string> AddUserAsync(
                    string Name, 
                    string Phonenumber, 
                    string EmailAddress, 
                    string username, 
                    string Password, 
                    string Location, 
                    decimal Accountbalance, 
                    int usertypeID, 
                    int createdByID, 
                    string RatePercent, 
                    decimal BetLowerLimit, 
                    decimal BetUpperLimit, 
                    bool CheckConditionsforPlacingBet, 
                    decimal BetLowerLimitHorsePlace, 
                    decimal BetUpperLimitHorsePlace, 
                    decimal BetLowerLimitGrayHoundWin, 
                    decimal BetUpperLimitGrayHoundWin, 
                    decimal BetLowerLimitGrayHoundPlace, 
                    decimal BetUpperLimitGrayHoundPlace, 
                    decimal BetLowerLimitMatchOdds, 
                    decimal BetUpperLimitMatchOdds, 
                    decimal BetLowerLimitInningsRunns, 
                    decimal BetUpperLimitInningsRunns, 
                    decimal BetLowerLimitCompletedMatch, 
                    decimal BetUpperLimitCompletedMatch, 
                    decimal BetLowerLimitMatchOddsSoccer, 
                    decimal BetUpperLimitMatchOddsSoccer, 
                    decimal BetLowerLimitMatchOddsTennis, 
                    decimal BetUpperLimitMatchOddsTennis, 
                    decimal BetUpperLimitTiedMatch, 
                    decimal BetLowerLimitTiedMatch, 
                    decimal BetUpperLimitWinner, 
                    decimal BetLowerLimitWinner, 
                    string Passwordforvalidate, 
                    decimal BetUpperLimitFancy, 
                    decimal BetLowerLimitFancy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/CheckifUserExists", ReplyAction="http://tempuri.org/IUserServices/CheckifUserExistsResponse")]
        string CheckifUserExists(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/CheckifUserExists", ReplyAction="http://tempuri.org/IUserServices/CheckifUserExistsResponse")]
        System.Threading.Tasks.Task<string> CheckifUserExistsAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/AddCredittoUser", ReplyAction="http://tempuri.org/IUserServices/AddCredittoUserResponse")]
        void AddCredittoUser(decimal Amount, int userID, int AddedbyID, System.DateTime addedtime, decimal Amountremoved, bool AddtoUserAccounts, string AccountsTitle, bool isCreditAmount, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/AddCredittoUser", ReplyAction="http://tempuri.org/IUserServices/AddCredittoUserResponse")]
        System.Threading.Tasks.Task AddCredittoUserAsync(decimal Amount, int userID, int AddedbyID, System.DateTime addedtime, decimal Amountremoved, bool AddtoUserAccounts, string AccountsTitle, bool isCreditAmount, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/AddAdminAmountForSuper", ReplyAction="http://tempuri.org/IUserServices/AddAdminAmountForSuperResponse")]
        void AddAdminAmountForSuper(string AccountsTitle, string debit, string Credit, int userID, string marketid, System.DateTime addedtime, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/AddAdminAmountForSuper", ReplyAction="http://tempuri.org/IUserServices/AddAdminAmountForSuperResponse")]
        System.Threading.Tasks.Task AddAdminAmountForSuperAsync(string AccountsTitle, string debit, string Credit, int userID, string marketid, System.DateTime addedtime, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateStartBalancebyUserID", ReplyAction="http://tempuri.org/IUserServices/UpdateStartBalancebyUserIDResponse")]
        void UpdateStartBalancebyUserID(int userID, decimal newBalance, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateStartBalancebyUserID", ReplyAction="http://tempuri.org/IUserServices/UpdateStartBalancebyUserIDResponse")]
        System.Threading.Tasks.Task UpdateStartBalancebyUserIDAsync(int userID, decimal newBalance, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateAccountsOpeningBalance", ReplyAction="http://tempuri.org/IUserServices/UpdateAccountsOpeningBalanceResponse")]
        void UpdateAccountsOpeningBalance(int userID, decimal Balance, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateAccountsOpeningBalance", ReplyAction="http://tempuri.org/IUserServices/UpdateAccountsOpeningBalanceResponse")]
        System.Threading.Tasks.Task UpdateAccountsOpeningBalanceAsync(int userID, decimal Balance, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetCurrentBalancebyUser", ReplyAction="http://tempuri.org/IUserServices/GetCurrentBalancebyUserResponse")]
        string GetCurrentBalancebyUser(int userid, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetCurrentBalancebyUser", ReplyAction="http://tempuri.org/IUserServices/GetCurrentBalancebyUserResponse")]
        System.Threading.Tasks.Task<string> GetCurrentBalancebyUserAsync(int userid, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetStartingBalance", ReplyAction="http://tempuri.org/IUserServices/GetStartingBalanceResponse")]
        decimal GetStartingBalance(int UserID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetStartingBalance", ReplyAction="http://tempuri.org/IUserServices/GetStartingBalanceResponse")]
        System.Threading.Tasks.Task<decimal> GetStartingBalanceAsync(int UserID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/AddKalijut", ReplyAction="http://tempuri.org/IUserServices/AddKalijutResponse")]
        void AddKalijut(System.Nullable<int> userID, string eventTypeID, string competitonID, string eventID, string marketCatalogue, System.Nullable<int> updatedbyID, string eventTypeName, string competitionName, string eventName, string marketCatalogueName, System.Nullable<System.DateTime> eventOpenDate, string sheetName, string associateEventID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/AddKalijut", ReplyAction="http://tempuri.org/IUserServices/AddKalijutResponse")]
        System.Threading.Tasks.Task AddKalijutAsync(System.Nullable<int> userID, string eventTypeID, string competitonID, string eventID, string marketCatalogue, System.Nullable<int> updatedbyID, string eventTypeName, string competitionName, string eventName, string marketCatalogueName, System.Nullable<System.DateTime> eventOpenDate, string sheetName, string associateEventID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/MarketCatalogueSelectionskalijut", ReplyAction="http://tempuri.org/IUserServices/MarketCatalogueSelectionskalijutResponse")]
        void MarketCatalogueSelectionskalijut(string marketCatalogueID, string selectionID, string selectionName, string jockeyName, string wearing, string wearingDesc, string clothnumber, string stallDraw);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/MarketCatalogueSelectionskalijut", ReplyAction="http://tempuri.org/IUserServices/MarketCatalogueSelectionskalijutResponse")]
        System.Threading.Tasks.Task MarketCatalogueSelectionskalijutAsync(string marketCatalogueID, string selectionID, string selectionName, string jockeyName, string wearing, string wearingDesc, string clothnumber, string stallDraw);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateAccountBalacnebyUser", ReplyAction="http://tempuri.org/IUserServices/UpdateAccountBalacnebyUserResponse")]
        void UpdateAccountBalacnebyUser(int userid, decimal AccountBalance, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateAccountBalacnebyUser", ReplyAction="http://tempuri.org/IUserServices/UpdateAccountBalacnebyUserResponse")]
        System.Threading.Tasks.Task UpdateAccountBalacnebyUserAsync(int userid, decimal AccountBalance, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAllCuttingUsers", ReplyAction="http://tempuri.org/IUserServices/GetAllCuttingUsersResponse")]
        string GetAllCuttingUsers(string Passwordforvalidate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAllCuttingUsers", ReplyAction="http://tempuri.org/IUserServices/GetAllCuttingUsersResponse")]
        System.Threading.Tasks.Task<string> GetAllCuttingUsersAsync(string Passwordforvalidate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAllUsersbyUserType", ReplyAction="http://tempuri.org/IUserServices/GetAllUsersbyUserTypeResponse")]
        string GetAllUsersbyUserType(int userID, int usertypeID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAllUsersbyUserType", ReplyAction="http://tempuri.org/IUserServices/GetAllUsersbyUserTypeResponse")]
        System.Threading.Tasks.Task<string> GetAllUsersbyUserTypeAsync(int userID, int usertypeID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAllUsersbyUserTypeNew", ReplyAction="http://tempuri.org/IUserServices/GetAllUsersbyUserTypeNewResponse")]
        string GetAllUsersbyUserTypeNew(int userID, int usertypeID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAllUsersbyUserTypeNew", ReplyAction="http://tempuri.org/IUserServices/GetAllUsersbyUserTypeNewResponse")]
        System.Threading.Tasks.Task<string> GetAllUsersbyUserTypeNewAsync(int userID, int usertypeID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetCompletedResult", ReplyAction="http://tempuri.org/IUserServices/GetCompletedResultResponse")]
        string GetCompletedResult();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetCompletedResult", ReplyAction="http://tempuri.org/IUserServices/GetCompletedResultResponse")]
        System.Threading.Tasks.Task<string> GetCompletedResultAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetUserDetailsbyID", ReplyAction="http://tempuri.org/IUserServices/GetUserDetailsbyIDResponse")]
        string GetUserDetailsbyID(int userID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetUserDetailsbyID", ReplyAction="http://tempuri.org/IUserServices/GetUserDetailsbyIDResponse")]
        System.Threading.Tasks.Task<string> GetUserDetailsbyIDAsync(int userID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetMarketbyEventID", ReplyAction="http://tempuri.org/IUserServices/GetMarketbyEventIDResponse")]
        string GetMarketbyEventID(string EventID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetMarketbyEventID", ReplyAction="http://tempuri.org/IUserServices/GetMarketbyEventIDResponse")]
        System.Threading.Tasks.Task<string> GetMarketbyEventIDAsync(string EventID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetMarketbyEventID1", ReplyAction="http://tempuri.org/IUserServices/GetMarketbyEventID1Response")]
        string GetMarketbyEventID1(string EventID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetMarketbyEventID1", ReplyAction="http://tempuri.org/IUserServices/GetMarketbyEventID1Response")]
        System.Threading.Tasks.Task<string> GetMarketbyEventID1Async(string EventID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/SetDeleteStatusofUser", ReplyAction="http://tempuri.org/IUserServices/SetDeleteStatusofUserResponse")]
        string SetDeleteStatusofUser(int UserID, bool isDeleted, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/SetDeleteStatusofUser", ReplyAction="http://tempuri.org/IUserServices/SetDeleteStatusofUserResponse")]
        System.Threading.Tasks.Task<string> SetDeleteStatusofUserAsync(int UserID, bool isDeleted, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/SetBlockedStatusofUser", ReplyAction="http://tempuri.org/IUserServices/SetBlockedStatusofUserResponse")]
        string SetBlockedStatusofUser(int UserID, bool isBlocked, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/SetBlockedStatusofUser", ReplyAction="http://tempuri.org/IUserServices/SetBlockedStatusofUserResponse")]
        System.Threading.Tasks.Task<string> SetBlockedStatusofUserAsync(int UserID, bool isBlocked, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/ResetPasswordofUser", ReplyAction="http://tempuri.org/IUserServices/ResetPasswordofUserResponse")]
        string ResetPasswordofUser(int UserID, string Password, int Updatedby, System.DateTime updatedtime, string Passwordforvalidate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/ResetPasswordofUser", ReplyAction="http://tempuri.org/IUserServices/ResetPasswordofUserResponse")]
        System.Threading.Tasks.Task<string> ResetPasswordofUserAsync(int UserID, string Password, int Updatedby, System.DateTime updatedtime, string Passwordforvalidate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetUserMArket", ReplyAction="http://tempuri.org/IUserServices/GetUserMArketResponse")]
        string GetUserMArket(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetUserMArket", ReplyAction="http://tempuri.org/IUserServices/GetUserMArketResponse")]
        System.Threading.Tasks.Task<string> GetUserMArketAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/InsertUserMarket", ReplyAction="http://tempuri.org/IUserServices/InsertUserMarketResponse")]
        string InsertUserMarket(System.Collections.Generic.List<string> allmarketitems, int userID, int UpdatedbyID, bool DeleteOldMarkets);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/InsertUserMarket", ReplyAction="http://tempuri.org/IUserServices/InsertUserMarketResponse")]
        System.Threading.Tasks.Task<string> InsertUserMarketAsync(System.Collections.Generic.List<string> allmarketitems, int userID, int UpdatedbyID, bool DeleteOldMarkets);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/InsertUserMarketKJ", ReplyAction="http://tempuri.org/IUserServices/InsertUserMarketKJResponse")]
        string InsertUserMarketKJ(System.Collections.Generic.List<string> kalijutt, System.Collections.Generic.List<string> KaliCatelogIDs, System.Collections.Generic.List<string> selections, System.Collections.Generic.List<int> userIDs, string EventID, int UpdatedbyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/InsertUserMarketKJ", ReplyAction="http://tempuri.org/IUserServices/InsertUserMarketKJResponse")]
        System.Threading.Tasks.Task<string> InsertUserMarketKJAsync(System.Collections.Generic.List<string> kalijutt, System.Collections.Generic.List<string> KaliCatelogIDs, System.Collections.Generic.List<string> selections, System.Collections.Generic.List<int> userIDs, string EventID, int UpdatedbyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/InsertUserMarketSFig", ReplyAction="http://tempuri.org/IUserServices/InsertUserMarketSFigResponse")]
        string InsertUserMarketSFig(System.Collections.Generic.List<string> SmallFig, System.Collections.Generic.List<string> smallFigCatelogIDs, System.Collections.Generic.List<string> selections, System.Collections.Generic.List<int> userIDs, string EventID, int UpdatedbyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/InsertUserMarketSFig", ReplyAction="http://tempuri.org/IUserServices/InsertUserMarketSFigResponse")]
        System.Threading.Tasks.Task<string> InsertUserMarketSFigAsync(System.Collections.Generic.List<string> SmallFig, System.Collections.Generic.List<string> smallFigCatelogIDs, System.Collections.Generic.List<string> selections, System.Collections.Generic.List<int> userIDs, string EventID, int UpdatedbyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/InsertUserMarketFigure", ReplyAction="http://tempuri.org/IUserServices/InsertUserMarketFigureResponse")]
        string InsertUserMarketFigure(System.Collections.Generic.List<string> Figure, System.Collections.Generic.List<string> FigureCatelogIDs, System.Collections.Generic.List<string> Figureselections, System.Collections.Generic.List<string> FigureselectionsName, System.Collections.Generic.List<int> userIDs, string EventID, int UpdatedbyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/InsertUserMarketFigure", ReplyAction="http://tempuri.org/IUserServices/InsertUserMarketFigureResponse")]
        System.Threading.Tasks.Task<string> InsertUserMarketFigureAsync(System.Collections.Generic.List<string> Figure, System.Collections.Generic.List<string> FigureCatelogIDs, System.Collections.Generic.List<string> Figureselections, System.Collections.Generic.List<string> FigureselectionsName, System.Collections.Generic.List<int> userIDs, string EventID, int UpdatedbyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/InsertIndainFancy", ReplyAction="http://tempuri.org/IUserServices/InsertIndainFancyResponse")]
        string InsertIndainFancy(System.Collections.Generic.List<UserServiceReference.MarketBookForindianFancy> allmarkets, System.Collections.Generic.List<UserServiceReference.RunnerForIndianFancy> runners, System.Collections.Generic.List<int> userIDs, string EventID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/InsertIndainFancy", ReplyAction="http://tempuri.org/IUserServices/InsertIndainFancyResponse")]
        System.Threading.Tasks.Task<string> InsertIndainFancyAsync(System.Collections.Generic.List<UserServiceReference.MarketBookForindianFancy> allmarkets, System.Collections.Generic.List<UserServiceReference.RunnerForIndianFancy> runners, System.Collections.Generic.List<int> userIDs, string EventID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetUserMarketforSelection", ReplyAction="http://tempuri.org/IUserServices/GetUserMarketforSelectionResponse")]
        string GetUserMarketforSelection(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetUserMarketforSelection", ReplyAction="http://tempuri.org/IUserServices/GetUserMarketforSelectionResponse")]
        System.Threading.Tasks.Task<string> GetUserMarketforSelectionAsync(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetFavoriteEventTypes", ReplyAction="http://tempuri.org/IUserServices/GetFavoriteEventTypesResponse")]
        string GetFavoriteEventTypes(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetFavoriteEventTypes", ReplyAction="http://tempuri.org/IUserServices/GetFavoriteEventTypesResponse")]
        System.Threading.Tasks.Task<string> GetFavoriteEventTypesAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/AddtoFavoriteEventTypes", ReplyAction="http://tempuri.org/IUserServices/AddtoFavoriteEventTypesResponse")]
        void AddtoFavoriteEventTypes(string EventTypeID, int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/AddtoFavoriteEventTypes", ReplyAction="http://tempuri.org/IUserServices/AddtoFavoriteEventTypesResponse")]
        System.Threading.Tasks.Task AddtoFavoriteEventTypesAsync(string EventTypeID, int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/DeleteFromFavoriteEventTypes", ReplyAction="http://tempuri.org/IUserServices/DeleteFromFavoriteEventTypesResponse")]
        void DeleteFromFavoriteEventTypes(string EventTypeID, int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/DeleteFromFavoriteEventTypes", ReplyAction="http://tempuri.org/IUserServices/DeleteFromFavoriteEventTypesResponse")]
        System.Threading.Tasks.Task DeleteFromFavoriteEventTypesAsync(string EventTypeID, int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetFavoriteEvents", ReplyAction="http://tempuri.org/IUserServices/GetFavoriteEventsResponse")]
        string GetFavoriteEvents(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetFavoriteEvents", ReplyAction="http://tempuri.org/IUserServices/GetFavoriteEventsResponse")]
        System.Threading.Tasks.Task<string> GetFavoriteEventsAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/AddtoFavoriteEvents", ReplyAction="http://tempuri.org/IUserServices/AddtoFavoriteEventsResponse")]
        void AddtoFavoriteEvents(string EventID, int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/AddtoFavoriteEvents", ReplyAction="http://tempuri.org/IUserServices/AddtoFavoriteEventsResponse")]
        System.Threading.Tasks.Task AddtoFavoriteEventsAsync(string EventID, int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/DeleteFromFavoriteEvents", ReplyAction="http://tempuri.org/IUserServices/DeleteFromFavoriteEventsResponse")]
        void DeleteFromFavoriteEvents(string EventID, int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/DeleteFromFavoriteEvents", ReplyAction="http://tempuri.org/IUserServices/DeleteFromFavoriteEventsResponse")]
        System.Threading.Tasks.Task DeleteFromFavoriteEventsAsync(string EventID, int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetFavoriteCompetitions", ReplyAction="http://tempuri.org/IUserServices/GetFavoriteCompetitionsResponse")]
        string GetFavoriteCompetitions(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetFavoriteCompetitions", ReplyAction="http://tempuri.org/IUserServices/GetFavoriteCompetitionsResponse")]
        System.Threading.Tasks.Task<string> GetFavoriteCompetitionsAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/AddtoFavoriteCompetitions", ReplyAction="http://tempuri.org/IUserServices/AddtoFavoriteCompetitionsResponse")]
        void AddtoFavoriteCompetitions(string EventID, int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/AddtoFavoriteCompetitions", ReplyAction="http://tempuri.org/IUserServices/AddtoFavoriteCompetitionsResponse")]
        System.Threading.Tasks.Task AddtoFavoriteCompetitionsAsync(string EventID, int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/DeleteFromFavoriteCompetitions", ReplyAction="http://tempuri.org/IUserServices/DeleteFromFavoriteCompetitionsResponse")]
        void DeleteFromFavoriteCompetitions(string EventID, int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/DeleteFromFavoriteCompetitions", ReplyAction="http://tempuri.org/IUserServices/DeleteFromFavoriteCompetitionsResponse")]
        System.Threading.Tasks.Task DeleteFromFavoriteCompetitionsAsync(string EventID, int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetEventTypeIDs", ReplyAction="http://tempuri.org/IUserServices/GetEventTypeIDsResponse")]
        string GetEventTypeIDs(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetEventTypeIDs", ReplyAction="http://tempuri.org/IUserServices/GetEventTypeIDsResponse")]
        System.Threading.Tasks.Task<string> GetEventTypeIDsAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/getlistuserids", ReplyAction="http://tempuri.org/IUserServices/getlistuseridsResponse")]
        string getlistuserids(int createdid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/getlistuserids", ReplyAction="http://tempuri.org/IUserServices/getlistuseridsResponse")]
        System.Threading.Tasks.Task<string> getlistuseridsAsync(int createdid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetCompetitionIDs", ReplyAction="http://tempuri.org/IUserServices/GetCompetitionIDsResponse")]
        string GetCompetitionIDs(string eventTypeID, int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetCompetitionIDs", ReplyAction="http://tempuri.org/IUserServices/GetCompetitionIDsResponse")]
        System.Threading.Tasks.Task<string> GetCompetitionIDsAsync(string eventTypeID, int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetEventsIDs", ReplyAction="http://tempuri.org/IUserServices/GetEventsIDsResponse")]
        string GetEventsIDs(string CompetitionID, int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetEventsIDs", ReplyAction="http://tempuri.org/IUserServices/GetEventsIDsResponse")]
        System.Threading.Tasks.Task<string> GetEventsIDsAsync(string CompetitionID, int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetMarketCatalogueIDs", ReplyAction="http://tempuri.org/IUserServices/GetMarketCatalogueIDsResponse")]
        string GetMarketCatalogueIDs(string eventID, int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetMarketCatalogueIDs", ReplyAction="http://tempuri.org/IUserServices/GetMarketCatalogueIDsResponse")]
        System.Threading.Tasks.Task<string> GetMarketCatalogueIDsAsync(string eventID, int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/InsertUserBet", ReplyAction="http://tempuri.org/IUserServices/InsertUserBetResponse")]
        string InsertUserBet(
                    string SelectionID, 
                    int userID, 
                    string UserOdd, 
                    string amount, 
                    string bettype, 
                    string LiveOdd, 
                    bool ismatched, 
                    string status, 
                    string marketbookId, 
                    System.DateTime createddate, 
                    System.DateTime updatedtime, 
                    string Selectionname, 
                    string Marketbookname, 
                    string Liability, 
                    string BetSize, 
                    decimal PendingAmount, 
                    string location, 
                    long ParentID, 
                    decimal MaxOddBack, 
                    decimal MaxOddLay, 
                    bool CheckforMaxOddBack, 
                    bool CheckforMaxOddLay, 
                    string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/InsertUserBet", ReplyAction="http://tempuri.org/IUserServices/InsertUserBetResponse")]
        System.Threading.Tasks.Task<string> InsertUserBetAsync(
                    string SelectionID, 
                    int userID, 
                    string UserOdd, 
                    string amount, 
                    string bettype, 
                    string LiveOdd, 
                    bool ismatched, 
                    string status, 
                    string marketbookId, 
                    System.DateTime createddate, 
                    System.DateTime updatedtime, 
                    string Selectionname, 
                    string Marketbookname, 
                    string Liability, 
                    string BetSize, 
                    decimal PendingAmount, 
                    string location, 
                    long ParentID, 
                    decimal MaxOddBack, 
                    decimal MaxOddLay, 
                    bool CheckforMaxOddBack, 
                    bool CheckforMaxOddLay, 
                    string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/InsertUserBetAdmin", ReplyAction="http://tempuri.org/IUserServices/InsertUserBetAdminResponse")]
        string InsertUserBetAdmin(
                    string SelectionID, 
                    int userID, 
                    string UserOdd, 
                    string amount, 
                    string bettype, 
                    string LiveOdd, 
                    bool ismatched, 
                    string status, 
                    string marketbookId, 
                    System.DateTime createddate, 
                    System.DateTime updatedtime, 
                    string Selectionname, 
                    string Marketbookname, 
                    string Liability, 
                    string BetSize, 
                    decimal PendingAmount, 
                    string location, 
                    long ParentID, 
                    string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/InsertUserBetAdmin", ReplyAction="http://tempuri.org/IUserServices/InsertUserBetAdminResponse")]
        System.Threading.Tasks.Task<string> InsertUserBetAdminAsync(
                    string SelectionID, 
                    int userID, 
                    string UserOdd, 
                    string amount, 
                    string bettype, 
                    string LiveOdd, 
                    bool ismatched, 
                    string status, 
                    string marketbookId, 
                    System.DateTime createddate, 
                    System.DateTime updatedtime, 
                    string Selectionname, 
                    string Marketbookname, 
                    string Liability, 
                    string BetSize, 
                    decimal PendingAmount, 
                    string location, 
                    long ParentID, 
                    string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateUserBet", ReplyAction="http://tempuri.org/IUserServices/UpdateUserBetResponse")]
        bool UpdateUserBet(long ID, int userID, string UserOdd, string amount, string bettype, string LiveOdd, bool ismatched, string status, string marketbookId, System.DateTime createddate, System.DateTime updatedtime, string Liabality, string BetSize, decimal PendingAmount, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateUserBet", ReplyAction="http://tempuri.org/IUserServices/UpdateUserBetResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserBetAsync(long ID, int userID, string UserOdd, string amount, string bettype, string LiveOdd, bool ismatched, string status, string marketbookId, System.DateTime createddate, System.DateTime updatedtime, string Liabality, string BetSize, decimal PendingAmount, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetUserbetsbyUserIDandMarketID", ReplyAction="http://tempuri.org/IUserServices/GetUserbetsbyUserIDandMarketIDResponse")]
        string GetUserbetsbyUserIDandMarketID(int UserID, string MarketID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetUserbetsbyUserIDandMarketID", ReplyAction="http://tempuri.org/IUserServices/GetUserbetsbyUserIDandMarketIDResponse")]
        System.Threading.Tasks.Task<string> GetUserbetsbyUserIDandMarketIDAsync(int UserID, string MarketID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetBetHistry", ReplyAction="http://tempuri.org/IUserServices/GetBetHistryResponse")]
        string GetBetHistry(int UserID, string frmdate, string todate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetBetHistry", ReplyAction="http://tempuri.org/IUserServices/GetBetHistryResponse")]
        System.Threading.Tasks.Task<string> GetBetHistryAsync(int UserID, string frmdate, string todate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetMaxOddBackandLay", ReplyAction="http://tempuri.org/IUserServices/GetMaxOddBackandLayResponse")]
        UserServiceReference.SP_Users_GetMaxOddBackandLay_Result GetMaxOddBackandLay(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetMaxOddBackandLay", ReplyAction="http://tempuri.org/IUserServices/GetMaxOddBackandLayResponse")]
        System.Threading.Tasks.Task<UserServiceReference.SP_Users_GetMaxOddBackandLay_Result> GetMaxOddBackandLayAsync(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetMaxOddBackandLayStr", ReplyAction="http://tempuri.org/IUserServices/GetMaxOddBackandLayStrResponse")]
        string GetMaxOddBackandLayStr(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetMaxOddBackandLayStr", ReplyAction="http://tempuri.org/IUserServices/GetMaxOddBackandLayStrResponse")]
        System.Threading.Tasks.Task<string> GetMaxOddBackandLayStrAsync(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetUserbetsbyUserID", ReplyAction="http://tempuri.org/IUserServices/GetUserbetsbyUserIDResponse")]
        string GetUserbetsbyUserID(int UserID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetUserbetsbyUserID", ReplyAction="http://tempuri.org/IUserServices/GetUserbetsbyUserIDResponse")]
        System.Threading.Tasks.Task<string> GetUserbetsbyUserIDAsync(int UserID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateUserBetMatched", ReplyAction="http://tempuri.org/IUserServices/UpdateUserBetMatchedResponse")]
        void UpdateUserBetMatched(System.Collections.Generic.List<long> ID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateUserBetMatched", ReplyAction="http://tempuri.org/IUserServices/UpdateUserBetMatchedResponse")]
        System.Threading.Tasks.Task UpdateUserBetMatchedAsync(System.Collections.Generic.List<long> ID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetCurrentLiabality", ReplyAction="http://tempuri.org/IUserServices/GetCurrentLiabalityResponse")]
        string GetCurrentLiabality(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetCurrentLiabality", ReplyAction="http://tempuri.org/IUserServices/GetCurrentLiabalityResponse")]
        System.Threading.Tasks.Task<string> GetCurrentLiabalityAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAgentRate", ReplyAction="http://tempuri.org/IUserServices/GetAgentRateResponse")]
        string GetAgentRate(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAgentRate", ReplyAction="http://tempuri.org/IUserServices/GetAgentRateResponse")]
        System.Threading.Tasks.Task<string> GetAgentRateAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetSuperName", ReplyAction="http://tempuri.org/IUserServices/GetSuperNameResponse")]
        string GetSuperName(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetSuperName", ReplyAction="http://tempuri.org/IUserServices/GetSuperNameResponse")]
        System.Threading.Tasks.Task<string> GetSuperNameAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/CheckforMatchCompleted", ReplyAction="http://tempuri.org/IUserServices/CheckforMatchCompletedResponse")]
        void CheckforMatchCompleted();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/CheckforMatchCompleted", ReplyAction="http://tempuri.org/IUserServices/CheckforMatchCompletedResponse")]
        System.Threading.Tasks.Task CheckforMatchCompletedAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/CloseAllClosedMarkets", ReplyAction="http://tempuri.org/IUserServices/CloseAllClosedMarketsResponse")]
        void CloseAllClosedMarkets();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/CloseAllClosedMarkets", ReplyAction="http://tempuri.org/IUserServices/CloseAllClosedMarketsResponse")]
        System.Threading.Tasks.Task CloseAllClosedMarketsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/SetAgentRateofUser", ReplyAction="http://tempuri.org/IUserServices/SetAgentRateofUserResponse")]
        string SetAgentRateofUser(int UserID, string AgentRate, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/SetAgentRateofUser", ReplyAction="http://tempuri.org/IUserServices/SetAgentRateofUserResponse")]
        System.Threading.Tasks.Task<string> SetAgentRateofUserAsync(int UserID, string AgentRate, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateUserBetUnMatchedStatusTocomplete", ReplyAction="http://tempuri.org/IUserServices/UpdateUserBetUnMatchedStatusTocompleteResponse")]
        void UpdateUserBetUnMatchedStatusTocomplete(System.Collections.Generic.List<long> ID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateUserBetUnMatchedStatusTocomplete", ReplyAction="http://tempuri.org/IUserServices/UpdateUserBetUnMatchedStatusTocompleteResponse")]
        System.Threading.Tasks.Task UpdateUserBetUnMatchedStatusTocompleteAsync(System.Collections.Generic.List<long> ID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateUserBetUnMatchedStatusTocompleteforCutting" +
            "User", ReplyAction="http://tempuri.org/IUserServices/UpdateUserBetUnMatchedStatusTocompleteforCutting" +
            "UserResponse")]
        void UpdateUserBetUnMatchedStatusTocompleteforCuttingUser(long ID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateUserBetUnMatchedStatusTocompleteforCutting" +
            "User", ReplyAction="http://tempuri.org/IUserServices/UpdateUserBetUnMatchedStatusTocompleteforCutting" +
            "UserResponse")]
        System.Threading.Tasks.Task UpdateUserBetUnMatchedStatusTocompleteforCuttingUserAsync(long ID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetMarketsOpenedbyUser", ReplyAction="http://tempuri.org/IUserServices/GetMarketsOpenedbyUserResponse")]
        string GetMarketsOpenedbyUser(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetMarketsOpenedbyUser", ReplyAction="http://tempuri.org/IUserServices/GetMarketsOpenedbyUserResponse")]
        System.Threading.Tasks.Task<string> GetMarketsOpenedbyUserAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/SetMarketBookOpenbyUSer", ReplyAction="http://tempuri.org/IUserServices/SetMarketBookOpenbyUSerResponse")]
        void SetMarketBookOpenbyUSer(int userID, string MarketBookID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/SetMarketBookOpenbyUSer", ReplyAction="http://tempuri.org/IUserServices/SetMarketBookOpenbyUSerResponse")]
        System.Threading.Tasks.Task SetMarketBookOpenbyUSerAsync(int userID, string MarketBookID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/SetMarketBookOpenbyUSerandGet", ReplyAction="http://tempuri.org/IUserServices/SetMarketBookOpenbyUSerandGetResponse")]
        string SetMarketBookOpenbyUSerandGet(int userID, string MarketBookID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/SetMarketBookOpenbyUSerandGet", ReplyAction="http://tempuri.org/IUserServices/SetMarketBookOpenbyUSerandGetResponse")]
        System.Threading.Tasks.Task<string> SetMarketBookOpenbyUSerandGetAsync(int userID, string MarketBookID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/SetMarketBookOpenbyUSerandGet0", ReplyAction="http://tempuri.org/IUserServices/SetMarketBookOpenbyUSerandGet0Response")]
        string SetMarketBookOpenbyUSerandGet0(int userID, string MarketBookID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/SetMarketBookOpenbyUSerandGet0", ReplyAction="http://tempuri.org/IUserServices/SetMarketBookOpenbyUSerandGet0Response")]
        System.Threading.Tasks.Task<string> SetMarketBookOpenbyUSerandGet0Async(int userID, string MarketBookID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/SetMarketBookOpenbyUSerandGet1", ReplyAction="http://tempuri.org/IUserServices/SetMarketBookOpenbyUSerandGet1Response")]
        string SetMarketBookOpenbyUSerandGet1(int userID, string MarketBookID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/SetMarketBookOpenbyUSerandGet1", ReplyAction="http://tempuri.org/IUserServices/SetMarketBookOpenbyUSerandGet1Response")]
        System.Threading.Tasks.Task<string> SetMarketBookOpenbyUSerandGet1Async(int userID, string MarketBookID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/SetMarketBookOpenbyUSerandGet2", ReplyAction="http://tempuri.org/IUserServices/SetMarketBookOpenbyUSerandGet2Response")]
        string SetMarketBookOpenbyUSerandGet2(int userID, string MarketBookID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/SetMarketBookOpenbyUSerandGet2", ReplyAction="http://tempuri.org/IUserServices/SetMarketBookOpenbyUSerandGet2Response")]
        System.Threading.Tasks.Task<string> SetMarketBookOpenbyUSerandGet2Async(int userID, string MarketBookID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/SetMarketBookClosedbyUser", ReplyAction="http://tempuri.org/IUserServices/SetMarketBookClosedbyUserResponse")]
        void SetMarketBookClosedbyUser(int userID, string MarketBookID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/SetMarketBookClosedbyUser", ReplyAction="http://tempuri.org/IUserServices/SetMarketBookClosedbyUserResponse")]
        System.Threading.Tasks.Task SetMarketBookClosedbyUserAsync(int userID, string MarketBookID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/SetMarketClosedAllUsers", ReplyAction="http://tempuri.org/IUserServices/SetMarketClosedAllUsersResponse")]
        void SetMarketClosedAllUsers(string MarketbookID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/SetMarketClosedAllUsers", ReplyAction="http://tempuri.org/IUserServices/SetMarketClosedAllUsersResponse")]
        System.Threading.Tasks.Task SetMarketClosedAllUsersAsync(string MarketbookID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetSelectionNamesbyMarketID", ReplyAction="http://tempuri.org/IUserServices/GetSelectionNamesbyMarketIDResponse")]
        System.Collections.Generic.List<UserServiceReference.SP_MarketCatalogueSelections_Get_Result> GetSelectionNamesbyMarketID(string MarketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetSelectionNamesbyMarketID", ReplyAction="http://tempuri.org/IUserServices/GetSelectionNamesbyMarketIDResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<UserServiceReference.SP_MarketCatalogueSelections_Get_Result>> GetSelectionNamesbyMarketIDAsync(string MarketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAccountsDatabyUserIDandDateRange", ReplyAction="http://tempuri.org/IUserServices/GetAccountsDatabyUserIDandDateRangeResponse")]
        string GetAccountsDatabyUserIDandDateRange(int userID, string From, string To, bool isCreditAmount, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAccountsDatabyUserIDandDateRange", ReplyAction="http://tempuri.org/IUserServices/GetAccountsDatabyUserIDandDateRangeResponse")]
        System.Threading.Tasks.Task<string> GetAccountsDatabyUserIDandDateRangeAsync(int userID, string From, string To, bool isCreditAmount, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAccountsDatabyCreatedByID", ReplyAction="http://tempuri.org/IUserServices/GetAccountsDatabyCreatedByIDResponse")]
        string GetAccountsDatabyCreatedByID(int userID, bool isCreditAmount, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAccountsDatabyCreatedByID", ReplyAction="http://tempuri.org/IUserServices/GetAccountsDatabyCreatedByIDResponse")]
        System.Threading.Tasks.Task<string> GetAccountsDatabyCreatedByIDAsync(int userID, bool isCreditAmount, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAccountsDatabyCreatedByIDForSuper", ReplyAction="http://tempuri.org/IUserServices/GetAccountsDatabyCreatedByIDForSuperResponse")]
        string GetAccountsDatabyCreatedByIDForSuper(int userID, bool isCreditAmount, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAccountsDatabyCreatedByIDForSuper", ReplyAction="http://tempuri.org/IUserServices/GetAccountsDatabyCreatedByIDForSuperResponse")]
        System.Threading.Tasks.Task<string> GetAccountsDatabyCreatedByIDForSuperAsync(int userID, bool isCreditAmount, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAccountsDatabyCreatedByIDForSamiAdmin", ReplyAction="http://tempuri.org/IUserServices/GetAccountsDatabyCreatedByIDForSamiAdminResponse" +
            "")]
        string GetAccountsDatabyCreatedByIDForSamiAdmin(int userID, bool isCreditAmount, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAccountsDatabyCreatedByIDForSamiAdmin", ReplyAction="http://tempuri.org/IUserServices/GetAccountsDatabyCreatedByIDForSamiAdminResponse" +
            "")]
        System.Threading.Tasks.Task<string> GetAccountsDatabyCreatedByIDForSamiAdminAsync(int userID, bool isCreditAmount, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAccountsDataForAdmin", ReplyAction="http://tempuri.org/IUserServices/GetAccountsDataForAdminResponse")]
        string GetAccountsDataForAdmin(int UserID, bool isCreditAmount, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAccountsDataForAdmin", ReplyAction="http://tempuri.org/IUserServices/GetAccountsDataForAdminResponse")]
        System.Threading.Tasks.Task<string> GetAccountsDataForAdminAsync(int UserID, bool isCreditAmount, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetProfitorLossbyUserID", ReplyAction="http://tempuri.org/IUserServices/GetProfitorLossbyUserIDResponse")]
        decimal GetProfitorLossbyUserID(int userID, bool isCreditAmount, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetProfitorLossbyUserID", ReplyAction="http://tempuri.org/IUserServices/GetProfitorLossbyUserIDResponse")]
        System.Threading.Tasks.Task<decimal> GetProfitorLossbyUserIDAsync(int userID, bool isCreditAmount, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetProfitorLossforSuper", ReplyAction="http://tempuri.org/IUserServices/GetProfitorLossforSuperResponse")]
        decimal GetProfitorLossforSuper(int userID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetProfitorLossforSuper", ReplyAction="http://tempuri.org/IUserServices/GetProfitorLossforSuperResponse")]
        System.Threading.Tasks.Task<decimal> GetProfitorLossforSuperAsync(int userID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAccountsDataForCommisionaccount", ReplyAction="http://tempuri.org/IUserServices/GetAccountsDataForCommisionaccountResponse")]
        string GetAccountsDataForCommisionaccount(string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAccountsDataForCommisionaccount", ReplyAction="http://tempuri.org/IUserServices/GetAccountsDataForCommisionaccountResponse")]
        System.Threading.Tasks.Task<string> GetAccountsDataForCommisionaccountAsync(string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/DownloadAllMarketHorseRace", ReplyAction="http://tempuri.org/IUserServices/DownloadAllMarketHorseRaceResponse")]
        void DownloadAllMarketHorseRace(string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/DownloadAllMarketHorseRace", ReplyAction="http://tempuri.org/IUserServices/DownloadAllMarketHorseRaceResponse")]
        System.Threading.Tasks.Task DownloadAllMarketHorseRaceAsync(string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/DownloadAllMarketGrayHoundRace", ReplyAction="http://tempuri.org/IUserServices/DownloadAllMarketGrayHoundRaceResponse")]
        void DownloadAllMarketGrayHoundRace(string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/DownloadAllMarketGrayHoundRace", ReplyAction="http://tempuri.org/IUserServices/DownloadAllMarketGrayHoundRaceResponse")]
        System.Threading.Tasks.Task DownloadAllMarketGrayHoundRaceAsync(string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateUserbetamountbyID", ReplyAction="http://tempuri.org/IUserServices/UpdateUserbetamountbyIDResponse")]
        bool UpdateUserbetamountbyID(long ID, decimal amount, bool ismatched, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateUserbetamountbyID", ReplyAction="http://tempuri.org/IUserServices/UpdateUserbetamountbyIDResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserbetamountbyIDAsync(long ID, decimal amount, bool ismatched, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetInPlayMatches", ReplyAction="http://tempuri.org/IUserServices/GetInPlayMatchesResponse")]
        string GetInPlayMatches(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetInPlayMatches", ReplyAction="http://tempuri.org/IUserServices/GetInPlayMatchesResponse")]
        System.Threading.Tasks.Task<string> GetInPlayMatchesAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetInPlayMatcheswithRunners", ReplyAction="http://tempuri.org/IUserServices/GetInPlayMatcheswithRunnersResponse")]
        string GetInPlayMatcheswithRunners(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetInPlayMatcheswithRunners", ReplyAction="http://tempuri.org/IUserServices/GetInPlayMatcheswithRunnersResponse")]
        System.Threading.Tasks.Task<string> GetInPlayMatcheswithRunnersAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetInPlayMatcheswithRunners1", ReplyAction="http://tempuri.org/IUserServices/GetInPlayMatcheswithRunners1Response")]
        string GetInPlayMatcheswithRunners1(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetInPlayMatcheswithRunners1", ReplyAction="http://tempuri.org/IUserServices/GetInPlayMatcheswithRunners1Response")]
        System.Threading.Tasks.Task<string> GetInPlayMatcheswithRunners1Async(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAllMatches", ReplyAction="http://tempuri.org/IUserServices/GetAllMatchesResponse")]
        string GetAllMatches(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAllMatches", ReplyAction="http://tempuri.org/IUserServices/GetAllMatchesResponse")]
        System.Threading.Tasks.Task<string> GetAllMatchesAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAllCricketMatches", ReplyAction="http://tempuri.org/IUserServices/GetAllCricketMatchesResponse")]
        string GetAllCricketMatches(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAllCricketMatches", ReplyAction="http://tempuri.org/IUserServices/GetAllCricketMatchesResponse")]
        System.Threading.Tasks.Task<string> GetAllCricketMatchesAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAllSoccerMatches", ReplyAction="http://tempuri.org/IUserServices/GetAllSoccerMatchesResponse")]
        string GetAllSoccerMatches(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAllSoccerMatches", ReplyAction="http://tempuri.org/IUserServices/GetAllSoccerMatchesResponse")]
        System.Threading.Tasks.Task<string> GetAllSoccerMatchesAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAllTennisMatches", ReplyAction="http://tempuri.org/IUserServices/GetAllTennisMatchesResponse")]
        string GetAllTennisMatches(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAllTennisMatches", ReplyAction="http://tempuri.org/IUserServices/GetAllTennisMatchesResponse")]
        System.Threading.Tasks.Task<string> GetAllTennisMatchesAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateUserbetamountbyParentID", ReplyAction="http://tempuri.org/IUserServices/UpdateUserbetamountbyParentIDResponse")]
        bool UpdateUserbetamountbyParentID(long ID, decimal amount, string userodd, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateUserbetamountbyParentID", ReplyAction="http://tempuri.org/IUserServices/UpdateUserbetamountbyParentIDResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserbetamountbyParentIDAsync(long ID, decimal amount, string userodd, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetUserBetsbyAgentID", ReplyAction="http://tempuri.org/IUserServices/GetUserBetsbyAgentIDResponse")]
        string GetUserBetsbyAgentID(int AgentID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetUserBetsbyAgentID", ReplyAction="http://tempuri.org/IUserServices/GetUserBetsbyAgentIDResponse")]
        System.Threading.Tasks.Task<string> GetUserBetsbyAgentIDAsync(int AgentID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetUserBetsbySuperID", ReplyAction="http://tempuri.org/IUserServices/GetUserBetsbySuperIDResponse")]
        string GetUserBetsbySuperID(int SuperID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetUserBetsbySuperID", ReplyAction="http://tempuri.org/IUserServices/GetUserBetsbySuperIDResponse")]
        System.Threading.Tasks.Task<string> GetUserBetsbySuperIDAsync(int SuperID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetUserBetsbySamiAdmin", ReplyAction="http://tempuri.org/IUserServices/GetUserBetsbySamiAdminResponse")]
        string GetUserBetsbySamiAdmin(int SuperID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetUserBetsbySamiAdmin", ReplyAction="http://tempuri.org/IUserServices/GetUserBetsbySamiAdminResponse")]
        System.Threading.Tasks.Task<string> GetUserBetsbySamiAdminAsync(int SuperID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetUserBetsbyAgentIDwithZeroReferer", ReplyAction="http://tempuri.org/IUserServices/GetUserBetsbyAgentIDwithZeroRefererResponse")]
        string GetUserBetsbyAgentIDwithZeroReferer(int AgentID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetUserBetsbyAgentIDwithZeroReferer", ReplyAction="http://tempuri.org/IUserServices/GetUserBetsbyAgentIDwithZeroRefererResponse")]
        System.Threading.Tasks.Task<string> GetUserBetsbyAgentIDwithZeroRefererAsync(int AgentID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetUserbetsbyUserIDandAgentID", ReplyAction="http://tempuri.org/IUserServices/GetUserbetsbyUserIDandAgentIDResponse")]
        string GetUserbetsbyUserIDandAgentID(int AgentID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetUserbetsbyUserIDandAgentID", ReplyAction="http://tempuri.org/IUserServices/GetUserbetsbyUserIDandAgentIDResponse")]
        System.Threading.Tasks.Task<string> GetUserbetsbyUserIDandAgentIDAsync(int AgentID, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetUserbetsForAdmin", ReplyAction="http://tempuri.org/IUserServices/GetUserbetsForAdminResponse")]
        string GetUserbetsForAdmin(string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetUserbetsForAdmin", ReplyAction="http://tempuri.org/IUserServices/GetUserbetsForAdminResponse")]
        System.Threading.Tasks.Task<string> GetUserbetsForAdminAsync(string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetMarketsOpenedbyUsersofAgent", ReplyAction="http://tempuri.org/IUserServices/GetMarketsOpenedbyUsersofAgentResponse")]
        string GetMarketsOpenedbyUsersofAgent(int AgentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetMarketsOpenedbyUsersofAgent", ReplyAction="http://tempuri.org/IUserServices/GetMarketsOpenedbyUsersofAgentResponse")]
        System.Threading.Tasks.Task<string> GetMarketsOpenedbyUsersofAgentAsync(int AgentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetMarketsOpenedbyUsersForAdmin", ReplyAction="http://tempuri.org/IUserServices/GetMarketsOpenedbyUsersForAdminResponse")]
        string GetMarketsOpenedbyUsersForAdmin();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetMarketsOpenedbyUsersForAdmin", ReplyAction="http://tempuri.org/IUserServices/GetMarketsOpenedbyUsersForAdminResponse")]
        System.Threading.Tasks.Task<string> GetMarketsOpenedbyUsersForAdminAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/SetLoggedinStatus", ReplyAction="http://tempuri.org/IUserServices/SetLoggedinStatusResponse")]
        void SetLoggedinStatus(int userID, bool LoggedIn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/SetLoggedinStatus", ReplyAction="http://tempuri.org/IUserServices/SetLoggedinStatusResponse")]
        System.Threading.Tasks.Task SetLoggedinStatusAsync(int userID, bool LoggedIn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetCompletedMatchedBetsbyUserID", ReplyAction="http://tempuri.org/IUserServices/GetCompletedMatchedBetsbyUserIDResponse")]
        string GetCompletedMatchedBetsbyUserID(int UserID, string MarketbookID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetCompletedMatchedBetsbyUserID", ReplyAction="http://tempuri.org/IUserServices/GetCompletedMatchedBetsbyUserIDResponse")]
        System.Threading.Tasks.Task<string> GetCompletedMatchedBetsbyUserIDAsync(int UserID, string MarketbookID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAllUserMarketbyUserID", ReplyAction="http://tempuri.org/IUserServices/GetAllUserMarketbyUserIDResponse")]
        string GetAllUserMarketbyUserID(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAllUserMarketbyUserID", ReplyAction="http://tempuri.org/IUserServices/GetAllUserMarketbyUserIDResponse")]
        System.Threading.Tasks.Task<string> GetAllUserMarketbyUserIDAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetUserStatus", ReplyAction="http://tempuri.org/IUserServices/GetUserStatusResponse")]
        string GetUserStatus(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetUserStatus", ReplyAction="http://tempuri.org/IUserServices/GetUserStatusResponse")]
        System.Threading.Tasks.Task<string> GetUserStatusAsync(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetLastLoginTimes", ReplyAction="http://tempuri.org/IUserServices/GetLastLoginTimesResponse")]
        string GetLastLoginTimes(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetLastLoginTimes", ReplyAction="http://tempuri.org/IUserServices/GetLastLoginTimesResponse")]
        System.Threading.Tasks.Task<string> GetLastLoginTimesAsync(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateBetSizebyID", ReplyAction="http://tempuri.org/IUserServices/UpdateBetSizebyIDResponse")]
        void UpdateBetSizebyID(long ID, string BetSize, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateBetSizebyID", ReplyAction="http://tempuri.org/IUserServices/UpdateBetSizebyIDResponse")]
        System.Threading.Tasks.Task UpdateBetSizebyIDAsync(long ID, string BetSize, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetUnMatchedBets", ReplyAction="http://tempuri.org/IUserServices/GetUnMatchedBetsResponse")]
        string GetUnMatchedBets(string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetUnMatchedBets", ReplyAction="http://tempuri.org/IUserServices/GetUnMatchedBetsResponse")]
        System.Threading.Tasks.Task<string> GetUnMatchedBetsAsync(string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetSheetNamebyMarketID", ReplyAction="http://tempuri.org/IUserServices/GetSheetNamebyMarketIDResponse")]
        string GetSheetNamebyMarketID(string marketbookID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetSheetNamebyMarketID", ReplyAction="http://tempuri.org/IUserServices/GetSheetNamebyMarketIDResponse")]
        System.Threading.Tasks.Task<string> GetSheetNamebyMarketIDAsync(string marketbookID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateBetLowerLimit", ReplyAction="http://tempuri.org/IUserServices/UpdateBetLowerLimitResponse")]
        void UpdateBetLowerLimit(
                    int userID, 
                    decimal BetLowerLimit, 
                    decimal BetUpperLimit, 
                    bool isAllowedGrayHound, 
                    bool isAllowedHorse, 
                    decimal BetLowerLimitHorsePlace, 
                    decimal BetUpperLimitHorsePlace, 
                    decimal BetLowerLimitGrayHoundWin, 
                    decimal BetUpperLimitGrayHoundWin, 
                    decimal BetLowerLimitGrayHoundPlace, 
                    decimal BetUpperLimitGrayHoundPlace, 
                    decimal BetLowerLimitMatchOdds, 
                    decimal BetUpperLimitMatchOdds, 
                    decimal BetLowerLimitInningsRunns, 
                    decimal BetUpperLimitInningsRunns, 
                    decimal BetLowerLimitCompletedMatch, 
                    decimal BetUpperLimitCompletedMatch, 
                    bool isTennisAllowed, 
                    bool isSoccerAllowed, 
                    int CommissionRate, 
                    decimal BetLowerLimitMatchOddsSoccer, 
                    decimal BetUpperLimitMatchOddsSoccer, 
                    decimal BetLowerLimitMatchOddsTennis, 
                    decimal BetUpperLimitMatchOddsTennis, 
                    decimal BetUpperLimitTiedMatch, 
                    decimal BetLowerLimitTiedMatch, 
                    decimal BetUpperLimitWinner, 
                    decimal BetLowerLimitWinner, 
                    string Password, 
                    decimal BetUpperLimitFancy, 
                    decimal BetLowerLimitFancy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateBetLowerLimit", ReplyAction="http://tempuri.org/IUserServices/UpdateBetLowerLimitResponse")]
        System.Threading.Tasks.Task UpdateBetLowerLimitAsync(
                    int userID, 
                    decimal BetLowerLimit, 
                    decimal BetUpperLimit, 
                    bool isAllowedGrayHound, 
                    bool isAllowedHorse, 
                    decimal BetLowerLimitHorsePlace, 
                    decimal BetUpperLimitHorsePlace, 
                    decimal BetLowerLimitGrayHoundWin, 
                    decimal BetUpperLimitGrayHoundWin, 
                    decimal BetLowerLimitGrayHoundPlace, 
                    decimal BetUpperLimitGrayHoundPlace, 
                    decimal BetLowerLimitMatchOdds, 
                    decimal BetUpperLimitMatchOdds, 
                    decimal BetLowerLimitInningsRunns, 
                    decimal BetUpperLimitInningsRunns, 
                    decimal BetLowerLimitCompletedMatch, 
                    decimal BetUpperLimitCompletedMatch, 
                    bool isTennisAllowed, 
                    bool isSoccerAllowed, 
                    int CommissionRate, 
                    decimal BetLowerLimitMatchOddsSoccer, 
                    decimal BetUpperLimitMatchOddsSoccer, 
                    decimal BetLowerLimitMatchOddsTennis, 
                    decimal BetUpperLimitMatchOddsTennis, 
                    decimal BetUpperLimitTiedMatch, 
                    decimal BetLowerLimitTiedMatch, 
                    decimal BetUpperLimitWinner, 
                    decimal BetLowerLimitWinner, 
                    string Password, 
                    decimal BetUpperLimitFancy, 
                    decimal BetLowerLimitFancy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateCheckConditionforPlaceBet", ReplyAction="http://tempuri.org/IUserServices/UpdateCheckConditionforPlaceBetResponse")]
        void UpdateCheckConditionforPlaceBet(int UserID, bool CheckConditionforPlaceBet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateCheckConditionforPlaceBet", ReplyAction="http://tempuri.org/IUserServices/UpdateCheckConditionforPlaceBetResponse")]
        System.Threading.Tasks.Task UpdateCheckConditionforPlaceBetAsync(int UserID, bool CheckConditionforPlaceBet);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetTodayHorseRacing", ReplyAction="http://tempuri.org/IUserServices/GetTodayHorseRacingResponse")]
        string GetTodayHorseRacing(int UserID, string EventTypeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetTodayHorseRacing", ReplyAction="http://tempuri.org/IUserServices/GetTodayHorseRacingResponse")]
        System.Threading.Tasks.Task<string> GetTodayHorseRacingAsync(int UserID, string EventTypeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetTodayHorseRacingNew", ReplyAction="http://tempuri.org/IUserServices/GetTodayHorseRacingNewResponse")]
        string GetTodayHorseRacingNew(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetTodayHorseRacingNew", ReplyAction="http://tempuri.org/IUserServices/GetTodayHorseRacingNewResponse")]
        System.Threading.Tasks.Task<string> GetTodayHorseRacingNewAsync(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetTvLinks", ReplyAction="http://tempuri.org/IUserServices/GetTvLinksResponse")]
        string GetTvLinks(string eventID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetTvLinks", ReplyAction="http://tempuri.org/IUserServices/GetTvLinksResponse")]
        System.Threading.Tasks.Task<string> GetTvLinksAsync(string eventID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetDistinctmarketopened", ReplyAction="http://tempuri.org/IUserServices/GetDistinctmarketopenedResponse")]
        string GetDistinctmarketopened();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetDistinctmarketopened", ReplyAction="http://tempuri.org/IUserServices/GetDistinctmarketopenedResponse")]
        System.Threading.Tasks.Task<string> GetDistinctmarketopenedAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateOddsData", ReplyAction="http://tempuri.org/IUserServices/UpdateOddsDataResponse")]
        void UpdateOddsData(string oddsdata, string Oddtype);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateOddsData", ReplyAction="http://tempuri.org/IUserServices/UpdateOddsDataResponse")]
        System.Threading.Tasks.Task UpdateOddsDataAsync(string oddsdata, string Oddtype);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetCommissionRatebyUserID", ReplyAction="http://tempuri.org/IUserServices/GetCommissionRatebyUserIDResponse")]
        int GetCommissionRatebyUserID(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetCommissionRatebyUserID", ReplyAction="http://tempuri.org/IUserServices/GetCommissionRatebyUserIDResponse")]
        System.Threading.Tasks.Task<int> GetCommissionRatebyUserIDAsync(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateUserPhoneandNamebyUserId", ReplyAction="http://tempuri.org/IUserServices/UpdateUserPhoneandNamebyUserIdResponse")]
        void UpdateUserPhoneandNamebyUserId(int userId, string Name, string Phone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateUserPhoneandNamebyUserId", ReplyAction="http://tempuri.org/IUserServices/UpdateUserPhoneandNamebyUserIdResponse")]
        System.Threading.Tasks.Task UpdateUserPhoneandNamebyUserIdAsync(int userId, string Name, string Phone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAccountsDatabyEventtypeuserIDandDateRange", ReplyAction="http://tempuri.org/IUserServices/GetAccountsDatabyEventtypeuserIDandDateRangeResp" +
            "onse")]
        string GetAccountsDatabyEventtypeuserIDandDateRange(int UserID, string From, string To, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAccountsDatabyEventtypeuserIDandDateRange", ReplyAction="http://tempuri.org/IUserServices/GetAccountsDatabyEventtypeuserIDandDateRangeResp" +
            "onse")]
        System.Threading.Tasks.Task<string> GetAccountsDatabyEventtypeuserIDandDateRangeAsync(int UserID, string From, string To, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetDatabyAgentIDForCommisionandDateRange", ReplyAction="http://tempuri.org/IUserServices/GetDatabyAgentIDForCommisionandDateRangeResponse" +
            "")]
        string GetDatabyAgentIDForCommisionandDateRange(int UserID, string From, string To, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetDatabyAgentIDForCommisionandDateRange", ReplyAction="http://tempuri.org/IUserServices/GetDatabyAgentIDForCommisionandDateRangeResponse" +
            "")]
        System.Threading.Tasks.Task<string> GetDatabyAgentIDForCommisionandDateRangeAsync(int UserID, string From, string To, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetDatabyAgentIDForCommisionandDateRangeByEventt" +
            "ype", ReplyAction="http://tempuri.org/IUserServices/GetDatabyAgentIDForCommisionandDateRangeByEventt" +
            "ypeResponse")]
        string GetDatabyAgentIDForCommisionandDateRangeByEventtype(int UserID, string From, string To, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetDatabyAgentIDForCommisionandDateRangeByEventt" +
            "ype", ReplyAction="http://tempuri.org/IUserServices/GetDatabyAgentIDForCommisionandDateRangeByEventt" +
            "ypeResponse")]
        System.Threading.Tasks.Task<string> GetDatabyAgentIDForCommisionandDateRangeByEventtypeAsync(int UserID, string From, string To, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UserAccountsGetCommission", ReplyAction="http://tempuri.org/IUserServices/UserAccountsGetCommissionResponse")]
        string UserAccountsGetCommission(int UserID, string From, string To, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UserAccountsGetCommission", ReplyAction="http://tempuri.org/IUserServices/UserAccountsGetCommissionResponse")]
        System.Threading.Tasks.Task<string> UserAccountsGetCommissionAsync(int UserID, string From, string To, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetEventTypeNamebyMarketID", ReplyAction="http://tempuri.org/IUserServices/GetEventTypeNamebyMarketIDResponse")]
        string GetEventTypeNamebyMarketID(string marketBookId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetEventTypeNamebyMarketID", ReplyAction="http://tempuri.org/IUserServices/GetEventTypeNamebyMarketIDResponse")]
        System.Threading.Tasks.Task<string> GetEventTypeNamebyMarketIDAsync(string marketBookId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateLiveOddbyID", ReplyAction="http://tempuri.org/IUserServices/UpdateLiveOddbyIDResponse")]
        void UpdateLiveOddbyID(long ID, string liveOdd, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateLiveOddbyID", ReplyAction="http://tempuri.org/IUserServices/UpdateLiveOddbyIDResponse")]
        System.Threading.Tasks.Task UpdateLiveOddbyIDAsync(long ID, string liveOdd, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateUserOddbyID", ReplyAction="http://tempuri.org/IUserServices/UpdateUserOddbyIDResponse")]
        void UpdateUserOddbyID(long ID, string UserOdd, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateUserOddbyID", ReplyAction="http://tempuri.org/IUserServices/UpdateUserOddbyIDResponse")]
        System.Threading.Tasks.Task UpdateUserOddbyIDAsync(long ID, string UserOdd, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAllowedMarketsbyUserID", ReplyAction="http://tempuri.org/IUserServices/GetAllowedMarketsbyUserIDResponse")]
        string GetAllowedMarketsbyUserID(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetAllowedMarketsbyUserID", ReplyAction="http://tempuri.org/IUserServices/GetAllowedMarketsbyUserIDResponse")]
        System.Threading.Tasks.Task<string> GetAllowedMarketsbyUserIDAsync(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateAllowedMarketsbyUserID", ReplyAction="http://tempuri.org/IUserServices/UpdateAllowedMarketsbyUserIDResponse")]
        void UpdateAllowedMarketsbyUserID(bool isCricketMatchOddsAllowedForBet, bool isCricketTiedMatchAllowedForBet, bool isCricketCompletedMatchAllowedForBet, bool isCricketInningsRunsAllowedForBet, bool isSoccerAllowedForBet, bool isTennisAllowedForBet, bool isHorseRaceWinAllowedForBet, bool isHorseRacePlaceAllowedForBet, bool isGrayHoundRaceWinAllowedForBet, bool isGrayHoundRacePlaceAllowedForBet, int UserID, bool isWinnerMarketAllowedForBet, string Password, bool isFancyAllowed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/UpdateAllowedMarketsbyUserID", ReplyAction="http://tempuri.org/IUserServices/UpdateAllowedMarketsbyUserIDResponse")]
        System.Threading.Tasks.Task UpdateAllowedMarketsbyUserIDAsync(bool isCricketMatchOddsAllowedForBet, bool isCricketTiedMatchAllowedForBet, bool isCricketCompletedMatchAllowedForBet, bool isCricketInningsRunsAllowedForBet, bool isSoccerAllowedForBet, bool isTennisAllowedForBet, bool isHorseRaceWinAllowedForBet, bool isHorseRacePlaceAllowedForBet, bool isGrayHoundRaceWinAllowedForBet, bool isGrayHoundRacePlaceAllowedForBet, int UserID, bool isWinnerMarketAllowedForBet, string Password, bool isFancyAllowed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetCommissionaccountIdandBookAccountbyUserID", ReplyAction="http://tempuri.org/IUserServices/GetCommissionaccountIdandBookAccountbyUserIDResp" +
            "onse")]
        UserServiceReference.SP_Users_GetCommissionAccountIDandBookAccountID_Result GetCommissionaccountIdandBookAccountbyUserID(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetCommissionaccountIdandBookAccountbyUserID", ReplyAction="http://tempuri.org/IUserServices/GetCommissionaccountIdandBookAccountbyUserIDResp" +
            "onse")]
        System.Threading.Tasks.Task<UserServiceReference.SP_Users_GetCommissionAccountIDandBookAccountID_Result> GetCommissionaccountIdandBookAccountbyUserIDAsync(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetReferrerRateandIDbyUserID", ReplyAction="http://tempuri.org/IUserServices/GetReferrerRateandIDbyUserIDResponse")]
        UserServiceReference.SP_Users_GetReferrerRateandReferrerIDbyUserID_Result GetReferrerRateandIDbyUserID(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserServices/GetReferrerRateandIDbyUserID", ReplyAction="http://tempuri.org/IUserServices/GetReferrerRateandIDbyUserIDResponse")]
        System.Threading.Tasks.Task<UserServiceReference.SP_Users_GetReferrerRateandReferrerIDbyUserID_Result> GetReferrerRateandIDbyUserIDAsync(int UserID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public interface IUserServicesChannel : UserServiceReference.IUserServices, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.1.0")]
    public partial class UserServicesClient : System.ServiceModel.ClientBase<UserServiceReference.IUserServices>, UserServiceReference.IUserServices
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public UserServicesClient() : 
                base(UserServicesClient.GetDefaultBinding(), UserServicesClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IUserServices.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public UserServicesClient(EndpointConfiguration endpointConfiguration) : 
                base(UserServicesClient.GetBindingForEndpoint(endpointConfiguration), UserServicesClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public UserServicesClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(UserServicesClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public UserServicesClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(UserServicesClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public UserServicesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public void UpdateRefererRateandIDbyUserID(int UserID, int ReffereID, int ReferrerRate)
        {
            base.Channel.UpdateRefererRateandIDbyUserID(UserID, ReffereID, ReferrerRate);
        }
        
        public System.Threading.Tasks.Task UpdateRefererRateandIDbyUserIDAsync(int UserID, int ReffereID, int ReferrerRate)
        {
            return base.Channel.UpdateRefererRateandIDbyUserIDAsync(UserID, ReffereID, ReferrerRate);
        }
        
        public void UpdateUsersAllBlock()
        {
            base.Channel.UpdateUsersAllBlock();
        }
        
        public System.Threading.Tasks.Task UpdateUsersAllBlockAsync()
        {
            return base.Channel.UpdateUsersAllBlockAsync();
        }
        
        public void UpdateUsersAllLoggedOut()
        {
            base.Channel.UpdateUsersAllLoggedOut();
        }
        
        public System.Threading.Tasks.Task UpdateUsersAllLoggedOutAsync()
        {
            return base.Channel.UpdateUsersAllLoggedOutAsync();
        }
        
        public void UpdateMaxOddBackandLay(int UserID, decimal MaxOddBack, bool CheckForMaxOddBack, decimal MaxOddLay, bool CheckForMaxOddLay)
        {
            base.Channel.UpdateMaxOddBackandLay(UserID, MaxOddBack, CheckForMaxOddBack, MaxOddLay, CheckForMaxOddLay);
        }
        
        public System.Threading.Tasks.Task UpdateMaxOddBackandLayAsync(int UserID, decimal MaxOddBack, bool CheckForMaxOddBack, decimal MaxOddLay, bool CheckForMaxOddLay)
        {
            return base.Channel.UpdateMaxOddBackandLayAsync(UserID, MaxOddBack, CheckForMaxOddBack, MaxOddLay, CheckForMaxOddLay);
        }
        
        public string GetIntervalandBetPlaceTimings(int UserID)
        {
            return base.Channel.GetIntervalandBetPlaceTimings(UserID);
        }
        
        public System.Threading.Tasks.Task<string> GetIntervalandBetPlaceTimingsAsync(int UserID)
        {
            return base.Channel.GetIntervalandBetPlaceTimingsAsync(UserID);
        }
        
        public void UpdateIntervalandBetPlaceTimings(
                    int HorseRaceTimerInterval, 
                    int HorseRaceBetPlaceWait, 
                    int GrayHoundTimerInterval, 
                    int GrayHoundBetPlaceWait, 
                    int CricketMatchOddsTimerInterval, 
                    int CricketMatchOddsBetPlaceWait, 
                    int CompletedMatchTimerInterval, 
                    int CompletedMatchBetPlaceWait, 
                    int TiedMatchTimerInterval, 
                    int TiedMatchBetPlaceWait, 
                    int InningsRunsTimerInterval, 
                    int InningsRunsBetPlaceWait, 
                    int WinnerTimerInterval, 
                    int WinnerBetPlaceWait, 
                    int TennisTimerInterval, 
                    int TennisBetPlaceWait, 
                    int SoccerTimerInterval, 
                    int SoccerBetPlaceWait, 
                    decimal PoundRate, 
                    int userID, 
                    int FancyTimerInterval, 
                    int FancyBetPlaceWait, 
                    int RaceMinutesBeforeStart, 
                    int CancelBetTime)
        {
            base.Channel.UpdateIntervalandBetPlaceTimings(HorseRaceTimerInterval, HorseRaceBetPlaceWait, GrayHoundTimerInterval, GrayHoundBetPlaceWait, CricketMatchOddsTimerInterval, CricketMatchOddsBetPlaceWait, CompletedMatchTimerInterval, CompletedMatchBetPlaceWait, TiedMatchTimerInterval, TiedMatchBetPlaceWait, InningsRunsTimerInterval, InningsRunsBetPlaceWait, WinnerTimerInterval, WinnerBetPlaceWait, TennisTimerInterval, TennisBetPlaceWait, SoccerTimerInterval, SoccerBetPlaceWait, PoundRate, userID, FancyTimerInterval, FancyBetPlaceWait, RaceMinutesBeforeStart, CancelBetTime);
        }
        
        public System.Threading.Tasks.Task UpdateIntervalandBetPlaceTimingsAsync(
                    int HorseRaceTimerInterval, 
                    int HorseRaceBetPlaceWait, 
                    int GrayHoundTimerInterval, 
                    int GrayHoundBetPlaceWait, 
                    int CricketMatchOddsTimerInterval, 
                    int CricketMatchOddsBetPlaceWait, 
                    int CompletedMatchTimerInterval, 
                    int CompletedMatchBetPlaceWait, 
                    int TiedMatchTimerInterval, 
                    int TiedMatchBetPlaceWait, 
                    int InningsRunsTimerInterval, 
                    int InningsRunsBetPlaceWait, 
                    int WinnerTimerInterval, 
                    int WinnerBetPlaceWait, 
                    int TennisTimerInterval, 
                    int TennisBetPlaceWait, 
                    int SoccerTimerInterval, 
                    int SoccerBetPlaceWait, 
                    decimal PoundRate, 
                    int userID, 
                    int FancyTimerInterval, 
                    int FancyBetPlaceWait, 
                    int RaceMinutesBeforeStart, 
                    int CancelBetTime)
        {
            return base.Channel.UpdateIntervalandBetPlaceTimingsAsync(HorseRaceTimerInterval, HorseRaceBetPlaceWait, GrayHoundTimerInterval, GrayHoundBetPlaceWait, CricketMatchOddsTimerInterval, CricketMatchOddsBetPlaceWait, CompletedMatchTimerInterval, CompletedMatchBetPlaceWait, TiedMatchTimerInterval, TiedMatchBetPlaceWait, InningsRunsTimerInterval, InningsRunsBetPlaceWait, WinnerTimerInterval, WinnerBetPlaceWait, TennisTimerInterval, TennisBetPlaceWait, SoccerTimerInterval, SoccerBetPlaceWait, PoundRate, userID, FancyTimerInterval, FancyBetPlaceWait, RaceMinutesBeforeStart, CancelBetTime);
        }
        
        public int GetHawalaAccountIDbyUserID(int UserID)
        {
            return base.Channel.GetHawalaAccountIDbyUserID(UserID);
        }
        
        public System.Threading.Tasks.Task<int> GetHawalaAccountIDbyUserIDAsync(int UserID)
        {
            return base.Channel.GetHawalaAccountIDbyUserIDAsync(UserID);
        }
        
        public int GetCreatedbyID(int UserID)
        {
            return base.Channel.GetCreatedbyID(UserID);
        }
        
        public System.Threading.Tasks.Task<int> GetCreatedbyIDAsync(int UserID)
        {
            return base.Channel.GetCreatedbyIDAsync(UserID);
        }
        
        public void UpdateHawalaIDbyUserID(int userID, int ParentID)
        {
            base.Channel.UpdateHawalaIDbyUserID(userID, ParentID);
        }
        
        public System.Threading.Tasks.Task UpdateHawalaIDbyUserIDAsync(int userID, int ParentID)
        {
            return base.Channel.UpdateHawalaIDbyUserIDAsync(userID, ParentID);
        }
        
        public string GetMarketsforBettingAllowed(int userID)
        {
            return base.Channel.GetMarketsforBettingAllowed(userID);
        }
        
        public System.Threading.Tasks.Task<string> GetMarketsforBettingAllowedAsync(int userID)
        {
            return base.Channel.GetMarketsforBettingAllowedAsync(userID);
        }
        
        public void UpdateMarketAllowedBetting(int UserId, string MarketbookId, bool AllowedBetting)
        {
            base.Channel.UpdateMarketAllowedBetting(UserId, MarketbookId, AllowedBetting);
        }
        
        public System.Threading.Tasks.Task UpdateMarketAllowedBettingAsync(int UserId, string MarketbookId, bool AllowedBetting)
        {
            return base.Channel.UpdateMarketAllowedBettingAsync(UserId, MarketbookId, AllowedBetting);
        }
        
        public void UpdateMarketAllowedBettingForAllAgents(System.Collections.Generic.List<int> UserIds, System.Collections.Generic.List<UserServiceReference.SP_UserMarket_GetMarketForAllowedBetting_Result> lstMarkets)
        {
            base.Channel.UpdateMarketAllowedBettingForAllAgents(UserIds, lstMarkets);
        }
        
        public System.Threading.Tasks.Task UpdateMarketAllowedBettingForAllAgentsAsync(System.Collections.Generic.List<int> UserIds, System.Collections.Generic.List<UserServiceReference.SP_UserMarket_GetMarketForAllowedBetting_Result> lstMarkets)
        {
            return base.Channel.UpdateMarketAllowedBettingForAllAgentsAsync(UserIds, lstMarkets);
        }
        
        public string GetBetSlipKeys(int UserID)
        {
            return base.Channel.GetBetSlipKeys(UserID);
        }
        
        public System.Threading.Tasks.Task<string> GetBetSlipKeysAsync(int UserID)
        {
            return base.Channel.GetBetSlipKeysAsync(UserID);
        }
        
        public void UpdateBetSlipKeys(
                    int UserID, 
                    string SimpleBtn1, 
                    string SimpleBtn2, 
                    string SimpleBtn3, 
                    string SimpleBtn4, 
                    string SimpleBtn5, 
                    string SimpleBtn6, 
                    string SimpleBtn7, 
                    string SimpleBtn8, 
                    string SimpleBtn9, 
                    string SimpleBtn10, 
                    string SimpleBtn11, 
                    string SimpleBtn12, 
                    string MutipleBtn1, 
                    string MutipleBtn2, 
                    string MutipleBtn3, 
                    string MutipleBtn4, 
                    string MutipleBtn5, 
                    string MutipleBtn6, 
                    string MutipleBtn7, 
                    string MutipleBtn8, 
                    string MutipleBtn9, 
                    string MutipleBtn10, 
                    string MutipleBtn11, 
                    string MutipleBtn12)
        {
            base.Channel.UpdateBetSlipKeys(UserID, SimpleBtn1, SimpleBtn2, SimpleBtn3, SimpleBtn4, SimpleBtn5, SimpleBtn6, SimpleBtn7, SimpleBtn8, SimpleBtn9, SimpleBtn10, SimpleBtn11, SimpleBtn12, MutipleBtn1, MutipleBtn2, MutipleBtn3, MutipleBtn4, MutipleBtn5, MutipleBtn6, MutipleBtn7, MutipleBtn8, MutipleBtn9, MutipleBtn10, MutipleBtn11, MutipleBtn12);
        }
        
        public System.Threading.Tasks.Task UpdateBetSlipKeysAsync(
                    int UserID, 
                    string SimpleBtn1, 
                    string SimpleBtn2, 
                    string SimpleBtn3, 
                    string SimpleBtn4, 
                    string SimpleBtn5, 
                    string SimpleBtn6, 
                    string SimpleBtn7, 
                    string SimpleBtn8, 
                    string SimpleBtn9, 
                    string SimpleBtn10, 
                    string SimpleBtn11, 
                    string SimpleBtn12, 
                    string MutipleBtn1, 
                    string MutipleBtn2, 
                    string MutipleBtn3, 
                    string MutipleBtn4, 
                    string MutipleBtn5, 
                    string MutipleBtn6, 
                    string MutipleBtn7, 
                    string MutipleBtn8, 
                    string MutipleBtn9, 
                    string MutipleBtn10, 
                    string MutipleBtn11, 
                    string MutipleBtn12)
        {
            return base.Channel.UpdateBetSlipKeysAsync(UserID, SimpleBtn1, SimpleBtn2, SimpleBtn3, SimpleBtn4, SimpleBtn5, SimpleBtn6, SimpleBtn7, SimpleBtn8, SimpleBtn9, SimpleBtn10, SimpleBtn11, SimpleBtn12, MutipleBtn1, MutipleBtn2, MutipleBtn3, MutipleBtn4, MutipleBtn5, MutipleBtn6, MutipleBtn7, MutipleBtn8, MutipleBtn9, MutipleBtn10, MutipleBtn11, MutipleBtn12);
        }
        
        public void UpdateBettingAllowed(string EventID, string BettingAllowed)
        {
            base.Channel.UpdateBettingAllowed(EventID, BettingAllowed);
        }
        
        public System.Threading.Tasks.Task UpdateBettingAllowedAsync(string EventID, string BettingAllowed)
        {
            return base.Channel.UpdateBettingAllowedAsync(EventID, BettingAllowed);
        }
        
        public decimal GetPoundRatebyUserID(int UserID)
        {
            return base.Channel.GetPoundRatebyUserID(UserID);
        }
        
        public System.Threading.Tasks.Task<decimal> GetPoundRatebyUserIDAsync(int UserID)
        {
            return base.Channel.GetPoundRatebyUserIDAsync(UserID);
        }
        
        public string GetMarqueeText()
        {
            return base.Channel.GetMarqueeText();
        }
        
        public System.Threading.Tasks.Task<string> GetMarqueeTextAsync()
        {
            return base.Channel.GetMarqueeTextAsync();
        }
        
        public void UpdateMarqueeText(string marqueetext)
        {
            base.Channel.UpdateMarqueeText(marqueetext);
        }
        
        public System.Threading.Tasks.Task UpdateMarqueeTextAsync(string marqueetext)
        {
            return base.Channel.UpdateMarqueeTextAsync(marqueetext);
        }
        
        public void SendBalanceSheettoEmail(string Password)
        {
            base.Channel.SendBalanceSheettoEmail(Password);
        }
        
        public System.Threading.Tasks.Task SendBalanceSheettoEmailAsync(string Password)
        {
            return base.Channel.SendBalanceSheettoEmailAsync(Password);
        }
        
        public void SendBalanceSheettoEmailAutomatic(string Password)
        {
            base.Channel.SendBalanceSheettoEmailAutomatic(Password);
        }
        
        public System.Threading.Tasks.Task SendBalanceSheettoEmailAutomaticAsync(string Password)
        {
            return base.Channel.SendBalanceSheettoEmailAutomaticAsync(Password);
        }
        
        public bool GetShowTV(int userID)
        {
            return base.Channel.GetShowTV(userID);
        }
        
        public System.Threading.Tasks.Task<bool> GetShowTVAsync(int userID)
        {
            return base.Channel.GetShowTVAsync(userID);
        }
        
        public void UpdateShowTV(int userID, bool ShowTV)
        {
            base.Channel.UpdateShowTV(userID, ShowTV);
        }
        
        public System.Threading.Tasks.Task UpdateShowTVAsync(int userID, bool ShowTV)
        {
            return base.Channel.UpdateShowTVAsync(userID, ShowTV);
        }
        
        public UserServiceReference.SP_UserMarket_GetEventDetailsbyMarketID_Result GetEventDetailsbyMarketBook(string MarketbookID)
        {
            return base.Channel.GetEventDetailsbyMarketBook(MarketbookID);
        }
        
        public System.Threading.Tasks.Task<UserServiceReference.SP_UserMarket_GetEventDetailsbyMarketID_Result> GetEventDetailsbyMarketBookAsync(string MarketbookID)
        {
            return base.Channel.GetEventDetailsbyMarketBookAsync(MarketbookID);
        }
        
        public string GetLinevMarketsbyEventID(string EventID, System.DateTime EventOpenDate, int UserID)
        {
            return base.Channel.GetLinevMarketsbyEventID(EventID, EventOpenDate, UserID);
        }
        
        public System.Threading.Tasks.Task<string> GetLinevMarketsbyEventIDAsync(string EventID, System.DateTime EventOpenDate, int UserID)
        {
            return base.Channel.GetLinevMarketsbyEventIDAsync(EventID, EventOpenDate, UserID);
        }
        
        public string KJMarketsbyEventID(string EventID, int UserID)
        {
            return base.Channel.KJMarketsbyEventID(EventID, UserID);
        }
        
        public System.Threading.Tasks.Task<string> KJMarketsbyEventIDAsync(string EventID, int UserID)
        {
            return base.Channel.KJMarketsbyEventIDAsync(EventID, UserID);
        }
        
        public string GetLinevMarketsbyEventIDIN(string EventID, System.DateTime EventOpenDate, int UserID)
        {
            return base.Channel.GetLinevMarketsbyEventIDIN(EventID, EventOpenDate, UserID);
        }
        
        public System.Threading.Tasks.Task<string> GetLinevMarketsbyEventIDINAsync(string EventID, System.DateTime EventOpenDate, int UserID)
        {
            return base.Channel.GetLinevMarketsbyEventIDINAsync(EventID, EventOpenDate, UserID);
        }
        
        public string GetMarketIDbyEventID(string EventID)
        {
            return base.Channel.GetMarketIDbyEventID(EventID);
        }
        
        public System.Threading.Tasks.Task<string> GetMarketIDbyEventIDAsync(string EventID)
        {
            return base.Channel.GetMarketIDbyEventIDAsync(EventID);
        }
        
        public string GetKalijut()
        {
            return base.Channel.GetKalijut();
        }
        
        public System.Threading.Tasks.Task<string> GetKalijutAsync()
        {
            return base.Channel.GetKalijutAsync();
        }
        
        public string GetFigureOdds()
        {
            return base.Channel.GetFigureOdds();
        }
        
        public System.Threading.Tasks.Task<string> GetFigureOddsAsync()
        {
            return base.Channel.GetFigureOddsAsync();
        }
        
        public string GetScoresbyEventIDandDate(string EventId, System.DateTime EventOpenDate)
        {
            return base.Channel.GetScoresbyEventIDandDate(EventId, EventOpenDate);
        }
        
        public System.Threading.Tasks.Task<string> GetScoresbyEventIDandDateAsync(string EventId, System.DateTime EventOpenDate)
        {
            return base.Channel.GetScoresbyEventIDandDateAsync(EventId, EventOpenDate);
        }
        
        public string GetMarketRules()
        {
            return base.Channel.GetMarketRules();
        }
        
        public System.Threading.Tasks.Task<string> GetMarketRulesAsync()
        {
            return base.Channel.GetMarketRulesAsync();
        }
        
        public string GetLineandMatchOddsforAssociation()
        {
            return base.Channel.GetLineandMatchOddsforAssociation();
        }
        
        public System.Threading.Tasks.Task<string> GetLineandMatchOddsforAssociationAsync()
        {
            return base.Channel.GetLineandMatchOddsforAssociationAsync();
        }
        
        public void UpdateAssociateEventID(string associateventID, string EventID)
        {
            base.Channel.UpdateAssociateEventID(associateventID, EventID);
        }
        
        public System.Threading.Tasks.Task UpdateAssociateEventIDAsync(string associateventID, string EventID)
        {
            return base.Channel.UpdateAssociateEventIDAsync(associateventID, EventID);
        }
        
        public string GetLiveTVChanels(string Passkey)
        {
            return base.Channel.GetLiveTVChanels(Passkey);
        }
        
        public System.Threading.Tasks.Task<string> GetLiveTVChanelsAsync(string Passkey)
        {
            return base.Channel.GetLiveTVChanelsAsync(Passkey);
        }
        
        public string GetScorebyEventIDandInnings(string EventID, System.DateTime EventOpenDate, int Innings)
        {
            return base.Channel.GetScorebyEventIDandInnings(EventID, EventOpenDate, Innings);
        }
        
        public System.Threading.Tasks.Task<string> GetScorebyEventIDandInningsAsync(string EventID, System.DateTime EventOpenDate, int Innings)
        {
            return base.Channel.GetScorebyEventIDandInningsAsync(EventID, EventOpenDate, Innings);
        }
        
        public string GetScorebyEventIDandInningsandOvers(string EventID, System.DateTime EventOpenDate, int Innings, int Overs)
        {
            return base.Channel.GetScorebyEventIDandInningsandOvers(EventID, EventOpenDate, Innings, Overs);
        }
        
        public System.Threading.Tasks.Task<string> GetScorebyEventIDandInningsandOversAsync(string EventID, System.DateTime EventOpenDate, int Innings, int Overs)
        {
            return base.Channel.GetScorebyEventIDandInningsandOversAsync(EventID, EventOpenDate, Innings, Overs);
        }
        
        public void AddScoreToBallbyBallsummary(string EventID, string MarketCatalogueID, double over, int score, int innings, System.DateTime EventOpenDate, int wickets, string teamname, string matchstatus)
        {
            base.Channel.AddScoreToBallbyBallsummary(EventID, MarketCatalogueID, over, score, innings, EventOpenDate, wickets, teamname, matchstatus);
        }
        
        public System.Threading.Tasks.Task AddScoreToBallbyBallsummaryAsync(string EventID, string MarketCatalogueID, double over, int score, int innings, System.DateTime EventOpenDate, int wickets, string teamname, string matchstatus)
        {
            return base.Channel.AddScoreToBallbyBallsummaryAsync(EventID, MarketCatalogueID, over, score, innings, EventOpenDate, wickets, teamname, matchstatus);
        }
        
        public void CheckforMatchCompletedFancy(string MarketBookID, int ScoreforThisOver)
        {
            base.Channel.CheckforMatchCompletedFancy(MarketBookID, ScoreforThisOver);
        }
        
        public System.Threading.Tasks.Task CheckforMatchCompletedFancyAsync(string MarketBookID, int ScoreforThisOver)
        {
            return base.Channel.CheckforMatchCompletedFancyAsync(MarketBookID, ScoreforThisOver);
        }
        
        public void CheckforMatchCompletedFancyIN(string MarketBookID, string Marketname, int ScoreforThisOver)
        {
            base.Channel.CheckforMatchCompletedFancyIN(MarketBookID, Marketname, ScoreforThisOver);
        }
        
        public System.Threading.Tasks.Task CheckforMatchCompletedFancyINAsync(string MarketBookID, string Marketname, int ScoreforThisOver)
        {
            return base.Channel.CheckforMatchCompletedFancyINAsync(MarketBookID, Marketname, ScoreforThisOver);
        }
        
        public void CheckforMatchCompletedFancyKJ(string MarketBookID, int selectionID, int ScoreforThisOver)
        {
            base.Channel.CheckforMatchCompletedFancyKJ(MarketBookID, selectionID, ScoreforThisOver);
        }
        
        public System.Threading.Tasks.Task CheckforMatchCompletedFancyKJAsync(string MarketBookID, int selectionID, int ScoreforThisOver)
        {
            return base.Channel.CheckforMatchCompletedFancyKJAsync(MarketBookID, selectionID, ScoreforThisOver);
        }
        
        public void CheckforMatchCompletedSmallFig(string MarketBookID, int selectionID, int ScoreforThisOver)
        {
            base.Channel.CheckforMatchCompletedSmallFig(MarketBookID, selectionID, ScoreforThisOver);
        }
        
        public System.Threading.Tasks.Task CheckforMatchCompletedSmallFigAsync(string MarketBookID, int selectionID, int ScoreforThisOver)
        {
            return base.Channel.CheckforMatchCompletedSmallFigAsync(MarketBookID, selectionID, ScoreforThisOver);
        }
        
        public void CheckforMatchCompletedFancyFig(string MarketBookID, int selectionID, int ScoreforThisOver)
        {
            base.Channel.CheckforMatchCompletedFancyFig(MarketBookID, selectionID, ScoreforThisOver);
        }
        
        public System.Threading.Tasks.Task CheckforMatchCompletedFancyFigAsync(string MarketBookID, int selectionID, int ScoreforThisOver)
        {
            return base.Channel.CheckforMatchCompletedFancyFigAsync(MarketBookID, selectionID, ScoreforThisOver);
        }
        
        public bool InsertUserAccountsFancy(System.Collections.Generic.List<UserServiceReference.MarketBook> marketbookstatus, int userID, string Password, int ScoreforThisOver)
        {
            return base.Channel.InsertUserAccountsFancy(marketbookstatus, userID, Password, ScoreforThisOver);
        }
        
        public System.Threading.Tasks.Task<bool> InsertUserAccountsFancyAsync(System.Collections.Generic.List<UserServiceReference.MarketBook> marketbookstatus, int userID, string Password, int ScoreforThisOver)
        {
            return base.Channel.InsertUserAccountsFancyAsync(marketbookstatus, userID, Password, ScoreforThisOver);
        }
        
        public bool GetIsComAllowbyUserID(int userID)
        {
            return base.Channel.GetIsComAllowbyUserID(userID);
        }
        
        public System.Threading.Tasks.Task<bool> GetIsComAllowbyUserIDAsync(int userID)
        {
            return base.Channel.GetIsComAllowbyUserIDAsync(userID);
        }
        
        public void UpdateMarketStatusbyMarketBookID(string MarketBookID, string MarketStatus)
        {
            base.Channel.UpdateMarketStatusbyMarketBookID(MarketBookID, MarketStatus);
        }
        
        public System.Threading.Tasks.Task UpdateMarketStatusbyMarketBookIDAsync(string MarketBookID, string MarketStatus)
        {
            return base.Channel.UpdateMarketStatusbyMarketBookIDAsync(MarketBookID, MarketStatus);
        }
        
        public bool GetFancyResultPostSetting()
        {
            return base.Channel.GetFancyResultPostSetting();
        }
        
        public System.Threading.Tasks.Task<bool> GetFancyResultPostSettingAsync()
        {
            return base.Channel.GetFancyResultPostSettingAsync();
        }
        
        public void UpdateFancyResultPostSetting(bool fancyresultpost)
        {
            base.Channel.UpdateFancyResultPostSetting(fancyresultpost);
        }
        
        public System.Threading.Tasks.Task UpdateFancyResultPostSettingAsync(bool fancyresultpost)
        {
            return base.Channel.UpdateFancyResultPostSettingAsync(fancyresultpost);
        }
        
        public int GetCommissionRatebyUserIDFancy(int UserID)
        {
            return base.Channel.GetCommissionRatebyUserIDFancy(UserID);
        }
        
        public System.Threading.Tasks.Task<int> GetCommissionRatebyUserIDFancyAsync(int UserID)
        {
            return base.Channel.GetCommissionRatebyUserIDFancyAsync(UserID);
        }
        
        public void UpdateCommissionRatebyUserID(int UserID, int CommisionrateFancy)
        {
            base.Channel.UpdateCommissionRatebyUserID(UserID, CommisionrateFancy);
        }
        
        public System.Threading.Tasks.Task UpdateCommissionRatebyUserIDAsync(int UserID, int CommisionrateFancy)
        {
            return base.Channel.UpdateCommissionRatebyUserIDAsync(UserID, CommisionrateFancy);
        }
        
        public void UpdateCricketAPIMatchKey(string EventID, string CricketAPIMatchKey)
        {
            base.Channel.UpdateCricketAPIMatchKey(EventID, CricketAPIMatchKey);
        }
        
        public System.Threading.Tasks.Task UpdateCricketAPIMatchKeyAsync(string EventID, string CricketAPIMatchKey)
        {
            return base.Channel.UpdateCricketAPIMatchKeyAsync(EventID, CricketAPIMatchKey);
        }
        
        public string GetFancyResultsFrom()
        {
            return base.Channel.GetFancyResultsFrom();
        }
        
        public System.Threading.Tasks.Task<string> GetFancyResultsFromAsync()
        {
            return base.Channel.GetFancyResultsFromAsync();
        }
        
        public void UpdateGetFancyResultsFrom(string ResultsFrom)
        {
            base.Channel.UpdateGetFancyResultsFrom(ResultsFrom);
        }
        
        public System.Threading.Tasks.Task UpdateGetFancyResultsFromAsync(string ResultsFrom)
        {
            return base.Channel.UpdateGetFancyResultsFromAsync(ResultsFrom);
        }
        
        public string GetRecentMatchesFromCricketAPI()
        {
            return base.Channel.GetRecentMatchesFromCricketAPI();
        }
        
        public System.Threading.Tasks.Task<string> GetRecentMatchesFromCricketAPIAsync()
        {
            return base.Channel.GetRecentMatchesFromCricketAPIAsync();
        }
        
        public void UpdateGetDataFromForLoggingData(string EventID, string GetDataFrom)
        {
            base.Channel.UpdateGetDataFromForLoggingData(EventID, GetDataFrom);
        }
        
        public System.Threading.Tasks.Task UpdateGetDataFromForLoggingDataAsync(string EventID, string GetDataFrom)
        {
            return base.Channel.UpdateGetDataFromForLoggingDataAsync(EventID, GetDataFrom);
        }
        
        public string GetAccountsDatabyEventNameuserIDandDateRange(int UserID, string From, string To, string Password)
        {
            return base.Channel.GetAccountsDatabyEventNameuserIDandDateRange(UserID, From, To, Password);
        }
        
        public System.Threading.Tasks.Task<string> GetAccountsDatabyEventNameuserIDandDateRangeAsync(int UserID, string From, string To, string Password)
        {
            return base.Channel.GetAccountsDatabyEventNameuserIDandDateRangeAsync(UserID, From, To, Password);
        }
        
        public string GetAccountsDatabyEventNameuserIDandDateRangeFancywithMArketName(int UserID, string From, string To, string Password)
        {
            return base.Channel.GetAccountsDatabyEventNameuserIDandDateRangeFancywithMArketName(UserID, From, To, Password);
        }
        
        public System.Threading.Tasks.Task<string> GetAccountsDatabyEventNameuserIDandDateRangeFancywithMArketNameAsync(int UserID, string From, string To, string Password)
        {
            return base.Channel.GetAccountsDatabyEventNameuserIDandDateRangeFancywithMArketNameAsync(UserID, From, To, Password);
        }
        
        public void UpdateTransferAdminAmount(int UserID, bool TransferAdminAmount, int TransferAgentID, bool TransferAdminAmountSoccer, bool TransferAdminAmountTennis, bool TransferAdminAmountHorse, bool TransferAdminAmountGreyHound)
        {
            base.Channel.UpdateTransferAdminAmount(UserID, TransferAdminAmount, TransferAgentID, TransferAdminAmountSoccer, TransferAdminAmountTennis, TransferAdminAmountHorse, TransferAdminAmountGreyHound);
        }
        
        public System.Threading.Tasks.Task UpdateTransferAdminAmountAsync(int UserID, bool TransferAdminAmount, int TransferAgentID, bool TransferAdminAmountSoccer, bool TransferAdminAmountTennis, bool TransferAdminAmountHorse, bool TransferAdminAmountGreyHound)
        {
            return base.Channel.UpdateTransferAdminAmountAsync(UserID, TransferAdminAmount, TransferAgentID, TransferAdminAmountSoccer, TransferAdminAmountTennis, TransferAdminAmountHorse, TransferAdminAmountGreyHound);
        }
        
        public UserServiceReference.SP_Users_GetTransferAdminAmount_Result GetTransferAdminAmount(int UserID)
        {
            return base.Channel.GetTransferAdminAmount(UserID);
        }
        
        public System.Threading.Tasks.Task<UserServiceReference.SP_Users_GetTransferAdminAmount_Result> GetTransferAdminAmountAsync(int UserID)
        {
            return base.Channel.GetTransferAdminAmountAsync(UserID);
        }
        
        public string GetAllPendingAmountsbyDate(System.DateTime DueDate)
        {
            return base.Channel.GetAllPendingAmountsbyDate(DueDate);
        }
        
        public System.Threading.Tasks.Task<string> GetAllPendingAmountsbyDateAsync(System.DateTime DueDate)
        {
            return base.Channel.GetAllPendingAmountsbyDateAsync(DueDate);
        }
        
        public void AddAmountReceviables(int UserId, decimal Amount, System.DateTime DueDate, string Status, decimal AmountReceived)
        {
            base.Channel.AddAmountReceviables(UserId, Amount, DueDate, Status, AmountReceived);
        }
        
        public System.Threading.Tasks.Task AddAmountReceviablesAsync(int UserId, decimal Amount, System.DateTime DueDate, string Status, decimal AmountReceived)
        {
            return base.Channel.AddAmountReceviablesAsync(UserId, Amount, DueDate, Status, AmountReceived);
        }
        
        public void UpdateAmountReceviables(int ID, decimal Amount, System.DateTime DueDate, string Status)
        {
            base.Channel.UpdateAmountReceviables(ID, Amount, DueDate, Status);
        }
        
        public System.Threading.Tasks.Task UpdateAmountReceviablesAsync(int ID, decimal Amount, System.DateTime DueDate, string Status)
        {
            return base.Channel.UpdateAmountReceviablesAsync(ID, Amount, DueDate, Status);
        }
        
        public bool GetBettingAllowedbyMarketIDandUserID(int UserId, string MarketBookID)
        {
            return base.Channel.GetBettingAllowedbyMarketIDandUserID(UserId, MarketBookID);
        }
        
        public System.Threading.Tasks.Task<bool> GetBettingAllowedbyMarketIDandUserIDAsync(int UserId, string MarketBookID)
        {
            return base.Channel.GetBettingAllowedbyMarketIDandUserIDAsync(UserId, MarketBookID);
        }
        
        public bool GetBettingAllowedbyMarketIDandUserIDInplay(int UserId)
        {
            return base.Channel.GetBettingAllowedbyMarketIDandUserIDInplay(UserId);
        }
        
        public System.Threading.Tasks.Task<bool> GetBettingAllowedbyMarketIDandUserIDInplayAsync(int UserId)
        {
            return base.Channel.GetBettingAllowedbyMarketIDandUserIDInplayAsync(UserId);
        }
        
        public void AddReferrerUsers(int UserID, int ReferrerID, int ReferrerRate)
        {
            base.Channel.AddReferrerUsers(UserID, ReferrerID, ReferrerRate);
        }
        
        public System.Threading.Tasks.Task AddReferrerUsersAsync(int UserID, int ReferrerID, int ReferrerRate)
        {
            return base.Channel.AddReferrerUsersAsync(UserID, ReferrerID, ReferrerRate);
        }
        
        public void DeletReffererUSers(int UserID)
        {
            base.Channel.DeletReffererUSers(UserID);
        }
        
        public System.Threading.Tasks.Task DeletReffererUSersAsync(int UserID)
        {
            return base.Channel.DeletReffererUSersAsync(UserID);
        }
        
        public System.Collections.Generic.List<UserServiceReference.SP_Referrers_GetReferrerRateandReferrerIDbyUserID_Result> GetReferrerRatesbyUserID(int UserID)
        {
            return base.Channel.GetReferrerRatesbyUserID(UserID);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<UserServiceReference.SP_Referrers_GetReferrerRateandReferrerIDbyUserID_Result>> GetReferrerRatesbyUserIDAsync(int UserID)
        {
            return base.Channel.GetReferrerRatesbyUserIDAsync(UserID);
        }
        
        public void InsertUserBetNew(
                    decimal userodd, 
                    string SelectionID, 
                    string Selectionname, 
                    string BetType, 
                    string nupdownAmount, 
                    string betslipamountlabel, 
                    decimal MaxOddBack, 
                    decimal MaxOddLay, 
                    bool CheckforMaxOddBack, 
                    bool CheckforMaxOddLay, 
                    int Clickedlocation, 
                    int UserID, 
                    string Betslipsize, 
                    string Password, 
                    string marketbookId, 
                    string Marketbookname, 
                    bool GetData)
        {
            base.Channel.InsertUserBetNew(userodd, SelectionID, Selectionname, BetType, nupdownAmount, betslipamountlabel, MaxOddBack, MaxOddLay, CheckforMaxOddBack, CheckforMaxOddLay, Clickedlocation, UserID, Betslipsize, Password, marketbookId, Marketbookname, GetData);
        }
        
        public System.Threading.Tasks.Task InsertUserBetNewAsync(
                    decimal userodd, 
                    string SelectionID, 
                    string Selectionname, 
                    string BetType, 
                    string nupdownAmount, 
                    string betslipamountlabel, 
                    decimal MaxOddBack, 
                    decimal MaxOddLay, 
                    bool CheckforMaxOddBack, 
                    bool CheckforMaxOddLay, 
                    int Clickedlocation, 
                    int UserID, 
                    string Betslipsize, 
                    string Password, 
                    string marketbookId, 
                    string Marketbookname, 
                    bool GetData)
        {
            return base.Channel.InsertUserBetNewAsync(userodd, SelectionID, Selectionname, BetType, nupdownAmount, betslipamountlabel, MaxOddBack, MaxOddLay, CheckforMaxOddBack, CheckforMaxOddLay, Clickedlocation, UserID, Betslipsize, Password, marketbookId, Marketbookname, GetData);
        }
        
        public string GetDistinctMarketsFromBets(string From, string To)
        {
            return base.Channel.GetDistinctMarketsFromBets(From, To);
        }
        
        public System.Threading.Tasks.Task<string> GetDistinctMarketsFromBetsAsync(string From, string To)
        {
            return base.Channel.GetDistinctMarketsFromBetsAsync(From, To);
        }
        
        public string GetDistinctMarketsFromAccounts(string From, string To)
        {
            return base.Channel.GetDistinctMarketsFromAccounts(From, To);
        }
        
        public System.Threading.Tasks.Task<string> GetDistinctMarketsFromAccountsAsync(string From, string To)
        {
            return base.Channel.GetDistinctMarketsFromAccountsAsync(From, To);
        }
        
        public bool UnPostUserAccountsbyUserIDandMarketID(string MarketBookId, int UserID, string Password)
        {
            return base.Channel.UnPostUserAccountsbyUserIDandMarketID(MarketBookId, UserID, Password);
        }
        
        public System.Threading.Tasks.Task<bool> UnPostUserAccountsbyUserIDandMarketIDAsync(string MarketBookId, int UserID, string Password)
        {
            return base.Channel.UnPostUserAccountsbyUserIDandMarketIDAsync(MarketBookId, UserID, Password);
        }
        
        public bool UpdateUserBetsStatusbyMarketIDandUserID(string MarketBookId, int UserID, string Password)
        {
            return base.Channel.UpdateUserBetsStatusbyMarketIDandUserID(MarketBookId, UserID, Password);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserBetsStatusbyMarketIDandUserIDAsync(string MarketBookId, int UserID, string Password)
        {
            return base.Channel.UpdateUserBetsStatusbyMarketIDandUserIDAsync(MarketBookId, UserID, Password);
        }
        
        public void UpdateTotalOversbyMarket(string EventID, string TotalOvers)
        {
            base.Channel.UpdateTotalOversbyMarket(EventID, TotalOvers);
        }
        
        public System.Threading.Tasks.Task UpdateTotalOversbyMarketAsync(string EventID, string TotalOvers)
        {
            return base.Channel.UpdateTotalOversbyMarketAsync(EventID, TotalOvers);
        }
        
        public string SetBlockedStatusofUserBMS(int UserID, bool isBlocked, string Password)
        {
            return base.Channel.SetBlockedStatusofUserBMS(UserID, isBlocked, Password);
        }
        
        public System.Threading.Tasks.Task<string> SetBlockedStatusofUserBMSAsync(int UserID, bool isBlocked, string Password)
        {
            return base.Channel.SetBlockedStatusofUserBMSAsync(UserID, isBlocked, Password);
        }
        
        public UserServiceReference.APIResponse GetMatchScoreCard(string strMatchKey, string Password)
        {
            return base.Channel.GetMatchScoreCard(strMatchKey, Password);
        }
        
        public System.Threading.Tasks.Task<UserServiceReference.APIResponse> GetMatchScoreCardAsync(string strMatchKey, string Password)
        {
            return base.Channel.GetMatchScoreCardAsync(strMatchKey, Password);
        }
        
        public string GetCricketMatchKey(string MarketCatalogueID)
        {
            return base.Channel.GetCricketMatchKey(MarketCatalogueID);
        }
        
        public System.Threading.Tasks.Task<string> GetCricketMatchKeyAsync(string MarketCatalogueID)
        {
            return base.Channel.GetCricketMatchKeyAsync(MarketCatalogueID);
        }
        
        public void UpdateMarketsForView(int userID, bool isAllowedGrayHound, bool isAllowedHorse, bool isTennisAllowed, bool isSoccerAllowed, string Password)
        {
            base.Channel.UpdateMarketsForView(userID, isAllowedGrayHound, isAllowedHorse, isTennisAllowed, isSoccerAllowed, Password);
        }
        
        public System.Threading.Tasks.Task UpdateMarketsForViewAsync(int userID, bool isAllowedGrayHound, bool isAllowedHorse, bool isTennisAllowed, bool isSoccerAllowed, string Password)
        {
            return base.Channel.UpdateMarketsForViewAsync(userID, isAllowedGrayHound, isAllowedHorse, isTennisAllowed, isSoccerAllowed, Password);
        }
        
        public void UpdateAllMarketClosedbyUserID(int UserID)
        {
            base.Channel.UpdateAllMarketClosedbyUserID(UserID);
        }
        
        public System.Threading.Tasks.Task UpdateAllMarketClosedbyUserIDAsync(int UserID)
        {
            return base.Channel.UpdateAllMarketClosedbyUserIDAsync(UserID);
        }
        
        public string GetURLsData()
        {
            return base.Channel.GetURLsData();
        }
        
        public System.Threading.Tasks.Task<string> GetURLsDataAsync()
        {
            return base.Channel.GetURLsDataAsync();
        }
        
        public bool GetTransferAgnetCommision(int UserID)
        {
            return base.Channel.GetTransferAgnetCommision(UserID);
        }
        
        public System.Threading.Tasks.Task<bool> GetTransferAgnetCommisionAsync(int UserID)
        {
            return base.Channel.GetTransferAgnetCommisionAsync(UserID);
        }
        
        public void UpdateTransferAgnetCommision(int UserID, bool TranserAgentCommision)
        {
            base.Channel.UpdateTransferAgnetCommision(UserID, TranserAgentCommision);
        }
        
        public System.Threading.Tasks.Task UpdateTransferAgnetCommisionAsync(int UserID, bool TranserAgentCommision)
        {
            return base.Channel.UpdateTransferAgnetCommisionAsync(UserID, TranserAgentCommision);
        }
        
        public void UpdateFancySyncONorOFF(int UserId, string EventID, bool isopenenedbyuser)
        {
            base.Channel.UpdateFancySyncONorOFF(UserId, EventID, isopenenedbyuser);
        }
        
        public System.Threading.Tasks.Task UpdateFancySyncONorOFFAsync(int UserId, string EventID, bool isopenenedbyuser)
        {
            return base.Channel.UpdateFancySyncONorOFFAsync(UserId, EventID, isopenenedbyuser);
        }
        
        public int GetMaxBalanceTransferLimit(int UserID)
        {
            return base.Channel.GetMaxBalanceTransferLimit(UserID);
        }
        
        public System.Threading.Tasks.Task<int> GetMaxBalanceTransferLimitAsync(int UserID)
        {
            return base.Channel.GetMaxBalanceTransferLimitAsync(UserID);
        }
        
        public void UpdateMaxBalanceTransferLimit(int UserID, int MaxBalanceTransferLimit)
        {
            base.Channel.UpdateMaxBalanceTransferLimit(UserID, MaxBalanceTransferLimit);
        }
        
        public System.Threading.Tasks.Task UpdateMaxBalanceTransferLimitAsync(int UserID, int MaxBalanceTransferLimit)
        {
            return base.Channel.UpdateMaxBalanceTransferLimitAsync(UserID, MaxBalanceTransferLimit);
        }
        
        public int GetMaxAgentRate(int UserID)
        {
            return base.Channel.GetMaxAgentRate(UserID);
        }
        
        public System.Threading.Tasks.Task<int> GetMaxAgentRateAsync(int UserID)
        {
            return base.Channel.GetMaxAgentRateAsync(UserID);
        }
        
        public int GetAhmadRate(int UserID)
        {
            return base.Channel.GetAhmadRate(UserID);
        }
        
        public System.Threading.Tasks.Task<int> GetAhmadRateAsync(int UserID)
        {
            return base.Channel.GetAhmadRateAsync(UserID);
        }
        
        public void UpdateMaxAgentRate(int UserID, int MaxAgentRate)
        {
            base.Channel.UpdateMaxAgentRate(UserID, MaxAgentRate);
        }
        
        public System.Threading.Tasks.Task UpdateMaxAgentRateAsync(int UserID, int MaxAgentRate)
        {
            return base.Channel.UpdateMaxAgentRateAsync(UserID, MaxAgentRate);
        }
        
        public void UpdateAhmadRate(int UserID, int AhmadRate)
        {
            base.Channel.UpdateAhmadRate(UserID, AhmadRate);
        }
        
        public System.Threading.Tasks.Task UpdateAhmadRateAsync(int UserID, int AhmadRate)
        {
            return base.Channel.UpdateAhmadRateAsync(UserID, AhmadRate);
        }
        
        public void UpdateSuperRate(int UserID, int SuperRate)
        {
            base.Channel.UpdateSuperRate(UserID, SuperRate);
        }
        
        public System.Threading.Tasks.Task UpdateSuperRateAsync(int UserID, int SuperRate)
        {
            return base.Channel.UpdateSuperRateAsync(UserID, SuperRate);
        }
        
        public void UpdateFancySyncONorOFFbyMarketID(int UserId, string MarektID, bool isopenenedbyuser)
        {
            base.Channel.UpdateFancySyncONorOFFbyMarketID(UserId, MarektID, isopenenedbyuser);
        }
        
        public System.Threading.Tasks.Task UpdateFancySyncONorOFFbyMarketIDAsync(int UserId, string MarektID, bool isopenenedbyuser)
        {
            return base.Channel.UpdateFancySyncONorOFFbyMarketIDAsync(UserId, MarektID, isopenenedbyuser);
        }
        
        public void UpdateKJSyncONorOFFbyMarketID(int UserId, string MarektID, bool isopenenedbyuser)
        {
            base.Channel.UpdateKJSyncONorOFFbyMarketID(UserId, MarektID, isopenenedbyuser);
        }
        
        public System.Threading.Tasks.Task UpdateKJSyncONorOFFbyMarketIDAsync(int UserId, string MarektID, bool isopenenedbyuser)
        {
            return base.Channel.UpdateKJSyncONorOFFbyMarketIDAsync(UserId, MarektID, isopenenedbyuser);
        }
        
        public decimal GetTotalAgentCommissionbyAgentID(int UserId, string Password)
        {
            return base.Channel.GetTotalAgentCommissionbyAgentID(UserId, Password);
        }
        
        public System.Threading.Tasks.Task<decimal> GetTotalAgentCommissionbyAgentIDAsync(int UserId, string Password)
        {
            return base.Channel.GetTotalAgentCommissionbyAgentIDAsync(UserId, Password);
        }
        
        public UserServiceReference.SP_UserMarket_GetToWinTheTossbyEventID_Result GetToWintheTossbyeventId(int UserId, string EventId)
        {
            return base.Channel.GetToWintheTossbyeventId(UserId, EventId);
        }
        
        public System.Threading.Tasks.Task<UserServiceReference.SP_UserMarket_GetToWinTheTossbyEventID_Result> GetToWintheTossbyeventIdAsync(int UserId, string EventId)
        {
            return base.Channel.GetToWintheTossbyeventIdAsync(UserId, EventId);
        }
        
        public UserServiceReference.SP_UserMarket_GetToTiedMarketbyEventID_Result GetToTiedMarketbyEventID(int UserId, string EventId)
        {
            return base.Channel.GetToTiedMarketbyEventID(UserId, EventId);
        }
        
        public System.Threading.Tasks.Task<UserServiceReference.SP_UserMarket_GetToTiedMarketbyEventID_Result> GetToTiedMarketbyEventIDAsync(int UserId, string EventId)
        {
            return base.Channel.GetToTiedMarketbyEventIDAsync(UserId, EventId);
        }
        
        public System.Collections.Generic.List<UserServiceReference.SP_UserMarket_GetSoccergoalbyEventID_Result> GetSoccergoalbyeventId(int UserId, string EventId)
        {
            return base.Channel.GetSoccergoalbyeventId(UserId, EventId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<UserServiceReference.SP_UserMarket_GetSoccergoalbyEventID_Result>> GetSoccergoalbyeventIdAsync(int UserId, string EventId)
        {
            return base.Channel.GetSoccergoalbyeventIdAsync(UserId, EventId);
        }
        
        public void SetMarketOpenedbyuserinAPP()
        {
            base.Channel.SetMarketOpenedbyuserinAPP();
        }
        
        public System.Threading.Tasks.Task SetMarketOpenedbyuserinAPPAsync()
        {
            return base.Channel.SetMarketOpenedbyuserinAPPAsync();
        }
        
        public string GetUserbyUsernameandPassword(string username, string password)
        {
            return base.Channel.GetUserbyUsernameandPassword(username, password);
        }
        
        public System.Threading.Tasks.Task<string> GetUserbyUsernameandPasswordAsync(string username, string password)
        {
            return base.Channel.GetUserbyUsernameandPasswordAsync(username, password);
        }
        
        public string GetUserbyUsernameandPasswordNew(string username, string password)
        {
            return base.Channel.GetUserbyUsernameandPasswordNew(username, password);
        }
        
        public System.Threading.Tasks.Task<string> GetUserbyUsernameandPasswordNewAsync(string username, string password)
        {
            return base.Channel.GetUserbyUsernameandPasswordNewAsync(username, password);
        }
        
        public void UpdateCurrentLoggedInIDbyUserID(int userID)
        {
            base.Channel.UpdateCurrentLoggedInIDbyUserID(userID);
        }
        
        public System.Threading.Tasks.Task UpdateCurrentLoggedInIDbyUserIDAsync(int userID)
        {
            return base.Channel.UpdateCurrentLoggedInIDbyUserIDAsync(userID);
        }
        
        public void AddUserActivity(string Activityname, System.DateTime ActivityTime, string IPAddress, string Location, string Deviceinfo, int userID)
        {
            base.Channel.AddUserActivity(Activityname, ActivityTime, IPAddress, Location, Deviceinfo, userID);
        }
        
        public System.Threading.Tasks.Task AddUserActivityAsync(string Activityname, System.DateTime ActivityTime, string IPAddress, string Location, string Deviceinfo, int userID)
        {
            return base.Channel.AddUserActivityAsync(Activityname, ActivityTime, IPAddress, Location, Deviceinfo, userID);
        }
        
        public string GetAccessRightsbyUserType(int UserTypeID, string Password)
        {
            return base.Channel.GetAccessRightsbyUserType(UserTypeID, Password);
        }
        
        public System.Threading.Tasks.Task<string> GetAccessRightsbyUserTypeAsync(int UserTypeID, string Password)
        {
            return base.Channel.GetAccessRightsbyUserTypeAsync(UserTypeID, Password);
        }
        
        public string AddUser(
                    string Name, 
                    string Phonenumber, 
                    string EmailAddress, 
                    string username, 
                    string Password, 
                    string Location, 
                    decimal Accountbalance, 
                    int usertypeID, 
                    int createdByID, 
                    string RatePercent, 
                    decimal BetLowerLimit, 
                    decimal BetUpperLimit, 
                    bool CheckConditionsforPlacingBet, 
                    decimal BetLowerLimitHorsePlace, 
                    decimal BetUpperLimitHorsePlace, 
                    decimal BetLowerLimitGrayHoundWin, 
                    decimal BetUpperLimitGrayHoundWin, 
                    decimal BetLowerLimitGrayHoundPlace, 
                    decimal BetUpperLimitGrayHoundPlace, 
                    decimal BetLowerLimitMatchOdds, 
                    decimal BetUpperLimitMatchOdds, 
                    decimal BetLowerLimitInningsRunns, 
                    decimal BetUpperLimitInningsRunns, 
                    decimal BetLowerLimitCompletedMatch, 
                    decimal BetUpperLimitCompletedMatch, 
                    decimal BetLowerLimitMatchOddsSoccer, 
                    decimal BetUpperLimitMatchOddsSoccer, 
                    decimal BetLowerLimitMatchOddsTennis, 
                    decimal BetUpperLimitMatchOddsTennis, 
                    decimal BetUpperLimitTiedMatch, 
                    decimal BetLowerLimitTiedMatch, 
                    decimal BetUpperLimitWinner, 
                    decimal BetLowerLimitWinner, 
                    string Passwordforvalidate, 
                    decimal BetUpperLimitFancy, 
                    decimal BetLowerLimitFancy)
        {
            return base.Channel.AddUser(Name, Phonenumber, EmailAddress, username, Password, Location, Accountbalance, usertypeID, createdByID, RatePercent, BetLowerLimit, BetUpperLimit, CheckConditionsforPlacingBet, BetLowerLimitHorsePlace, BetUpperLimitHorsePlace, BetLowerLimitGrayHoundWin, BetUpperLimitGrayHoundWin, BetLowerLimitGrayHoundPlace, BetUpperLimitGrayHoundPlace, BetLowerLimitMatchOdds, BetUpperLimitMatchOdds, BetLowerLimitInningsRunns, BetUpperLimitInningsRunns, BetLowerLimitCompletedMatch, BetUpperLimitCompletedMatch, BetLowerLimitMatchOddsSoccer, BetUpperLimitMatchOddsSoccer, BetLowerLimitMatchOddsTennis, BetUpperLimitMatchOddsTennis, BetUpperLimitTiedMatch, BetLowerLimitTiedMatch, BetUpperLimitWinner, BetLowerLimitWinner, Passwordforvalidate, BetUpperLimitFancy, BetLowerLimitFancy);
        }
        
        public System.Threading.Tasks.Task<string> AddUserAsync(
                    string Name, 
                    string Phonenumber, 
                    string EmailAddress, 
                    string username, 
                    string Password, 
                    string Location, 
                    decimal Accountbalance, 
                    int usertypeID, 
                    int createdByID, 
                    string RatePercent, 
                    decimal BetLowerLimit, 
                    decimal BetUpperLimit, 
                    bool CheckConditionsforPlacingBet, 
                    decimal BetLowerLimitHorsePlace, 
                    decimal BetUpperLimitHorsePlace, 
                    decimal BetLowerLimitGrayHoundWin, 
                    decimal BetUpperLimitGrayHoundWin, 
                    decimal BetLowerLimitGrayHoundPlace, 
                    decimal BetUpperLimitGrayHoundPlace, 
                    decimal BetLowerLimitMatchOdds, 
                    decimal BetUpperLimitMatchOdds, 
                    decimal BetLowerLimitInningsRunns, 
                    decimal BetUpperLimitInningsRunns, 
                    decimal BetLowerLimitCompletedMatch, 
                    decimal BetUpperLimitCompletedMatch, 
                    decimal BetLowerLimitMatchOddsSoccer, 
                    decimal BetUpperLimitMatchOddsSoccer, 
                    decimal BetLowerLimitMatchOddsTennis, 
                    decimal BetUpperLimitMatchOddsTennis, 
                    decimal BetUpperLimitTiedMatch, 
                    decimal BetLowerLimitTiedMatch, 
                    decimal BetUpperLimitWinner, 
                    decimal BetLowerLimitWinner, 
                    string Passwordforvalidate, 
                    decimal BetUpperLimitFancy, 
                    decimal BetLowerLimitFancy)
        {
            return base.Channel.AddUserAsync(Name, Phonenumber, EmailAddress, username, Password, Location, Accountbalance, usertypeID, createdByID, RatePercent, BetLowerLimit, BetUpperLimit, CheckConditionsforPlacingBet, BetLowerLimitHorsePlace, BetUpperLimitHorsePlace, BetLowerLimitGrayHoundWin, BetUpperLimitGrayHoundWin, BetLowerLimitGrayHoundPlace, BetUpperLimitGrayHoundPlace, BetLowerLimitMatchOdds, BetUpperLimitMatchOdds, BetLowerLimitInningsRunns, BetUpperLimitInningsRunns, BetLowerLimitCompletedMatch, BetUpperLimitCompletedMatch, BetLowerLimitMatchOddsSoccer, BetUpperLimitMatchOddsSoccer, BetLowerLimitMatchOddsTennis, BetUpperLimitMatchOddsTennis, BetUpperLimitTiedMatch, BetLowerLimitTiedMatch, BetUpperLimitWinner, BetLowerLimitWinner, Passwordforvalidate, BetUpperLimitFancy, BetLowerLimitFancy);
        }
        
        public string CheckifUserExists(string username)
        {
            return base.Channel.CheckifUserExists(username);
        }
        
        public System.Threading.Tasks.Task<string> CheckifUserExistsAsync(string username)
        {
            return base.Channel.CheckifUserExistsAsync(username);
        }
        
        public void AddCredittoUser(decimal Amount, int userID, int AddedbyID, System.DateTime addedtime, decimal Amountremoved, bool AddtoUserAccounts, string AccountsTitle, bool isCreditAmount, string Password)
        {
            base.Channel.AddCredittoUser(Amount, userID, AddedbyID, addedtime, Amountremoved, AddtoUserAccounts, AccountsTitle, isCreditAmount, Password);
        }
        
        public System.Threading.Tasks.Task AddCredittoUserAsync(decimal Amount, int userID, int AddedbyID, System.DateTime addedtime, decimal Amountremoved, bool AddtoUserAccounts, string AccountsTitle, bool isCreditAmount, string Password)
        {
            return base.Channel.AddCredittoUserAsync(Amount, userID, AddedbyID, addedtime, Amountremoved, AddtoUserAccounts, AccountsTitle, isCreditAmount, Password);
        }
        
        public void AddAdminAmountForSuper(string AccountsTitle, string debit, string Credit, int userID, string marketid, System.DateTime addedtime, string Password)
        {
            base.Channel.AddAdminAmountForSuper(AccountsTitle, debit, Credit, userID, marketid, addedtime, Password);
        }
        
        public System.Threading.Tasks.Task AddAdminAmountForSuperAsync(string AccountsTitle, string debit, string Credit, int userID, string marketid, System.DateTime addedtime, string Password)
        {
            return base.Channel.AddAdminAmountForSuperAsync(AccountsTitle, debit, Credit, userID, marketid, addedtime, Password);
        }
        
        public void UpdateStartBalancebyUserID(int userID, decimal newBalance, string Password)
        {
            base.Channel.UpdateStartBalancebyUserID(userID, newBalance, Password);
        }
        
        public System.Threading.Tasks.Task UpdateStartBalancebyUserIDAsync(int userID, decimal newBalance, string Password)
        {
            return base.Channel.UpdateStartBalancebyUserIDAsync(userID, newBalance, Password);
        }
        
        public void UpdateAccountsOpeningBalance(int userID, decimal Balance, string Password)
        {
            base.Channel.UpdateAccountsOpeningBalance(userID, Balance, Password);
        }
        
        public System.Threading.Tasks.Task UpdateAccountsOpeningBalanceAsync(int userID, decimal Balance, string Password)
        {
            return base.Channel.UpdateAccountsOpeningBalanceAsync(userID, Balance, Password);
        }
        
        public string GetCurrentBalancebyUser(int userid, string Password)
        {
            return base.Channel.GetCurrentBalancebyUser(userid, Password);
        }
        
        public System.Threading.Tasks.Task<string> GetCurrentBalancebyUserAsync(int userid, string Password)
        {
            return base.Channel.GetCurrentBalancebyUserAsync(userid, Password);
        }
        
        public decimal GetStartingBalance(int UserID, string Password)
        {
            return base.Channel.GetStartingBalance(UserID, Password);
        }
        
        public System.Threading.Tasks.Task<decimal> GetStartingBalanceAsync(int UserID, string Password)
        {
            return base.Channel.GetStartingBalanceAsync(UserID, Password);
        }
        
        public void AddKalijut(System.Nullable<int> userID, string eventTypeID, string competitonID, string eventID, string marketCatalogue, System.Nullable<int> updatedbyID, string eventTypeName, string competitionName, string eventName, string marketCatalogueName, System.Nullable<System.DateTime> eventOpenDate, string sheetName, string associateEventID)
        {
            base.Channel.AddKalijut(userID, eventTypeID, competitonID, eventID, marketCatalogue, updatedbyID, eventTypeName, competitionName, eventName, marketCatalogueName, eventOpenDate, sheetName, associateEventID);
        }
        
        public System.Threading.Tasks.Task AddKalijutAsync(System.Nullable<int> userID, string eventTypeID, string competitonID, string eventID, string marketCatalogue, System.Nullable<int> updatedbyID, string eventTypeName, string competitionName, string eventName, string marketCatalogueName, System.Nullable<System.DateTime> eventOpenDate, string sheetName, string associateEventID)
        {
            return base.Channel.AddKalijutAsync(userID, eventTypeID, competitonID, eventID, marketCatalogue, updatedbyID, eventTypeName, competitionName, eventName, marketCatalogueName, eventOpenDate, sheetName, associateEventID);
        }
        
        public void MarketCatalogueSelectionskalijut(string marketCatalogueID, string selectionID, string selectionName, string jockeyName, string wearing, string wearingDesc, string clothnumber, string stallDraw)
        {
            base.Channel.MarketCatalogueSelectionskalijut(marketCatalogueID, selectionID, selectionName, jockeyName, wearing, wearingDesc, clothnumber, stallDraw);
        }
        
        public System.Threading.Tasks.Task MarketCatalogueSelectionskalijutAsync(string marketCatalogueID, string selectionID, string selectionName, string jockeyName, string wearing, string wearingDesc, string clothnumber, string stallDraw)
        {
            return base.Channel.MarketCatalogueSelectionskalijutAsync(marketCatalogueID, selectionID, selectionName, jockeyName, wearing, wearingDesc, clothnumber, stallDraw);
        }
        
        public void UpdateAccountBalacnebyUser(int userid, decimal AccountBalance, string Password)
        {
            base.Channel.UpdateAccountBalacnebyUser(userid, AccountBalance, Password);
        }
        
        public System.Threading.Tasks.Task UpdateAccountBalacnebyUserAsync(int userid, decimal AccountBalance, string Password)
        {
            return base.Channel.UpdateAccountBalacnebyUserAsync(userid, AccountBalance, Password);
        }
        
        public string GetAllCuttingUsers(string Passwordforvalidate)
        {
            return base.Channel.GetAllCuttingUsers(Passwordforvalidate);
        }
        
        public System.Threading.Tasks.Task<string> GetAllCuttingUsersAsync(string Passwordforvalidate)
        {
            return base.Channel.GetAllCuttingUsersAsync(Passwordforvalidate);
        }
        
        public string GetAllUsersbyUserType(int userID, int usertypeID, string Password)
        {
            return base.Channel.GetAllUsersbyUserType(userID, usertypeID, Password);
        }
        
        public System.Threading.Tasks.Task<string> GetAllUsersbyUserTypeAsync(int userID, int usertypeID, string Password)
        {
            return base.Channel.GetAllUsersbyUserTypeAsync(userID, usertypeID, Password);
        }
        
        public string GetAllUsersbyUserTypeNew(int userID, int usertypeID, string Password)
        {
            return base.Channel.GetAllUsersbyUserTypeNew(userID, usertypeID, Password);
        }
        
        public System.Threading.Tasks.Task<string> GetAllUsersbyUserTypeNewAsync(int userID, int usertypeID, string Password)
        {
            return base.Channel.GetAllUsersbyUserTypeNewAsync(userID, usertypeID, Password);
        }
        
        public string GetCompletedResult()
        {
            return base.Channel.GetCompletedResult();
        }
        
        public System.Threading.Tasks.Task<string> GetCompletedResultAsync()
        {
            return base.Channel.GetCompletedResultAsync();
        }
        
        public string GetUserDetailsbyID(int userID, string Password)
        {
            return base.Channel.GetUserDetailsbyID(userID, Password);
        }
        
        public System.Threading.Tasks.Task<string> GetUserDetailsbyIDAsync(int userID, string Password)
        {
            return base.Channel.GetUserDetailsbyIDAsync(userID, Password);
        }
        
        public string GetMarketbyEventID(string EventID)
        {
            return base.Channel.GetMarketbyEventID(EventID);
        }
        
        public System.Threading.Tasks.Task<string> GetMarketbyEventIDAsync(string EventID)
        {
            return base.Channel.GetMarketbyEventIDAsync(EventID);
        }
        
        public string GetMarketbyEventID1(string EventID)
        {
            return base.Channel.GetMarketbyEventID1(EventID);
        }
        
        public System.Threading.Tasks.Task<string> GetMarketbyEventID1Async(string EventID)
        {
            return base.Channel.GetMarketbyEventID1Async(EventID);
        }
        
        public string SetDeleteStatusofUser(int UserID, bool isDeleted, string Password)
        {
            return base.Channel.SetDeleteStatusofUser(UserID, isDeleted, Password);
        }
        
        public System.Threading.Tasks.Task<string> SetDeleteStatusofUserAsync(int UserID, bool isDeleted, string Password)
        {
            return base.Channel.SetDeleteStatusofUserAsync(UserID, isDeleted, Password);
        }
        
        public string SetBlockedStatusofUser(int UserID, bool isBlocked, string Password)
        {
            return base.Channel.SetBlockedStatusofUser(UserID, isBlocked, Password);
        }
        
        public System.Threading.Tasks.Task<string> SetBlockedStatusofUserAsync(int UserID, bool isBlocked, string Password)
        {
            return base.Channel.SetBlockedStatusofUserAsync(UserID, isBlocked, Password);
        }
        
        public string ResetPasswordofUser(int UserID, string Password, int Updatedby, System.DateTime updatedtime, string Passwordforvalidate)
        {
            return base.Channel.ResetPasswordofUser(UserID, Password, Updatedby, updatedtime, Passwordforvalidate);
        }
        
        public System.Threading.Tasks.Task<string> ResetPasswordofUserAsync(int UserID, string Password, int Updatedby, System.DateTime updatedtime, string Passwordforvalidate)
        {
            return base.Channel.ResetPasswordofUserAsync(UserID, Password, Updatedby, updatedtime, Passwordforvalidate);
        }
        
        public string GetUserMArket(int userID)
        {
            return base.Channel.GetUserMArket(userID);
        }
        
        public System.Threading.Tasks.Task<string> GetUserMArketAsync(int userID)
        {
            return base.Channel.GetUserMArketAsync(userID);
        }
        
        public string InsertUserMarket(System.Collections.Generic.List<string> allmarketitems, int userID, int UpdatedbyID, bool DeleteOldMarkets)
        {
            return base.Channel.InsertUserMarket(allmarketitems, userID, UpdatedbyID, DeleteOldMarkets);
        }
        
        public System.Threading.Tasks.Task<string> InsertUserMarketAsync(System.Collections.Generic.List<string> allmarketitems, int userID, int UpdatedbyID, bool DeleteOldMarkets)
        {
            return base.Channel.InsertUserMarketAsync(allmarketitems, userID, UpdatedbyID, DeleteOldMarkets);
        }
        
        public string InsertUserMarketKJ(System.Collections.Generic.List<string> kalijutt, System.Collections.Generic.List<string> KaliCatelogIDs, System.Collections.Generic.List<string> selections, System.Collections.Generic.List<int> userIDs, string EventID, int UpdatedbyID)
        {
            return base.Channel.InsertUserMarketKJ(kalijutt, KaliCatelogIDs, selections, userIDs, EventID, UpdatedbyID);
        }
        
        public System.Threading.Tasks.Task<string> InsertUserMarketKJAsync(System.Collections.Generic.List<string> kalijutt, System.Collections.Generic.List<string> KaliCatelogIDs, System.Collections.Generic.List<string> selections, System.Collections.Generic.List<int> userIDs, string EventID, int UpdatedbyID)
        {
            return base.Channel.InsertUserMarketKJAsync(kalijutt, KaliCatelogIDs, selections, userIDs, EventID, UpdatedbyID);
        }
        
        public string InsertUserMarketSFig(System.Collections.Generic.List<string> SmallFig, System.Collections.Generic.List<string> smallFigCatelogIDs, System.Collections.Generic.List<string> selections, System.Collections.Generic.List<int> userIDs, string EventID, int UpdatedbyID)
        {
            return base.Channel.InsertUserMarketSFig(SmallFig, smallFigCatelogIDs, selections, userIDs, EventID, UpdatedbyID);
        }
        
        public System.Threading.Tasks.Task<string> InsertUserMarketSFigAsync(System.Collections.Generic.List<string> SmallFig, System.Collections.Generic.List<string> smallFigCatelogIDs, System.Collections.Generic.List<string> selections, System.Collections.Generic.List<int> userIDs, string EventID, int UpdatedbyID)
        {
            return base.Channel.InsertUserMarketSFigAsync(SmallFig, smallFigCatelogIDs, selections, userIDs, EventID, UpdatedbyID);
        }
        
        public string InsertUserMarketFigure(System.Collections.Generic.List<string> Figure, System.Collections.Generic.List<string> FigureCatelogIDs, System.Collections.Generic.List<string> Figureselections, System.Collections.Generic.List<string> FigureselectionsName, System.Collections.Generic.List<int> userIDs, string EventID, int UpdatedbyID)
        {
            return base.Channel.InsertUserMarketFigure(Figure, FigureCatelogIDs, Figureselections, FigureselectionsName, userIDs, EventID, UpdatedbyID);
        }
        
        public System.Threading.Tasks.Task<string> InsertUserMarketFigureAsync(System.Collections.Generic.List<string> Figure, System.Collections.Generic.List<string> FigureCatelogIDs, System.Collections.Generic.List<string> Figureselections, System.Collections.Generic.List<string> FigureselectionsName, System.Collections.Generic.List<int> userIDs, string EventID, int UpdatedbyID)
        {
            return base.Channel.InsertUserMarketFigureAsync(Figure, FigureCatelogIDs, Figureselections, FigureselectionsName, userIDs, EventID, UpdatedbyID);
        }
        
        public string InsertIndainFancy(System.Collections.Generic.List<UserServiceReference.MarketBookForindianFancy> allmarkets, System.Collections.Generic.List<UserServiceReference.RunnerForIndianFancy> runners, System.Collections.Generic.List<int> userIDs, string EventID, string Password)
        {
            return base.Channel.InsertIndainFancy(allmarkets, runners, userIDs, EventID, Password);
        }
        
        public System.Threading.Tasks.Task<string> InsertIndainFancyAsync(System.Collections.Generic.List<UserServiceReference.MarketBookForindianFancy> allmarkets, System.Collections.Generic.List<UserServiceReference.RunnerForIndianFancy> runners, System.Collections.Generic.List<int> userIDs, string EventID, string Password)
        {
            return base.Channel.InsertIndainFancyAsync(allmarkets, runners, userIDs, EventID, Password);
        }
        
        public string GetUserMarketforSelection(int UserID)
        {
            return base.Channel.GetUserMarketforSelection(UserID);
        }
        
        public System.Threading.Tasks.Task<string> GetUserMarketforSelectionAsync(int UserID)
        {
            return base.Channel.GetUserMarketforSelectionAsync(UserID);
        }
        
        public string GetFavoriteEventTypes(int userID)
        {
            return base.Channel.GetFavoriteEventTypes(userID);
        }
        
        public System.Threading.Tasks.Task<string> GetFavoriteEventTypesAsync(int userID)
        {
            return base.Channel.GetFavoriteEventTypesAsync(userID);
        }
        
        public void AddtoFavoriteEventTypes(string EventTypeID, int userID)
        {
            base.Channel.AddtoFavoriteEventTypes(EventTypeID, userID);
        }
        
        public System.Threading.Tasks.Task AddtoFavoriteEventTypesAsync(string EventTypeID, int userID)
        {
            return base.Channel.AddtoFavoriteEventTypesAsync(EventTypeID, userID);
        }
        
        public void DeleteFromFavoriteEventTypes(string EventTypeID, int userID)
        {
            base.Channel.DeleteFromFavoriteEventTypes(EventTypeID, userID);
        }
        
        public System.Threading.Tasks.Task DeleteFromFavoriteEventTypesAsync(string EventTypeID, int userID)
        {
            return base.Channel.DeleteFromFavoriteEventTypesAsync(EventTypeID, userID);
        }
        
        public string GetFavoriteEvents(int userID)
        {
            return base.Channel.GetFavoriteEvents(userID);
        }
        
        public System.Threading.Tasks.Task<string> GetFavoriteEventsAsync(int userID)
        {
            return base.Channel.GetFavoriteEventsAsync(userID);
        }
        
        public void AddtoFavoriteEvents(string EventID, int userID)
        {
            base.Channel.AddtoFavoriteEvents(EventID, userID);
        }
        
        public System.Threading.Tasks.Task AddtoFavoriteEventsAsync(string EventID, int userID)
        {
            return base.Channel.AddtoFavoriteEventsAsync(EventID, userID);
        }
        
        public void DeleteFromFavoriteEvents(string EventID, int userID)
        {
            base.Channel.DeleteFromFavoriteEvents(EventID, userID);
        }
        
        public System.Threading.Tasks.Task DeleteFromFavoriteEventsAsync(string EventID, int userID)
        {
            return base.Channel.DeleteFromFavoriteEventsAsync(EventID, userID);
        }
        
        public string GetFavoriteCompetitions(int userID)
        {
            return base.Channel.GetFavoriteCompetitions(userID);
        }
        
        public System.Threading.Tasks.Task<string> GetFavoriteCompetitionsAsync(int userID)
        {
            return base.Channel.GetFavoriteCompetitionsAsync(userID);
        }
        
        public void AddtoFavoriteCompetitions(string EventID, int userID)
        {
            base.Channel.AddtoFavoriteCompetitions(EventID, userID);
        }
        
        public System.Threading.Tasks.Task AddtoFavoriteCompetitionsAsync(string EventID, int userID)
        {
            return base.Channel.AddtoFavoriteCompetitionsAsync(EventID, userID);
        }
        
        public void DeleteFromFavoriteCompetitions(string EventID, int userID)
        {
            base.Channel.DeleteFromFavoriteCompetitions(EventID, userID);
        }
        
        public System.Threading.Tasks.Task DeleteFromFavoriteCompetitionsAsync(string EventID, int userID)
        {
            return base.Channel.DeleteFromFavoriteCompetitionsAsync(EventID, userID);
        }
        
        public string GetEventTypeIDs(int userID)
        {
            return base.Channel.GetEventTypeIDs(userID);
        }
        
        public System.Threading.Tasks.Task<string> GetEventTypeIDsAsync(int userID)
        {
            return base.Channel.GetEventTypeIDsAsync(userID);
        }
        
        public string getlistuserids(int createdid)
        {
            return base.Channel.getlistuserids(createdid);
        }
        
        public System.Threading.Tasks.Task<string> getlistuseridsAsync(int createdid)
        {
            return base.Channel.getlistuseridsAsync(createdid);
        }
        
        public string GetCompetitionIDs(string eventTypeID, int userID)
        {
            return base.Channel.GetCompetitionIDs(eventTypeID, userID);
        }
        
        public System.Threading.Tasks.Task<string> GetCompetitionIDsAsync(string eventTypeID, int userID)
        {
            return base.Channel.GetCompetitionIDsAsync(eventTypeID, userID);
        }
        
        public string GetEventsIDs(string CompetitionID, int userID)
        {
            return base.Channel.GetEventsIDs(CompetitionID, userID);
        }
        
        public System.Threading.Tasks.Task<string> GetEventsIDsAsync(string CompetitionID, int userID)
        {
            return base.Channel.GetEventsIDsAsync(CompetitionID, userID);
        }
        
        public string GetMarketCatalogueIDs(string eventID, int userID)
        {
            return base.Channel.GetMarketCatalogueIDs(eventID, userID);
        }
        
        public System.Threading.Tasks.Task<string> GetMarketCatalogueIDsAsync(string eventID, int userID)
        {
            return base.Channel.GetMarketCatalogueIDsAsync(eventID, userID);
        }
        
        public string InsertUserBet(
                    string SelectionID, 
                    int userID, 
                    string UserOdd, 
                    string amount, 
                    string bettype, 
                    string LiveOdd, 
                    bool ismatched, 
                    string status, 
                    string marketbookId, 
                    System.DateTime createddate, 
                    System.DateTime updatedtime, 
                    string Selectionname, 
                    string Marketbookname, 
                    string Liability, 
                    string BetSize, 
                    decimal PendingAmount, 
                    string location, 
                    long ParentID, 
                    decimal MaxOddBack, 
                    decimal MaxOddLay, 
                    bool CheckforMaxOddBack, 
                    bool CheckforMaxOddLay, 
                    string Password)
        {
            return base.Channel.InsertUserBet(SelectionID, userID, UserOdd, amount, bettype, LiveOdd, ismatched, status, marketbookId, createddate, updatedtime, Selectionname, Marketbookname, Liability, BetSize, PendingAmount, location, ParentID, MaxOddBack, MaxOddLay, CheckforMaxOddBack, CheckforMaxOddLay, Password);
        }
        
        public System.Threading.Tasks.Task<string> InsertUserBetAsync(
                    string SelectionID, 
                    int userID, 
                    string UserOdd, 
                    string amount, 
                    string bettype, 
                    string LiveOdd, 
                    bool ismatched, 
                    string status, 
                    string marketbookId, 
                    System.DateTime createddate, 
                    System.DateTime updatedtime, 
                    string Selectionname, 
                    string Marketbookname, 
                    string Liability, 
                    string BetSize, 
                    decimal PendingAmount, 
                    string location, 
                    long ParentID, 
                    decimal MaxOddBack, 
                    decimal MaxOddLay, 
                    bool CheckforMaxOddBack, 
                    bool CheckforMaxOddLay, 
                    string Password)
        {
            return base.Channel.InsertUserBetAsync(SelectionID, userID, UserOdd, amount, bettype, LiveOdd, ismatched, status, marketbookId, createddate, updatedtime, Selectionname, Marketbookname, Liability, BetSize, PendingAmount, location, ParentID, MaxOddBack, MaxOddLay, CheckforMaxOddBack, CheckforMaxOddLay, Password);
        }
        
        public string InsertUserBetAdmin(
                    string SelectionID, 
                    int userID, 
                    string UserOdd, 
                    string amount, 
                    string bettype, 
                    string LiveOdd, 
                    bool ismatched, 
                    string status, 
                    string marketbookId, 
                    System.DateTime createddate, 
                    System.DateTime updatedtime, 
                    string Selectionname, 
                    string Marketbookname, 
                    string Liability, 
                    string BetSize, 
                    decimal PendingAmount, 
                    string location, 
                    long ParentID, 
                    string Password)
        {
            return base.Channel.InsertUserBetAdmin(SelectionID, userID, UserOdd, amount, bettype, LiveOdd, ismatched, status, marketbookId, createddate, updatedtime, Selectionname, Marketbookname, Liability, BetSize, PendingAmount, location, ParentID, Password);
        }
        
        public System.Threading.Tasks.Task<string> InsertUserBetAdminAsync(
                    string SelectionID, 
                    int userID, 
                    string UserOdd, 
                    string amount, 
                    string bettype, 
                    string LiveOdd, 
                    bool ismatched, 
                    string status, 
                    string marketbookId, 
                    System.DateTime createddate, 
                    System.DateTime updatedtime, 
                    string Selectionname, 
                    string Marketbookname, 
                    string Liability, 
                    string BetSize, 
                    decimal PendingAmount, 
                    string location, 
                    long ParentID, 
                    string Password)
        {
            return base.Channel.InsertUserBetAdminAsync(SelectionID, userID, UserOdd, amount, bettype, LiveOdd, ismatched, status, marketbookId, createddate, updatedtime, Selectionname, Marketbookname, Liability, BetSize, PendingAmount, location, ParentID, Password);
        }
        
        public bool UpdateUserBet(long ID, int userID, string UserOdd, string amount, string bettype, string LiveOdd, bool ismatched, string status, string marketbookId, System.DateTime createddate, System.DateTime updatedtime, string Liabality, string BetSize, decimal PendingAmount, string Password)
        {
            return base.Channel.UpdateUserBet(ID, userID, UserOdd, amount, bettype, LiveOdd, ismatched, status, marketbookId, createddate, updatedtime, Liabality, BetSize, PendingAmount, Password);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserBetAsync(long ID, int userID, string UserOdd, string amount, string bettype, string LiveOdd, bool ismatched, string status, string marketbookId, System.DateTime createddate, System.DateTime updatedtime, string Liabality, string BetSize, decimal PendingAmount, string Password)
        {
            return base.Channel.UpdateUserBetAsync(ID, userID, UserOdd, amount, bettype, LiveOdd, ismatched, status, marketbookId, createddate, updatedtime, Liabality, BetSize, PendingAmount, Password);
        }
        
        public string GetUserbetsbyUserIDandMarketID(int UserID, string MarketID, string Password)
        {
            return base.Channel.GetUserbetsbyUserIDandMarketID(UserID, MarketID, Password);
        }
        
        public System.Threading.Tasks.Task<string> GetUserbetsbyUserIDandMarketIDAsync(int UserID, string MarketID, string Password)
        {
            return base.Channel.GetUserbetsbyUserIDandMarketIDAsync(UserID, MarketID, Password);
        }
        
        public string GetBetHistry(int UserID, string frmdate, string todate)
        {
            return base.Channel.GetBetHistry(UserID, frmdate, todate);
        }
        
        public System.Threading.Tasks.Task<string> GetBetHistryAsync(int UserID, string frmdate, string todate)
        {
            return base.Channel.GetBetHistryAsync(UserID, frmdate, todate);
        }
        
        public UserServiceReference.SP_Users_GetMaxOddBackandLay_Result GetMaxOddBackandLay(int UserID)
        {
            return base.Channel.GetMaxOddBackandLay(UserID);
        }
        
        public System.Threading.Tasks.Task<UserServiceReference.SP_Users_GetMaxOddBackandLay_Result> GetMaxOddBackandLayAsync(int UserID)
        {
            return base.Channel.GetMaxOddBackandLayAsync(UserID);
        }
        
        public string GetMaxOddBackandLayStr(int UserID)
        {
            return base.Channel.GetMaxOddBackandLayStr(UserID);
        }
        
        public System.Threading.Tasks.Task<string> GetMaxOddBackandLayStrAsync(int UserID)
        {
            return base.Channel.GetMaxOddBackandLayStrAsync(UserID);
        }
        
        public string GetUserbetsbyUserID(int UserID, string Password)
        {
            return base.Channel.GetUserbetsbyUserID(UserID, Password);
        }
        
        public System.Threading.Tasks.Task<string> GetUserbetsbyUserIDAsync(int UserID, string Password)
        {
            return base.Channel.GetUserbetsbyUserIDAsync(UserID, Password);
        }
        
        public void UpdateUserBetMatched(System.Collections.Generic.List<long> ID, string Password)
        {
            base.Channel.UpdateUserBetMatched(ID, Password);
        }
        
        public System.Threading.Tasks.Task UpdateUserBetMatchedAsync(System.Collections.Generic.List<long> ID, string Password)
        {
            return base.Channel.UpdateUserBetMatchedAsync(ID, Password);
        }
        
        public string GetCurrentLiabality(int userID)
        {
            return base.Channel.GetCurrentLiabality(userID);
        }
        
        public System.Threading.Tasks.Task<string> GetCurrentLiabalityAsync(int userID)
        {
            return base.Channel.GetCurrentLiabalityAsync(userID);
        }
        
        public string GetAgentRate(int userID)
        {
            return base.Channel.GetAgentRate(userID);
        }
        
        public System.Threading.Tasks.Task<string> GetAgentRateAsync(int userID)
        {
            return base.Channel.GetAgentRateAsync(userID);
        }
        
        public string GetSuperName(int userID)
        {
            return base.Channel.GetSuperName(userID);
        }
        
        public System.Threading.Tasks.Task<string> GetSuperNameAsync(int userID)
        {
            return base.Channel.GetSuperNameAsync(userID);
        }
        
        public void CheckforMatchCompleted()
        {
            base.Channel.CheckforMatchCompleted();
        }
        
        public System.Threading.Tasks.Task CheckforMatchCompletedAsync()
        {
            return base.Channel.CheckforMatchCompletedAsync();
        }
        
        public void CloseAllClosedMarkets()
        {
            base.Channel.CloseAllClosedMarkets();
        }
        
        public System.Threading.Tasks.Task CloseAllClosedMarketsAsync()
        {
            return base.Channel.CloseAllClosedMarketsAsync();
        }
        
        public string SetAgentRateofUser(int UserID, string AgentRate, string Password)
        {
            return base.Channel.SetAgentRateofUser(UserID, AgentRate, Password);
        }
        
        public System.Threading.Tasks.Task<string> SetAgentRateofUserAsync(int UserID, string AgentRate, string Password)
        {
            return base.Channel.SetAgentRateofUserAsync(UserID, AgentRate, Password);
        }
        
        public void UpdateUserBetUnMatchedStatusTocomplete(System.Collections.Generic.List<long> ID, string Password)
        {
            base.Channel.UpdateUserBetUnMatchedStatusTocomplete(ID, Password);
        }
        
        public System.Threading.Tasks.Task UpdateUserBetUnMatchedStatusTocompleteAsync(System.Collections.Generic.List<long> ID, string Password)
        {
            return base.Channel.UpdateUserBetUnMatchedStatusTocompleteAsync(ID, Password);
        }
        
        public void UpdateUserBetUnMatchedStatusTocompleteforCuttingUser(long ID, string Password)
        {
            base.Channel.UpdateUserBetUnMatchedStatusTocompleteforCuttingUser(ID, Password);
        }
        
        public System.Threading.Tasks.Task UpdateUserBetUnMatchedStatusTocompleteforCuttingUserAsync(long ID, string Password)
        {
            return base.Channel.UpdateUserBetUnMatchedStatusTocompleteforCuttingUserAsync(ID, Password);
        }
        
        public string GetMarketsOpenedbyUser(int userID)
        {
            return base.Channel.GetMarketsOpenedbyUser(userID);
        }
        
        public System.Threading.Tasks.Task<string> GetMarketsOpenedbyUserAsync(int userID)
        {
            return base.Channel.GetMarketsOpenedbyUserAsync(userID);
        }
        
        public void SetMarketBookOpenbyUSer(int userID, string MarketBookID)
        {
            base.Channel.SetMarketBookOpenbyUSer(userID, MarketBookID);
        }
        
        public System.Threading.Tasks.Task SetMarketBookOpenbyUSerAsync(int userID, string MarketBookID)
        {
            return base.Channel.SetMarketBookOpenbyUSerAsync(userID, MarketBookID);
        }
        
        public string SetMarketBookOpenbyUSerandGet(int userID, string MarketBookID)
        {
            return base.Channel.SetMarketBookOpenbyUSerandGet(userID, MarketBookID);
        }
        
        public System.Threading.Tasks.Task<string> SetMarketBookOpenbyUSerandGetAsync(int userID, string MarketBookID)
        {
            return base.Channel.SetMarketBookOpenbyUSerandGetAsync(userID, MarketBookID);
        }
        
        public string SetMarketBookOpenbyUSerandGet0(int userID, string MarketBookID)
        {
            return base.Channel.SetMarketBookOpenbyUSerandGet0(userID, MarketBookID);
        }
        
        public System.Threading.Tasks.Task<string> SetMarketBookOpenbyUSerandGet0Async(int userID, string MarketBookID)
        {
            return base.Channel.SetMarketBookOpenbyUSerandGet0Async(userID, MarketBookID);
        }
        
        public string SetMarketBookOpenbyUSerandGet1(int userID, string MarketBookID)
        {
            return base.Channel.SetMarketBookOpenbyUSerandGet1(userID, MarketBookID);
        }
        
        public System.Threading.Tasks.Task<string> SetMarketBookOpenbyUSerandGet1Async(int userID, string MarketBookID)
        {
            return base.Channel.SetMarketBookOpenbyUSerandGet1Async(userID, MarketBookID);
        }
        
        public string SetMarketBookOpenbyUSerandGet2(int userID, string MarketBookID)
        {
            return base.Channel.SetMarketBookOpenbyUSerandGet2(userID, MarketBookID);
        }
        
        public System.Threading.Tasks.Task<string> SetMarketBookOpenbyUSerandGet2Async(int userID, string MarketBookID)
        {
            return base.Channel.SetMarketBookOpenbyUSerandGet2Async(userID, MarketBookID);
        }
        
        public void SetMarketBookClosedbyUser(int userID, string MarketBookID)
        {
            base.Channel.SetMarketBookClosedbyUser(userID, MarketBookID);
        }
        
        public System.Threading.Tasks.Task SetMarketBookClosedbyUserAsync(int userID, string MarketBookID)
        {
            return base.Channel.SetMarketBookClosedbyUserAsync(userID, MarketBookID);
        }
        
        public void SetMarketClosedAllUsers(string MarketbookID)
        {
            base.Channel.SetMarketClosedAllUsers(MarketbookID);
        }
        
        public System.Threading.Tasks.Task SetMarketClosedAllUsersAsync(string MarketbookID)
        {
            return base.Channel.SetMarketClosedAllUsersAsync(MarketbookID);
        }
        
        public System.Collections.Generic.List<UserServiceReference.SP_MarketCatalogueSelections_Get_Result> GetSelectionNamesbyMarketID(string MarketID)
        {
            return base.Channel.GetSelectionNamesbyMarketID(MarketID);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<UserServiceReference.SP_MarketCatalogueSelections_Get_Result>> GetSelectionNamesbyMarketIDAsync(string MarketID)
        {
            return base.Channel.GetSelectionNamesbyMarketIDAsync(MarketID);
        }
        
        public string GetAccountsDatabyUserIDandDateRange(int userID, string From, string To, bool isCreditAmount, string Password)
        {
            return base.Channel.GetAccountsDatabyUserIDandDateRange(userID, From, To, isCreditAmount, Password);
        }
        
        public System.Threading.Tasks.Task<string> GetAccountsDatabyUserIDandDateRangeAsync(int userID, string From, string To, bool isCreditAmount, string Password)
        {
            return base.Channel.GetAccountsDatabyUserIDandDateRangeAsync(userID, From, To, isCreditAmount, Password);
        }
        
        public string GetAccountsDatabyCreatedByID(int userID, bool isCreditAmount, string Password)
        {
            return base.Channel.GetAccountsDatabyCreatedByID(userID, isCreditAmount, Password);
        }
        
        public System.Threading.Tasks.Task<string> GetAccountsDatabyCreatedByIDAsync(int userID, bool isCreditAmount, string Password)
        {
            return base.Channel.GetAccountsDatabyCreatedByIDAsync(userID, isCreditAmount, Password);
        }
        
        public string GetAccountsDatabyCreatedByIDForSuper(int userID, bool isCreditAmount, string Password)
        {
            return base.Channel.GetAccountsDatabyCreatedByIDForSuper(userID, isCreditAmount, Password);
        }
        
        public System.Threading.Tasks.Task<string> GetAccountsDatabyCreatedByIDForSuperAsync(int userID, bool isCreditAmount, string Password)
        {
            return base.Channel.GetAccountsDatabyCreatedByIDForSuperAsync(userID, isCreditAmount, Password);
        }
        
        public string GetAccountsDatabyCreatedByIDForSamiAdmin(int userID, bool isCreditAmount, string Password)
        {
            return base.Channel.GetAccountsDatabyCreatedByIDForSamiAdmin(userID, isCreditAmount, Password);
        }
        
        public System.Threading.Tasks.Task<string> GetAccountsDatabyCreatedByIDForSamiAdminAsync(int userID, bool isCreditAmount, string Password)
        {
            return base.Channel.GetAccountsDatabyCreatedByIDForSamiAdminAsync(userID, isCreditAmount, Password);
        }
        
        public string GetAccountsDataForAdmin(int UserID, bool isCreditAmount, string Password)
        {
            return base.Channel.GetAccountsDataForAdmin(UserID, isCreditAmount, Password);
        }
        
        public System.Threading.Tasks.Task<string> GetAccountsDataForAdminAsync(int UserID, bool isCreditAmount, string Password)
        {
            return base.Channel.GetAccountsDataForAdminAsync(UserID, isCreditAmount, Password);
        }
        
        public decimal GetProfitorLossbyUserID(int userID, bool isCreditAmount, string Password)
        {
            return base.Channel.GetProfitorLossbyUserID(userID, isCreditAmount, Password);
        }
        
        public System.Threading.Tasks.Task<decimal> GetProfitorLossbyUserIDAsync(int userID, bool isCreditAmount, string Password)
        {
            return base.Channel.GetProfitorLossbyUserIDAsync(userID, isCreditAmount, Password);
        }
        
        public decimal GetProfitorLossforSuper(int userID, string Password)
        {
            return base.Channel.GetProfitorLossforSuper(userID, Password);
        }
        
        public System.Threading.Tasks.Task<decimal> GetProfitorLossforSuperAsync(int userID, string Password)
        {
            return base.Channel.GetProfitorLossforSuperAsync(userID, Password);
        }
        
        public string GetAccountsDataForCommisionaccount(string Password)
        {
            return base.Channel.GetAccountsDataForCommisionaccount(Password);
        }
        
        public System.Threading.Tasks.Task<string> GetAccountsDataForCommisionaccountAsync(string Password)
        {
            return base.Channel.GetAccountsDataForCommisionaccountAsync(Password);
        }
        
        public void DownloadAllMarketHorseRace(string Password)
        {
            base.Channel.DownloadAllMarketHorseRace(Password);
        }
        
        public System.Threading.Tasks.Task DownloadAllMarketHorseRaceAsync(string Password)
        {
            return base.Channel.DownloadAllMarketHorseRaceAsync(Password);
        }
        
        public void DownloadAllMarketGrayHoundRace(string Password)
        {
            base.Channel.DownloadAllMarketGrayHoundRace(Password);
        }
        
        public System.Threading.Tasks.Task DownloadAllMarketGrayHoundRaceAsync(string Password)
        {
            return base.Channel.DownloadAllMarketGrayHoundRaceAsync(Password);
        }
        
        public bool UpdateUserbetamountbyID(long ID, decimal amount, bool ismatched, string Password)
        {
            return base.Channel.UpdateUserbetamountbyID(ID, amount, ismatched, Password);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserbetamountbyIDAsync(long ID, decimal amount, bool ismatched, string Password)
        {
            return base.Channel.UpdateUserbetamountbyIDAsync(ID, amount, ismatched, Password);
        }
        
        public string GetInPlayMatches(int userID)
        {
            return base.Channel.GetInPlayMatches(userID);
        }
        
        public System.Threading.Tasks.Task<string> GetInPlayMatchesAsync(int userID)
        {
            return base.Channel.GetInPlayMatchesAsync(userID);
        }
        
        public string GetInPlayMatcheswithRunners(int userID)
        {
            return base.Channel.GetInPlayMatcheswithRunners(userID);
        }
        
        public System.Threading.Tasks.Task<string> GetInPlayMatcheswithRunnersAsync(int userID)
        {
            return base.Channel.GetInPlayMatcheswithRunnersAsync(userID);
        }
        
        public string GetInPlayMatcheswithRunners1(int userID)
        {
            return base.Channel.GetInPlayMatcheswithRunners1(userID);
        }
        
        public System.Threading.Tasks.Task<string> GetInPlayMatcheswithRunners1Async(int userID)
        {
            return base.Channel.GetInPlayMatcheswithRunners1Async(userID);
        }
        
        public string GetAllMatches(int userID)
        {
            return base.Channel.GetAllMatches(userID);
        }
        
        public System.Threading.Tasks.Task<string> GetAllMatchesAsync(int userID)
        {
            return base.Channel.GetAllMatchesAsync(userID);
        }
        
        public string GetAllCricketMatches(int userID)
        {
            return base.Channel.GetAllCricketMatches(userID);
        }
        
        public System.Threading.Tasks.Task<string> GetAllCricketMatchesAsync(int userID)
        {
            return base.Channel.GetAllCricketMatchesAsync(userID);
        }
        
        public string GetAllSoccerMatches(int userID)
        {
            return base.Channel.GetAllSoccerMatches(userID);
        }
        
        public System.Threading.Tasks.Task<string> GetAllSoccerMatchesAsync(int userID)
        {
            return base.Channel.GetAllSoccerMatchesAsync(userID);
        }
        
        public string GetAllTennisMatches(int userID)
        {
            return base.Channel.GetAllTennisMatches(userID);
        }
        
        public System.Threading.Tasks.Task<string> GetAllTennisMatchesAsync(int userID)
        {
            return base.Channel.GetAllTennisMatchesAsync(userID);
        }
        
        public bool UpdateUserbetamountbyParentID(long ID, decimal amount, string userodd, string Password)
        {
            return base.Channel.UpdateUserbetamountbyParentID(ID, amount, userodd, Password);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserbetamountbyParentIDAsync(long ID, decimal amount, string userodd, string Password)
        {
            return base.Channel.UpdateUserbetamountbyParentIDAsync(ID, amount, userodd, Password);
        }
        
        public string GetUserBetsbyAgentID(int AgentID, string Password)
        {
            return base.Channel.GetUserBetsbyAgentID(AgentID, Password);
        }
        
        public System.Threading.Tasks.Task<string> GetUserBetsbyAgentIDAsync(int AgentID, string Password)
        {
            return base.Channel.GetUserBetsbyAgentIDAsync(AgentID, Password);
        }
        
        public string GetUserBetsbySuperID(int SuperID, string Password)
        {
            return base.Channel.GetUserBetsbySuperID(SuperID, Password);
        }
        
        public System.Threading.Tasks.Task<string> GetUserBetsbySuperIDAsync(int SuperID, string Password)
        {
            return base.Channel.GetUserBetsbySuperIDAsync(SuperID, Password);
        }
        
        public string GetUserBetsbySamiAdmin(int SuperID, string Password)
        {
            return base.Channel.GetUserBetsbySamiAdmin(SuperID, Password);
        }
        
        public System.Threading.Tasks.Task<string> GetUserBetsbySamiAdminAsync(int SuperID, string Password)
        {
            return base.Channel.GetUserBetsbySamiAdminAsync(SuperID, Password);
        }
        
        public string GetUserBetsbyAgentIDwithZeroReferer(int AgentID, string Password)
        {
            return base.Channel.GetUserBetsbyAgentIDwithZeroReferer(AgentID, Password);
        }
        
        public System.Threading.Tasks.Task<string> GetUserBetsbyAgentIDwithZeroRefererAsync(int AgentID, string Password)
        {
            return base.Channel.GetUserBetsbyAgentIDwithZeroRefererAsync(AgentID, Password);
        }
        
        public string GetUserbetsbyUserIDandAgentID(int AgentID, string Password)
        {
            return base.Channel.GetUserbetsbyUserIDandAgentID(AgentID, Password);
        }
        
        public System.Threading.Tasks.Task<string> GetUserbetsbyUserIDandAgentIDAsync(int AgentID, string Password)
        {
            return base.Channel.GetUserbetsbyUserIDandAgentIDAsync(AgentID, Password);
        }
        
        public string GetUserbetsForAdmin(string Password)
        {
            return base.Channel.GetUserbetsForAdmin(Password);
        }
        
        public System.Threading.Tasks.Task<string> GetUserbetsForAdminAsync(string Password)
        {
            return base.Channel.GetUserbetsForAdminAsync(Password);
        }
        
        public string GetMarketsOpenedbyUsersofAgent(int AgentID)
        {
            return base.Channel.GetMarketsOpenedbyUsersofAgent(AgentID);
        }
        
        public System.Threading.Tasks.Task<string> GetMarketsOpenedbyUsersofAgentAsync(int AgentID)
        {
            return base.Channel.GetMarketsOpenedbyUsersofAgentAsync(AgentID);
        }
        
        public string GetMarketsOpenedbyUsersForAdmin()
        {
            return base.Channel.GetMarketsOpenedbyUsersForAdmin();
        }
        
        public System.Threading.Tasks.Task<string> GetMarketsOpenedbyUsersForAdminAsync()
        {
            return base.Channel.GetMarketsOpenedbyUsersForAdminAsync();
        }
        
        public void SetLoggedinStatus(int userID, bool LoggedIn)
        {
            base.Channel.SetLoggedinStatus(userID, LoggedIn);
        }
        
        public System.Threading.Tasks.Task SetLoggedinStatusAsync(int userID, bool LoggedIn)
        {
            return base.Channel.SetLoggedinStatusAsync(userID, LoggedIn);
        }
        
        public string GetCompletedMatchedBetsbyUserID(int UserID, string MarketbookID)
        {
            return base.Channel.GetCompletedMatchedBetsbyUserID(UserID, MarketbookID);
        }
        
        public System.Threading.Tasks.Task<string> GetCompletedMatchedBetsbyUserIDAsync(int UserID, string MarketbookID)
        {
            return base.Channel.GetCompletedMatchedBetsbyUserIDAsync(UserID, MarketbookID);
        }
        
        public string GetAllUserMarketbyUserID(int userID)
        {
            return base.Channel.GetAllUserMarketbyUserID(userID);
        }
        
        public System.Threading.Tasks.Task<string> GetAllUserMarketbyUserIDAsync(int userID)
        {
            return base.Channel.GetAllUserMarketbyUserIDAsync(userID);
        }
        
        public string GetUserStatus(int UserID)
        {
            return base.Channel.GetUserStatus(UserID);
        }
        
        public System.Threading.Tasks.Task<string> GetUserStatusAsync(int UserID)
        {
            return base.Channel.GetUserStatusAsync(UserID);
        }
        
        public string GetLastLoginTimes(int UserID)
        {
            return base.Channel.GetLastLoginTimes(UserID);
        }
        
        public System.Threading.Tasks.Task<string> GetLastLoginTimesAsync(int UserID)
        {
            return base.Channel.GetLastLoginTimesAsync(UserID);
        }
        
        public void UpdateBetSizebyID(long ID, string BetSize, string Password)
        {
            base.Channel.UpdateBetSizebyID(ID, BetSize, Password);
        }
        
        public System.Threading.Tasks.Task UpdateBetSizebyIDAsync(long ID, string BetSize, string Password)
        {
            return base.Channel.UpdateBetSizebyIDAsync(ID, BetSize, Password);
        }
        
        public string GetUnMatchedBets(string Password)
        {
            return base.Channel.GetUnMatchedBets(Password);
        }
        
        public System.Threading.Tasks.Task<string> GetUnMatchedBetsAsync(string Password)
        {
            return base.Channel.GetUnMatchedBetsAsync(Password);
        }
        
        public string GetSheetNamebyMarketID(string marketbookID)
        {
            return base.Channel.GetSheetNamebyMarketID(marketbookID);
        }
        
        public System.Threading.Tasks.Task<string> GetSheetNamebyMarketIDAsync(string marketbookID)
        {
            return base.Channel.GetSheetNamebyMarketIDAsync(marketbookID);
        }
        
        public void UpdateBetLowerLimit(
                    int userID, 
                    decimal BetLowerLimit, 
                    decimal BetUpperLimit, 
                    bool isAllowedGrayHound, 
                    bool isAllowedHorse, 
                    decimal BetLowerLimitHorsePlace, 
                    decimal BetUpperLimitHorsePlace, 
                    decimal BetLowerLimitGrayHoundWin, 
                    decimal BetUpperLimitGrayHoundWin, 
                    decimal BetLowerLimitGrayHoundPlace, 
                    decimal BetUpperLimitGrayHoundPlace, 
                    decimal BetLowerLimitMatchOdds, 
                    decimal BetUpperLimitMatchOdds, 
                    decimal BetLowerLimitInningsRunns, 
                    decimal BetUpperLimitInningsRunns, 
                    decimal BetLowerLimitCompletedMatch, 
                    decimal BetUpperLimitCompletedMatch, 
                    bool isTennisAllowed, 
                    bool isSoccerAllowed, 
                    int CommissionRate, 
                    decimal BetLowerLimitMatchOddsSoccer, 
                    decimal BetUpperLimitMatchOddsSoccer, 
                    decimal BetLowerLimitMatchOddsTennis, 
                    decimal BetUpperLimitMatchOddsTennis, 
                    decimal BetUpperLimitTiedMatch, 
                    decimal BetLowerLimitTiedMatch, 
                    decimal BetUpperLimitWinner, 
                    decimal BetLowerLimitWinner, 
                    string Password, 
                    decimal BetUpperLimitFancy, 
                    decimal BetLowerLimitFancy)
        {
            base.Channel.UpdateBetLowerLimit(userID, BetLowerLimit, BetUpperLimit, isAllowedGrayHound, isAllowedHorse, BetLowerLimitHorsePlace, BetUpperLimitHorsePlace, BetLowerLimitGrayHoundWin, BetUpperLimitGrayHoundWin, BetLowerLimitGrayHoundPlace, BetUpperLimitGrayHoundPlace, BetLowerLimitMatchOdds, BetUpperLimitMatchOdds, BetLowerLimitInningsRunns, BetUpperLimitInningsRunns, BetLowerLimitCompletedMatch, BetUpperLimitCompletedMatch, isTennisAllowed, isSoccerAllowed, CommissionRate, BetLowerLimitMatchOddsSoccer, BetUpperLimitMatchOddsSoccer, BetLowerLimitMatchOddsTennis, BetUpperLimitMatchOddsTennis, BetUpperLimitTiedMatch, BetLowerLimitTiedMatch, BetUpperLimitWinner, BetLowerLimitWinner, Password, BetUpperLimitFancy, BetLowerLimitFancy);
        }
        
        public System.Threading.Tasks.Task UpdateBetLowerLimitAsync(
                    int userID, 
                    decimal BetLowerLimit, 
                    decimal BetUpperLimit, 
                    bool isAllowedGrayHound, 
                    bool isAllowedHorse, 
                    decimal BetLowerLimitHorsePlace, 
                    decimal BetUpperLimitHorsePlace, 
                    decimal BetLowerLimitGrayHoundWin, 
                    decimal BetUpperLimitGrayHoundWin, 
                    decimal BetLowerLimitGrayHoundPlace, 
                    decimal BetUpperLimitGrayHoundPlace, 
                    decimal BetLowerLimitMatchOdds, 
                    decimal BetUpperLimitMatchOdds, 
                    decimal BetLowerLimitInningsRunns, 
                    decimal BetUpperLimitInningsRunns, 
                    decimal BetLowerLimitCompletedMatch, 
                    decimal BetUpperLimitCompletedMatch, 
                    bool isTennisAllowed, 
                    bool isSoccerAllowed, 
                    int CommissionRate, 
                    decimal BetLowerLimitMatchOddsSoccer, 
                    decimal BetUpperLimitMatchOddsSoccer, 
                    decimal BetLowerLimitMatchOddsTennis, 
                    decimal BetUpperLimitMatchOddsTennis, 
                    decimal BetUpperLimitTiedMatch, 
                    decimal BetLowerLimitTiedMatch, 
                    decimal BetUpperLimitWinner, 
                    decimal BetLowerLimitWinner, 
                    string Password, 
                    decimal BetUpperLimitFancy, 
                    decimal BetLowerLimitFancy)
        {
            return base.Channel.UpdateBetLowerLimitAsync(userID, BetLowerLimit, BetUpperLimit, isAllowedGrayHound, isAllowedHorse, BetLowerLimitHorsePlace, BetUpperLimitHorsePlace, BetLowerLimitGrayHoundWin, BetUpperLimitGrayHoundWin, BetLowerLimitGrayHoundPlace, BetUpperLimitGrayHoundPlace, BetLowerLimitMatchOdds, BetUpperLimitMatchOdds, BetLowerLimitInningsRunns, BetUpperLimitInningsRunns, BetLowerLimitCompletedMatch, BetUpperLimitCompletedMatch, isTennisAllowed, isSoccerAllowed, CommissionRate, BetLowerLimitMatchOddsSoccer, BetUpperLimitMatchOddsSoccer, BetLowerLimitMatchOddsTennis, BetUpperLimitMatchOddsTennis, BetUpperLimitTiedMatch, BetLowerLimitTiedMatch, BetUpperLimitWinner, BetLowerLimitWinner, Password, BetUpperLimitFancy, BetLowerLimitFancy);
        }
        
        public void UpdateCheckConditionforPlaceBet(int UserID, bool CheckConditionforPlaceBet)
        {
            base.Channel.UpdateCheckConditionforPlaceBet(UserID, CheckConditionforPlaceBet);
        }
        
        public System.Threading.Tasks.Task UpdateCheckConditionforPlaceBetAsync(int UserID, bool CheckConditionforPlaceBet)
        {
            return base.Channel.UpdateCheckConditionforPlaceBetAsync(UserID, CheckConditionforPlaceBet);
        }
        
        public string GetTodayHorseRacing(int UserID, string EventTypeID)
        {
            return base.Channel.GetTodayHorseRacing(UserID, EventTypeID);
        }
        
        public System.Threading.Tasks.Task<string> GetTodayHorseRacingAsync(int UserID, string EventTypeID)
        {
            return base.Channel.GetTodayHorseRacingAsync(UserID, EventTypeID);
        }
        
        public string GetTodayHorseRacingNew(int UserID)
        {
            return base.Channel.GetTodayHorseRacingNew(UserID);
        }
        
        public System.Threading.Tasks.Task<string> GetTodayHorseRacingNewAsync(int UserID)
        {
            return base.Channel.GetTodayHorseRacingNewAsync(UserID);
        }
        
        public string GetTvLinks(string eventID)
        {
            return base.Channel.GetTvLinks(eventID);
        }
        
        public System.Threading.Tasks.Task<string> GetTvLinksAsync(string eventID)
        {
            return base.Channel.GetTvLinksAsync(eventID);
        }
        
        public string GetDistinctmarketopened()
        {
            return base.Channel.GetDistinctmarketopened();
        }
        
        public System.Threading.Tasks.Task<string> GetDistinctmarketopenedAsync()
        {
            return base.Channel.GetDistinctmarketopenedAsync();
        }
        
        public void UpdateOddsData(string oddsdata, string Oddtype)
        {
            base.Channel.UpdateOddsData(oddsdata, Oddtype);
        }
        
        public System.Threading.Tasks.Task UpdateOddsDataAsync(string oddsdata, string Oddtype)
        {
            return base.Channel.UpdateOddsDataAsync(oddsdata, Oddtype);
        }
        
        public int GetCommissionRatebyUserID(int UserID)
        {
            return base.Channel.GetCommissionRatebyUserID(UserID);
        }
        
        public System.Threading.Tasks.Task<int> GetCommissionRatebyUserIDAsync(int UserID)
        {
            return base.Channel.GetCommissionRatebyUserIDAsync(UserID);
        }
        
        public void UpdateUserPhoneandNamebyUserId(int userId, string Name, string Phone)
        {
            base.Channel.UpdateUserPhoneandNamebyUserId(userId, Name, Phone);
        }
        
        public System.Threading.Tasks.Task UpdateUserPhoneandNamebyUserIdAsync(int userId, string Name, string Phone)
        {
            return base.Channel.UpdateUserPhoneandNamebyUserIdAsync(userId, Name, Phone);
        }
        
        public string GetAccountsDatabyEventtypeuserIDandDateRange(int UserID, string From, string To, string Password)
        {
            return base.Channel.GetAccountsDatabyEventtypeuserIDandDateRange(UserID, From, To, Password);
        }
        
        public System.Threading.Tasks.Task<string> GetAccountsDatabyEventtypeuserIDandDateRangeAsync(int UserID, string From, string To, string Password)
        {
            return base.Channel.GetAccountsDatabyEventtypeuserIDandDateRangeAsync(UserID, From, To, Password);
        }
        
        public string GetDatabyAgentIDForCommisionandDateRange(int UserID, string From, string To, string Password)
        {
            return base.Channel.GetDatabyAgentIDForCommisionandDateRange(UserID, From, To, Password);
        }
        
        public System.Threading.Tasks.Task<string> GetDatabyAgentIDForCommisionandDateRangeAsync(int UserID, string From, string To, string Password)
        {
            return base.Channel.GetDatabyAgentIDForCommisionandDateRangeAsync(UserID, From, To, Password);
        }
        
        public string GetDatabyAgentIDForCommisionandDateRangeByEventtype(int UserID, string From, string To, string Password)
        {
            return base.Channel.GetDatabyAgentIDForCommisionandDateRangeByEventtype(UserID, From, To, Password);
        }
        
        public System.Threading.Tasks.Task<string> GetDatabyAgentIDForCommisionandDateRangeByEventtypeAsync(int UserID, string From, string To, string Password)
        {
            return base.Channel.GetDatabyAgentIDForCommisionandDateRangeByEventtypeAsync(UserID, From, To, Password);
        }
        
        public string UserAccountsGetCommission(int UserID, string From, string To, string Password)
        {
            return base.Channel.UserAccountsGetCommission(UserID, From, To, Password);
        }
        
        public System.Threading.Tasks.Task<string> UserAccountsGetCommissionAsync(int UserID, string From, string To, string Password)
        {
            return base.Channel.UserAccountsGetCommissionAsync(UserID, From, To, Password);
        }
        
        public string GetEventTypeNamebyMarketID(string marketBookId)
        {
            return base.Channel.GetEventTypeNamebyMarketID(marketBookId);
        }
        
        public System.Threading.Tasks.Task<string> GetEventTypeNamebyMarketIDAsync(string marketBookId)
        {
            return base.Channel.GetEventTypeNamebyMarketIDAsync(marketBookId);
        }
        
        public void UpdateLiveOddbyID(long ID, string liveOdd, string Password)
        {
            base.Channel.UpdateLiveOddbyID(ID, liveOdd, Password);
        }
        
        public System.Threading.Tasks.Task UpdateLiveOddbyIDAsync(long ID, string liveOdd, string Password)
        {
            return base.Channel.UpdateLiveOddbyIDAsync(ID, liveOdd, Password);
        }
        
        public void UpdateUserOddbyID(long ID, string UserOdd, string Password)
        {
            base.Channel.UpdateUserOddbyID(ID, UserOdd, Password);
        }
        
        public System.Threading.Tasks.Task UpdateUserOddbyIDAsync(long ID, string UserOdd, string Password)
        {
            return base.Channel.UpdateUserOddbyIDAsync(ID, UserOdd, Password);
        }
        
        public string GetAllowedMarketsbyUserID(int UserID)
        {
            return base.Channel.GetAllowedMarketsbyUserID(UserID);
        }
        
        public System.Threading.Tasks.Task<string> GetAllowedMarketsbyUserIDAsync(int UserID)
        {
            return base.Channel.GetAllowedMarketsbyUserIDAsync(UserID);
        }
        
        public void UpdateAllowedMarketsbyUserID(bool isCricketMatchOddsAllowedForBet, bool isCricketTiedMatchAllowedForBet, bool isCricketCompletedMatchAllowedForBet, bool isCricketInningsRunsAllowedForBet, bool isSoccerAllowedForBet, bool isTennisAllowedForBet, bool isHorseRaceWinAllowedForBet, bool isHorseRacePlaceAllowedForBet, bool isGrayHoundRaceWinAllowedForBet, bool isGrayHoundRacePlaceAllowedForBet, int UserID, bool isWinnerMarketAllowedForBet, string Password, bool isFancyAllowed)
        {
            base.Channel.UpdateAllowedMarketsbyUserID(isCricketMatchOddsAllowedForBet, isCricketTiedMatchAllowedForBet, isCricketCompletedMatchAllowedForBet, isCricketInningsRunsAllowedForBet, isSoccerAllowedForBet, isTennisAllowedForBet, isHorseRaceWinAllowedForBet, isHorseRacePlaceAllowedForBet, isGrayHoundRaceWinAllowedForBet, isGrayHoundRacePlaceAllowedForBet, UserID, isWinnerMarketAllowedForBet, Password, isFancyAllowed);
        }
        
        public System.Threading.Tasks.Task UpdateAllowedMarketsbyUserIDAsync(bool isCricketMatchOddsAllowedForBet, bool isCricketTiedMatchAllowedForBet, bool isCricketCompletedMatchAllowedForBet, bool isCricketInningsRunsAllowedForBet, bool isSoccerAllowedForBet, bool isTennisAllowedForBet, bool isHorseRaceWinAllowedForBet, bool isHorseRacePlaceAllowedForBet, bool isGrayHoundRaceWinAllowedForBet, bool isGrayHoundRacePlaceAllowedForBet, int UserID, bool isWinnerMarketAllowedForBet, string Password, bool isFancyAllowed)
        {
            return base.Channel.UpdateAllowedMarketsbyUserIDAsync(isCricketMatchOddsAllowedForBet, isCricketTiedMatchAllowedForBet, isCricketCompletedMatchAllowedForBet, isCricketInningsRunsAllowedForBet, isSoccerAllowedForBet, isTennisAllowedForBet, isHorseRaceWinAllowedForBet, isHorseRacePlaceAllowedForBet, isGrayHoundRaceWinAllowedForBet, isGrayHoundRacePlaceAllowedForBet, UserID, isWinnerMarketAllowedForBet, Password, isFancyAllowed);
        }
        
        public UserServiceReference.SP_Users_GetCommissionAccountIDandBookAccountID_Result GetCommissionaccountIdandBookAccountbyUserID(int UserID)
        {
            return base.Channel.GetCommissionaccountIdandBookAccountbyUserID(UserID);
        }
        
        public System.Threading.Tasks.Task<UserServiceReference.SP_Users_GetCommissionAccountIDandBookAccountID_Result> GetCommissionaccountIdandBookAccountbyUserIDAsync(int UserID)
        {
            return base.Channel.GetCommissionaccountIdandBookAccountbyUserIDAsync(UserID);
        }
        
        public UserServiceReference.SP_Users_GetReferrerRateandReferrerIDbyUserID_Result GetReferrerRateandIDbyUserID(int UserID)
        {
            return base.Channel.GetReferrerRateandIDbyUserID(UserID);
        }
        
        public System.Threading.Tasks.Task<UserServiceReference.SP_Users_GetReferrerRateandReferrerIDbyUserID_Result> GetReferrerRateandIDbyUserIDAsync(int UserID)
        {
            return base.Channel.GetReferrerRateandIDbyUserIDAsync(UserID);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IUserServices))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IUserServices))
            {
                return new System.ServiceModel.EndpointAddress("http://78.110.160.52:8960/bfnexchangeServices/Services/UserServices.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return UserServicesClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IUserServices);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return UserServicesClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IUserServices);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IUserServices,
        }
    }
}
